import{_ as n,c as s,o as a,a as p}from"./app-B1N2e-pn.js";const e="/images/s_poetries_work_gitee_2020_09_99.png",t="/images/s_poetries_work_gitee_2020_09_100.png",o="/images/s_poetries_work_images_202203211358420.png",c="/images/s_poetries_work_images_202203211358473.png",l="/images/s_poetries_work_images_202203211358728.png",i="/images/s_poetries_work_images_202203211358228.png",u="/images/s_poetries_work_images_202203211358441.png",r="/images/s_poetries_work_images_202203211359786.png",d="/images/s_poetries_work_images_202203211359054.png",k="/images/s_poetries_work_images_202203211359533.png",v="/images/s_poetries_work_images_202203211359184.png",m="/images/s_poetries_work_images_202203211359531.png",b="/images/s_poetries_work_images_202203211359343.png",y="/images/s_poetries_work_images_202203211359968.png",g="/images/s_poetries_work_images_202203211359489.png",w="/images/s_poetries_work_images_202203211400801.png",h="/images/s_poetries_work_images_202203211400020.png",f="/images/s_poetries_work_images_202203211400324.png",x="/images/s_poetries_work_images_202203211400687.png",j="/images/s_poetries_work_images_202203211400875.png",N="/images/s_poetries_work_images_202203211400253.png",S="/images/s_poetries_work_images_202203211400806.png",E="/images/s_poetries_work_images_202203211400840.png",C="/images/s_poetries_work_images_202203211401709.png",I="/images/s_poetries_work_images_202203211401591.png",_="/images/s_poetries_work_images_202203211401764.png",D="/images/s_poetries_work_images_202203211401780.png",M="/images/s_poetries_work_images_image_20210220201751694.png",O={},q=p(`<p>原文链接: <a href="https://interview.poetries.top/docs/excellent-docs/17-%E6%A1%86%E6%9E%B6%E9%80%9A%E8%AF%86.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/docs/excellent-docs/17-%E6%A1%86%E6%9E%B6%E9%80%9A%E8%AF%86.html</a></p><h2 id="_1-mvvm" tabindex="-1"><a class="header-anchor" href="#_1-mvvm"><span>1 MVVM</span></a></h2><blockquote><p><code>MVVM</code> 由以下三个内容组成</p></blockquote><ul><li><code>View</code>：界面</li><li><code>Model</code>：数据模型</li><li><code>ViewModel</code>：作为桥梁负责沟通 <code>View</code> 和 <code>Model</code></li></ul><blockquote><p>在 <code>JQuery</code> 时期，如果需要刷新 <code>UI</code> 时，需要先取到对应的 <code>DOM</code> 再更新 <code>UI</code>，这样数据和业务的逻辑就和页面有强耦合。</p></blockquote><p>MVVM</p><p>在 <code>MVVM</code> 中，<code>UI</code> 是通过数据驱动的，数据一旦改变就会相应的刷新对应的 <code>UI</code>，<code>UI</code> 如果改变，也会改变对应的数据。这种方式就可以在业务处理中只关心数据的流转，而无需直接和页面打交道。<code>ViewModel</code> 只关心数据和业务的处理，不关心 <code>View</code> 如何处理数据，在这种情况下，<code>View</code> 和 <code>Model</code> 都可以独立出来，任何一方改变了也不一定需要改变另一方，并且可以将一些可复用的逻辑放在一个 <code>ViewModel</code> 中，让多个 <code>View</code>复用这个 <code>ViewModel</code>。</p><ul><li>在 <code>MVVM</code> 中，最核心的也就是数据双向绑定，例如 <code>Angluar</code> 的脏数据检测，<code>Vue</code> 中的数据劫持。</li></ul><p><strong>脏数据检测</strong></p><blockquote><p>当触发了指定事件后会进入脏数据检测，这时会调用 <code>$digest</code> 循环遍历所有的数据观察者，判断当前值是否和先前的值有区别，如果检测到变化的话，会调用 <code>$watch</code> 函数，然后再次调用 <code>$digest</code> 循环直到发现没有变化。循环至少为二次 ，至多为十次。</p></blockquote><blockquote><p>脏数据检测虽然存在低效的问题，但是不关心数据是通过什么方式改变的，都可以完成任务，但是这在 <code>Vue</code> 中的双向绑定是存在问题的。并且脏数据检测可以实现批量检测出更新的值，再去统一更新 <code>UI</code>，大大减少了操作 <code>DOM</code> 的次数。所以低效也是相对的，这就仁者见仁智者见智了。</p></blockquote><p><strong>数据劫持</strong></p><blockquote><p><code>Vue</code> 内部使用了 <code>Object.defineProperty()</code> 来实现双向绑定，通过这个函数可以监听到 <code>set</code> 和 <code>get</code> 的事件。</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;poetries&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> name <span class="token operator">=</span> data<span class="token punctuation">.</span>name <span class="token comment">// -&gt; get value</span></span>
<span class="line">    data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;yyy&#39;</span> <span class="token comment">// -&gt; change value</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 判断类型</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 递归子属性</span></span>
<span class="line">      <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span></span>
<span class="line">      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get value&#39;</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token keyword">return</span> val</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveSetter</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;change value&#39;</span><span class="token punctuation">)</span></span>
<span class="line">          val <span class="token operator">=</span> newVal</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上代码简单的实现了如何监听数据的 <code>set</code> 和 <code>get</code> 的事件，但是仅仅如此是不够的，还需要在适当的时候给属性添加发布订阅</p></blockquote><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        {{name}}</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在解析如上模板代码时，遇到 <code>{name}</code> 就会给属性 <code>name</code> 添加发布订阅。</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 通过 Dep 解耦</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">addSub</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// sub 是 Watcher 实例</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sub</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 全局属性，通过该属性配置 Watcher</span></span>
<span class="line">    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> value</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 将 Dep.target 指向自己</span></span>
<span class="line">        <span class="token comment">// 然后触发属性的 getter 添加监听</span></span>
<span class="line">        <span class="token comment">// 最后将 Dep.target 置空</span></span>
<span class="line">        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb</span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj</span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key</span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获得新值</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">]</span></span>
<span class="line">        <span class="token comment">// 调用 update 方法更新 Dom</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;poetries&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 模拟解析到 \`{{name}}\` 触发的操作</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// update Dom innerText</span></span>
<span class="line">    data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;yyy&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>接下来,对 <code>defineReactive</code> 函数进行改造</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 递归子属性</span></span>
<span class="line">      <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get value&#39;</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token comment">// 将 Watcher 添加到订阅</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            dp<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token keyword">return</span> val</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveSetter</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;change value&#39;</span><span class="token punctuation">)</span></span>
<span class="line">          val <span class="token operator">=</span> newVal</span>
<span class="line">          <span class="token comment">// 执行 watcher 的 update 方法</span></span>
<span class="line">          dp<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上实现了一个简易的双向绑定，核心思路就是手动触发一次属性的 <code>getter</code> 来实现发布订阅的添加</p></blockquote><p><strong>Proxy 与 Object.defineProperty 对比</strong></p><blockquote><p><code>Object.defineProperty</code> 虽然已经能够实现双向绑定了，但是他还是有缺陷的。</p></blockquote><ul><li>只能对属性进行数据劫持，所以需要深度遍历整个对象</li><li>对于数组不能监听到数据的变化</li><li>虽然 <code>Vue</code> 中确实能检测到数组数据的变化，但是其实是使用了 <code>hack</code>的办法，并且也是有缺陷的。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> arrayProto <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype</span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>arrayProto<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// hack 以下几个函数</span></span>
<span class="line">    <span class="token keyword">const</span> methodsToPatch <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&#39;unshift&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&#39;splice&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&#39;sort&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&#39;reverse&#39;</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    methodsToPatch<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 获得原生函数</span></span>
<span class="line">      <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span></span>
<span class="line">      <span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">mutator</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 调用原生函数</span></span>
<span class="line">        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__</span>
<span class="line">        <span class="token keyword">let</span> inserted</span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">case</span> <span class="token string">&#39;push&#39;</span><span class="token operator">:</span></span>
<span class="line">          <span class="token keyword">case</span> <span class="token string">&#39;unshift&#39;</span><span class="token operator">:</span></span>
<span class="line">            inserted <span class="token operator">=</span> args</span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">          <span class="token keyword">case</span> <span class="token string">&#39;splice&#39;</span><span class="token operator">:</span></span>
<span class="line">            inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> ob<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 触发更新</span></span>
<span class="line">        ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> result</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>反观 <code>Proxy</code>就没以上的问题，原生支持监听数组变化，并且可以直接对整个对象进行拦截，所以 <code>Vue</code> 也将在下个大版本中使用 <code>Proxy</code> 替换 <code>Object.defineProperty</code></p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">let</span> <span class="token function-variable function">onWatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> setBind<span class="token punctuation">,</span> getLogger</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">getLogger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">)</span></span>
<span class="line">          <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setBind</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> value</span>
<span class="line">    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">onWatch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      value <span class="token operator">=</span> v</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Get &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>property<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39; = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    p<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// bind \`value\` to \`2\`</span></span>
<span class="line">    p<span class="token punctuation">.</span>a <span class="token comment">// -&gt; Get &#39;a&#39; = 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-路由原理" tabindex="-1"><a class="header-anchor" href="#_2-路由原理"><span>2 路由原理</span></a></h2><blockquote><p>前端路由实现起来其实很简单，本质就是监听 <code>URL</code> 的变化，然后匹配路由规则，显示相应的页面，并且无须刷新。目前单页面使用的路由就只有两种实现方式</p></blockquote><ul><li><code>hash</code> 模式</li><li><code>history</code> 模式</li></ul><blockquote><p><code>www.test.com/##/</code> 就是 <code>Hash URL</code>，当 <code>##</code> 后面的哈希值发生变化时，不会向服务器请求数据，可以通过 <code>hashchange</code> 事件来监听到 <code>URL</code> 的变化，从而进行跳转页面。</p></blockquote><p><img src="`+e+'" alt=""></p><blockquote><p><code>History</code>模式是 <code>HTML5</code> 新推出的功能，比之 <code>Hash URL</code> 更加美观</p></blockquote><p><img src="'+t+`" alt=""></p><h2 id="_3-virtual-dom" tabindex="-1"><a class="header-anchor" href="#_3-virtual-dom"><span>3 Virtual Dom</span></a></h2><p><strong>为什么需要 Virtual Dom</strong></p><blockquote><p>众所周知，操作 <code>DOM</code> 是很耗费性能的一件事情，既然如此，我们可以考虑通过 <code>JS</code> 对象来模拟 <code>DOM</code> 对象，毕竟操作 <code>JS</code> 对象比操作 <code>DOM</code> 省时的多</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 假设这里模拟一个 ul，其中包含了 5 个 li</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token comment">// 这里替换上面的 li</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>从上述例子中，我们一眼就可以看出先前的 <code>ul</code> 中的第三个 <code>li</code> 被移除了，四五替换了位置。</p></blockquote><ul><li>如果以上操作对应到 <code>DOM</code> 中，那么就是以下代码</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 删除第三个 li</span></span>
<span class="line">    ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 将第四个 li 和第五个交换位置</span></span>
<span class="line">    <span class="token keyword">let</span> fromNode <span class="token operator">=</span> ul<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">let</span> toNode <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">let</span> cloneFromNode <span class="token operator">=</span> fromNode<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> cloenToNode <span class="token operator">=</span> toNode<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    ul<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>cloneFromNode<span class="token punctuation">,</span> toNode<span class="token punctuation">)</span></span>
<span class="line">    ul<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>cloenToNode<span class="token punctuation">,</span> fromNode<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当然在实际操作中，我们还需要给每个节点一个标识，作为判断是同一个节点的依据。所以这也是 <code>Vue</code> 和 <code>React</code> 中官方推荐列表里的节点使用唯一的 <code>key</code> 来保证性能。</p></blockquote><ul><li>那么既然 <code>DOM</code> 对象可以通过 <code>JS</code> 对象来模拟，反之也可以通过 <code>JS</code> 对象来渲染出对应的 <code>DOM</code></li><li>以下是一个 <code>JS</code> 对象模拟 <code>DOM</code> 对象的简单实现</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token doc-comment comment">/**</span>
<span class="line">       * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">tag</span> &#39;div&#39;</span>
<span class="line">       * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">props</span> <span class="token punctuation">{</span> class: &#39;item&#39; <span class="token punctuation">}</span></span>
<span class="line">       * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">children</span> [ Element1, &#39;text&#39;]</span>
<span class="line">       * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">key</span> option</span>
<span class="line">       */</span></span>
<span class="line">      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag</span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> children</span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 渲染</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_createElement</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">,</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>key</span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> root</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_createElement</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 创建节点</span></span>
<span class="line">      <span class="token function">_createElement</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> child<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 通过 tag 创建节点</span></span>
<span class="line">        <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 设置节点属性</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> value <span class="token operator">=</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">            el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 递归添加子节点</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          child<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> child</span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token keyword">instanceof</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              child <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_createElement</span><span class="token punctuation">(</span></span>
<span class="line">                element<span class="token punctuation">.</span>tag<span class="token punctuation">,</span></span>
<span class="line">                element<span class="token punctuation">.</span>props<span class="token punctuation">,</span></span>
<span class="line">                element<span class="token punctuation">.</span>children<span class="token punctuation">,</span></span>
<span class="line">                element<span class="token punctuation">.</span>key</span>
<span class="line">              <span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">              child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> el</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Virtual Dom 算法简述</strong></p><ul><li>既然我们已经通过 <code>JS</code> 来模拟实现了 <code>DOM</code>，那么接下来的难点就在于如何判断旧的对象和新的对象之间的差异。</li><li><code>DOM</code> 是多叉树的结构，如果需要完整的对比两颗树的差异，那么需要的时间复杂度会是 <code>O(n ^ 3)</code>，这个复杂度肯定是不能接受的。于是 <code>React</code>团队优化了算法，实现了 <code>O(n)</code> 的复杂度来对比差异。</li><li>实现<code>O(n)</code> 复杂度的关键就是只对比同层的节点，而不是跨层对比，这也是考虑到在实际业务中很少会去跨层的移动 <code>DOM</code> 元素</li></ul><blockquote><p>所以判断差异的算法就分为了两步</p></blockquote><ul><li>首先从上至下，从左往右遍历对象，也就是树的深度遍历，这一步中会给每个节点添加索引，便于最后渲染差异</li><li>一旦节点有子元素，就去判断子元素是否有不同</li></ul><p><strong>Virtual Dom 算法实现</strong></p><p><strong>树的递归</strong></p><ul><li>首先我们来实现树的递归算法，在实现该算法前，先来考虑下两个节点对比会有几种情况</li><li>新的节点的 <code>tagName</code> 或者 <code>key</code> 和旧的不同，这种情况代表需要替换旧的节点，并且也不再需要遍历新旧节点的子元素了，因为整个旧节点都被删掉了</li><li>新的节点的 <code>tagName</code> 和 <code>key</code>（可能都没有）和旧的相同，开始遍历子树</li><li>没有新的节点，那么什么都不用做</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> StateEnums<span class="token punctuation">,</span> isString<span class="token punctuation">,</span> move <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./util&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> Element <span class="token keyword">from</span> <span class="token string">&#39;./element&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">diff</span><span class="token punctuation">(</span><span class="token parameter">oldDomTree<span class="token punctuation">,</span> newDomTree</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 用于记录差异</span></span>
<span class="line">      <span class="token keyword">let</span> pathchs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 一开始的索引为 0</span></span>
<span class="line">      <span class="token function">dfs</span><span class="token punctuation">(</span>oldDomTree<span class="token punctuation">,</span> newDomTree<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pathchs<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> pathchs</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">oldNode<span class="token punctuation">,</span> newNode<span class="token punctuation">,</span> index<span class="token punctuation">,</span> patches</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 用于保存子树的更改</span></span>
<span class="line">      <span class="token keyword">let</span> curPatches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token comment">// 需要判断三种情况</span></span>
<span class="line">      <span class="token comment">// 1.没有新的节点，那么什么都不用做</span></span>
<span class="line">      <span class="token comment">// 2.新的节点的 tagName 和 \`key\` 和旧的不同，就替换</span></span>
<span class="line">      <span class="token comment">// 3.新的节点的 tagName 和 key（可能都没有） 和旧的相同，开始遍历子树</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newNode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode<span class="token punctuation">.</span>tag <span class="token operator">===</span> oldNode<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span> newNode<span class="token punctuation">.</span>key <span class="token operator">===</span> oldNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 判断属性是否变更</span></span>
<span class="line">        <span class="token keyword">let</span> props <span class="token operator">=</span> <span class="token function">diffProps</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">.</span>props<span class="token punctuation">,</span> newNode<span class="token punctuation">.</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>length<span class="token punctuation">)</span> curPatches<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> StateEnums<span class="token punctuation">.</span>ChangeProps<span class="token punctuation">,</span> props <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 遍历子树</span></span>
<span class="line">        <span class="token function">diffChildren</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> newNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> index<span class="token punctuation">,</span> patches<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 节点不同，需要替换</span></span>
<span class="line">        curPatches<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> StateEnums<span class="token punctuation">.</span>Replace<span class="token punctuation">,</span> <span class="token literal-property property">node</span><span class="token operator">:</span> newNode <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>curPatches<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>patches<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          patches<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> patches<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>curPatches<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          patches<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> curPatches</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>判断属性的更改</strong></p><blockquote><p>判断属性的更改也分三个步骤</p></blockquote><ul><li>遍历旧的属性列表，查看每个属性是否还存在于新的属性列表中</li><li>遍历新的属性列表，判断两个列表中都存在的属性的值是否有变化</li><li>在第二步中同时查看是否有属性不存在与旧的属性列列表中</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">diffProps</span><span class="token punctuation">(</span><span class="token parameter">oldProps<span class="token punctuation">,</span> newProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 判断 Props 分以下三步骤</span></span>
<span class="line">      <span class="token comment">// 先遍历 oldProps 查看是否存在删除的属性</span></span>
<span class="line">      <span class="token comment">// 然后遍历 newProps 查看是否有属性值被修改</span></span>
<span class="line">      <span class="token comment">// 最后查看是否有属性新增</span></span>
<span class="line">      <span class="token keyword">let</span> change <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> oldProps<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          change<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">prop</span><span class="token operator">:</span> key</span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>newProps<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">const</span> prop <span class="token operator">=</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            change<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">              <span class="token literal-property property">prop</span><span class="token operator">:</span> key<span class="token punctuation">,</span></span>
<span class="line">              <span class="token literal-property property">value</span><span class="token operator">:</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            change<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">              <span class="token literal-property property">prop</span><span class="token operator">:</span> key<span class="token punctuation">,</span></span>
<span class="line">              <span class="token literal-property property">value</span><span class="token operator">:</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> change</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>判断列表差异算法实现</strong></p><blockquote><p>这个算法是整个 <code>Virtual Dom</code> 中最核心的算法，且让我一一为你道来。 这里的主要步骤其实和判断属性差异是类似的，也是分为三步</p></blockquote><ul><li>遍历旧的节点列表，查看每个节点是否还存在于新的节点列表中</li><li>遍历新的节点列表，判断是否有新的节点</li><li>在第二步中同时判断节点是否有移动</li></ul><blockquote><p>PS：该算法只对有 <code>key</code> 的节点做处理</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">listDiff</span><span class="token punctuation">(</span><span class="token parameter">oldList<span class="token punctuation">,</span> newList<span class="token punctuation">,</span> index<span class="token punctuation">,</span> patches</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 为了遍历方便，先取出两个 list 的所有 keys</span></span>
<span class="line">      <span class="token keyword">let</span> oldKeys <span class="token operator">=</span> <span class="token function">getKeys</span><span class="token punctuation">(</span>oldList<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">let</span> newKeys <span class="token operator">=</span> <span class="token function">getKeys</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">let</span> changes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 用于保存变更后的节点数据</span></span>
<span class="line">      <span class="token comment">// 使用该数组保存有以下好处</span></span>
<span class="line">      <span class="token comment">// 1.可以正确获得被删除节点索引</span></span>
<span class="line">      <span class="token comment">// 2.交换节点位置只需要操作一遍 DOM</span></span>
<span class="line">      <span class="token comment">// 3.用于 \`diffChildren\` 函数中的判断，只需要遍历</span></span>
<span class="line">      <span class="token comment">// 两个树中都存在的节点，而对于新增或者删除的节点来说，完全没必要</span></span>
<span class="line">      <span class="token comment">// 再去判断一遍</span></span>
<span class="line">      <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">      oldList <span class="token operator">&amp;&amp;</span></span>
<span class="line">        oldList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> key <span class="token operator">=</span> item<span class="token punctuation">.</span>key</span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            key <span class="token operator">=</span> item</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token comment">// 寻找新的 children 中是否含有当前节点</span></span>
<span class="line">          <span class="token comment">// 没有的话需要删除</span></span>
<span class="line">          <span class="token keyword">let</span> index <span class="token operator">=</span> newKeys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 遍历变更后的数组</span></span>
<span class="line">      <span class="token keyword">let</span> length <span class="token operator">=</span> list<span class="token punctuation">.</span>length</span>
<span class="line">      <span class="token comment">// 因为删除数组元素是会更改索引的</span></span>
<span class="line">      <span class="token comment">// 所有从后往前删可以保证索引不变</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 判断当前元素是否为空，为空表示需要删除</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">          changes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">type</span><span class="token operator">:</span> StateEnums<span class="token punctuation">.</span>Remove<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">index</span><span class="token operator">:</span> i</span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 遍历新的 list，判断是否有节点新增或移动</span></span>
<span class="line">      <span class="token comment">// 同时也对 \`list\` 做节点新增和移动节点的操作</span></span>
<span class="line">      newList <span class="token operator">&amp;&amp;</span></span>
<span class="line">        newList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> key <span class="token operator">=</span> item<span class="token punctuation">.</span>key</span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            key <span class="token operator">=</span> item</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token comment">// 寻找旧的 children 中是否含有当前节点</span></span>
<span class="line">          <span class="token keyword">let</span> index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">          <span class="token comment">// 没找到代表新节点，需要插入</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            changes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">              <span class="token literal-property property">type</span><span class="token operator">:</span> StateEnums<span class="token punctuation">.</span>Insert<span class="token punctuation">,</span></span>
<span class="line">              <span class="token literal-property property">node</span><span class="token operator">:</span> item<span class="token punctuation">,</span></span>
<span class="line">              <span class="token literal-property property">index</span><span class="token operator">:</span> i</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 找到了，需要判断是否需要移动</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              changes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token literal-property property">type</span><span class="token operator">:</span> StateEnums<span class="token punctuation">.</span>Move<span class="token punctuation">,</span></span>
<span class="line">                <span class="token literal-property property">from</span><span class="token operator">:</span> index<span class="token punctuation">,</span></span>
<span class="line">                <span class="token literal-property property">to</span><span class="token operator">:</span> i</span>
<span class="line">              <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">              <span class="token function">move</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> index<span class="token punctuation">,</span> i<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span> changes<span class="token punctuation">,</span> list <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token keyword">let</span> text</span>
<span class="line">      list <span class="token operator">&amp;&amp;</span></span>
<span class="line">        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> key</span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            key <span class="token operator">=</span> <span class="token punctuation">[</span>item<span class="token punctuation">]</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            key <span class="token operator">=</span> item<span class="token punctuation">.</span>key</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> keys</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>遍历子元素打标识</strong></p><blockquote><p>对于这个函数来说，主要功能就两个</p></blockquote><ul><li>判断两个列表差异 <ul><li>给节点打上标记</li><li>总体来说，该函数实现的功能很简单</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">diffChildren</span><span class="token punctuation">(</span><span class="token parameter">oldChild<span class="token punctuation">,</span> newChild<span class="token punctuation">,</span> index<span class="token punctuation">,</span> patches</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token punctuation">{</span> changes<span class="token punctuation">,</span> list <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">listDiff</span><span class="token punctuation">(</span>oldChild<span class="token punctuation">,</span> newChild<span class="token punctuation">,</span> index<span class="token punctuation">,</span> patches<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>changes<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>patches<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          patches<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> patches<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>changes<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          patches<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> changes</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 记录上一个遍历过的节点</span></span>
<span class="line">      <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">      oldChild <span class="token operator">&amp;&amp;</span></span>
<span class="line">        oldChild<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> child <span class="token operator">=</span> item <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>children</span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            index <span class="token operator">=</span></span>
<span class="line">              last <span class="token operator">&amp;&amp;</span> last<span class="token punctuation">.</span>children <span class="token operator">?</span> index <span class="token operator">+</span> last<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> index <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">            <span class="token keyword">let</span> keyIndex <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>key<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">let</span> node <span class="token operator">=</span> newChild<span class="token punctuation">[</span>keyIndex<span class="token punctuation">]</span></span>
<span class="line">            <span class="token comment">// 只遍历新旧中都存在的节点，其他新增或者删除的没必要遍历</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">dfs</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> node<span class="token punctuation">,</span> index<span class="token punctuation">,</span> patches<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> index <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">          last <span class="token operator">=</span> item</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>渲染差异</strong></p><blockquote><p>通过之前的算法，我们已经可以得出两个树的差异了。既然知道了差异，就需要局部去更新 <code>DOM</code> 了，下面就让我们来看看 <code>Virtual Dom</code> 算法的最后一步骤</p></blockquote><p><strong>这个函数主要两个功能</strong></p><ul><li>深度遍历树，将需要做变更操作的取出来</li><li>局部更新 <code>DOM</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> patchs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> changes <span class="token operator">=</span> patchs<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span>
<span class="line">      <span class="token keyword">let</span> childNodes <span class="token operator">=</span> node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>childNodes</span>
<span class="line">      <span class="token comment">// 这里的深度遍历和 diff 中是一样的</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>childNodes<span class="token punctuation">)</span> index <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>changes <span class="token operator">&amp;&amp;</span> changes<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> patchs<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">changeDom</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> changes<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>childNodes <span class="token operator">&amp;&amp;</span> childNodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          index <span class="token operator">=</span></span>
<span class="line">            last <span class="token operator">&amp;&amp;</span> last<span class="token punctuation">.</span>children <span class="token operator">?</span> index <span class="token operator">+</span> last<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> index <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> patchs<span class="token punctuation">)</span></span>
<span class="line">          last <span class="token operator">=</span> item</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">changeDom</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> changes<span class="token punctuation">,</span> noChild</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      changes <span class="token operator">&amp;&amp;</span></span>
<span class="line">        changes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">change</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> change</span>
<span class="line">          <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> StateEnums<span class="token punctuation">.</span>ChangeProps<span class="token operator">:</span></span>
<span class="line">              <span class="token keyword">let</span> <span class="token punctuation">{</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> change</span>
<span class="line">              props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                  node<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>prop<span class="token punctuation">,</span> item<span class="token punctuation">.</span>value<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                  node<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>prop<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">              <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">              <span class="token keyword">break</span></span>
<span class="line">            <span class="token keyword">case</span> StateEnums<span class="token punctuation">.</span>Remove<span class="token operator">:</span></span>
<span class="line">              node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>change<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">              <span class="token keyword">break</span></span>
<span class="line">            <span class="token keyword">case</span> StateEnums<span class="token punctuation">.</span>Insert<span class="token operator">:</span></span>
<span class="line">              <span class="token keyword">let</span> dom</span>
<span class="line">              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span>node<span class="token punctuation">)</span></span>
<span class="line">              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>change<span class="token punctuation">.</span>node <span class="token keyword">instanceof</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                dom <span class="token operator">=</span> change<span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">              <span class="token punctuation">}</span></span>
<span class="line">              node<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>change<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">              <span class="token keyword">break</span></span>
<span class="line">            <span class="token keyword">case</span> StateEnums<span class="token punctuation">.</span>Replace<span class="token operator">:</span></span>
<span class="line">              node<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>change<span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">)</span></span>
<span class="line">              <span class="token keyword">break</span></span>
<span class="line">            <span class="token keyword">case</span> StateEnums<span class="token punctuation">.</span>Move<span class="token operator">:</span></span>
<span class="line">              <span class="token keyword">let</span> fromNode <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>change<span class="token punctuation">.</span>from<span class="token punctuation">]</span></span>
<span class="line">              <span class="token keyword">let</span> toNode <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>change<span class="token punctuation">.</span>to<span class="token punctuation">]</span></span>
<span class="line">              <span class="token keyword">let</span> cloneFromNode <span class="token operator">=</span> fromNode<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">              <span class="token keyword">let</span> cloenToNode <span class="token operator">=</span> toNode<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">              node<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>cloneFromNode<span class="token punctuation">,</span> toNode<span class="token punctuation">)</span></span>
<span class="line">              node<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>cloenToNode<span class="token punctuation">,</span> fromNode<span class="token punctuation">)</span></span>
<span class="line">              <span class="token keyword">break</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">              <span class="token keyword">break</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Virtual Dom 算法的实现也就是以下三步</strong></p><ul><li>通过 <code>JS</code> 来模拟创建 <code>DOM</code> 对象</li><li>判断两个对象的差异</li><li>渲染差异</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">let</span> test4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;my-div&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;test4&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> test5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;my-div&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;test5&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;my-div&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>test4<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">let</span> test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;11&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>test5<span class="token punctuation">,</span> test4<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">let</span> root <span class="token operator">=</span> test1<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">let</span> pathchs <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span> test2<span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathchs<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始更新&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">patch</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> pathchs<span class="token punctuation">)</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;结束更新&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-diff算法" tabindex="-1"><a class="header-anchor" href="#_4-diff算法"><span>4 Diff算法</span></a></h2><h3 id="_4-1-react-diff" tabindex="-1"><a class="header-anchor" href="#_4-1-react-diff"><span>4.1 React-Diff</span></a></h3><p>React的思路是递增法。通过对比新的列表中的节点，在原本的列表中的位置是否是递增，来判断当前节点是否需要移动。</p><p><strong>1. 实现原理</strong></p><p>来看这样一个例子。</p><p><img src="`+o+`" alt=""></p><p><code>nextList</code>为新的列表，<code>prevList</code>为旧列表。这个例子我们一眼能看出来，新列表是不需要进行移动的。下面我用<code>react</code>的递增思想，解释一下为什么新列表中的节点不需要移动。</p><p>我们首先遍历<code>nextList</code>，并且找到每一个节点，在<code>prevList</code>中的位置。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">prevList<span class="token punctuation">,</span> nextList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nextList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> nextItem <span class="token operator">=</span> nextList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prevList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> prevItem <span class="token operator">=</span> prevList<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextItem <span class="token operator">===</span> prevItem<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到位置以后，与上一个节点的位置进行对比，如果当前的位置大于上一个位置，说明当前节点不需要移动。因此我们要定义一个<code>lastIndex</code>来记录上一个节点的位置。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">prevList<span class="token punctuation">,</span> nextList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nextList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> nextItem <span class="token operator">=</span> nextList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prevList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> prevItem <span class="token operator">=</span> prevList<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextItem <span class="token operator">===</span> prevItem<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 需要移动节点</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 不需要移动节点，记录当前位置，与之后的节点进行对比</span></span>
<span class="line">                        lastIndex <span class="token operator">=</span> j</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，<code>nextList</code>每个节点在<code>prevList</code>的位置为<code>0 1 2 3</code>。每一项都要比前一项要大，所以不需要移动，这就是<code>react</code>的<code>diff</code>算法的原理。</p><p><strong>2. 找到需要移动的节点</strong></p><p>在上一小节中，我们是通过对比值是否相等，查找的对应位置。但是在vdom中，每一个节点都是一个vNode，我们应该如何进行判断呢？</p><p>答案就是<code>key</code>，我们通过对每个节点的<code>key</code>进行赋值，并且让处于同一<code>children</code>数组下的<code>vnode</code>的<code>key</code>都不相同，以此来确定每个节点的唯一性，并进行新旧列表的对比。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">reactDiff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nextChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> nextChild <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prevChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> prevChild <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>key <span class="token operator">===</span> prevChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">patch</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">,</span> nextChild<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 需要移动节点</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 不需要移动节点，记录当前位置，与之后的节点进行对比</span></span>
<span class="line">                        lastIndex <span class="token operator">=</span> j</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 移动节点</strong></p><p>首先我们先明确一点，移动节点所指的节点是<code>DOM</code>节点。<code>vnode.el</code>指向该节点对应的真实<code>DOM</code>节点。<code>patch</code>方法会将更新过后的<code>DOM</code>节点，赋值给<strong>新的</strong><code>vnode</code>的<code>el</code>属性。</p><blockquote><p>为了画图方便，我们用<code>key</code>的值来表示<code>vnode</code>节点。为了行文方便，我们把<code>key</code>值为<code>a</code>的<code>vnode</code>简写为<code>vnode-a</code>，<code>vnode-a</code>对应的真实DOM节点为<code>DOM-A</code></p></blockquote><p><img src="`+c+'" alt=""></p><p>我们来将上图的例子代入<code>reactDiff</code>中执行。我们遍历<strong>新列表</strong> ，并查找<code>vnode</code>在<strong>旧列表</strong> 中的位置。当遍历到<code>vnode-d</code>时，之前遍历在<strong>旧列表</strong> 的位置为<code>0 &lt; 2 &lt; 3</code>，说明<code>A C D</code>这三个节点都是不需要移动的。此时<code>lastIndex = 3</code>, 并进入下一次循环，发现<code>vnode-b</code>在<strong>旧列表</strong> 的<code>index</code>为<code>1</code>，<code>1 &lt; 3</code>，说明<code>DOM-B</code>要移动。</p><p>通过观察我们能发现，只需要把<code>DOM-B</code>移动到<code>DOM-D</code>之后就可以了。也就是<strong>找到需要移动的VNode，我们称该VNode为α，将α对应的真实的DOM节点移动到，α在<code>新列表</code>中的前一个VNode对应的真实DOM的后面。</strong></p><p><img src="'+l+`" alt=""></p><p>在上述的例子中，就是将<code>vnode-b</code>对应的真实DOM节点<code>DOM-B</code>, 移动到<code>vnode-b</code>在新列表中的前一个<code>VNode</code>——<code>vnode-d</code>对应的真实DOM节点<code>DOM-D</code>的后面</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">reactDiff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nextChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> nextChild <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prevChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> prevChild <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>key <span class="token operator">===</span> prevChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">patch</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">,</span> nextChild<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 移动到前一个节点的后面</span></span>
<span class="line">                        <span class="token keyword">let</span> refNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span></span>
<span class="line">                        parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>el<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 不需要移动节点，记录当前位置，与之后的节点进行对比</span></span>
<span class="line">                        lastIndex <span class="token operator">=</span> j</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么是这样移动的呢？首先我们列表是<code>从头到尾</code>遍历的。这就意味着对于当前<code>VNode</code>节点来说，该节点之前的所有节点都是排好序的，如果该节点需要移动，那么只需要将DOM节点移动到前一个<code>vnode</code>节点之后就可以，因为在<strong>新列表</strong> 中<code>vnode</code>的顺序就是这样的。</p><p><strong>4. 添加节点</strong></p><p>上一小节我们只讲了如何移动节点，但是忽略了另外一种情况，就是在<strong>新列表</strong> 中有全新的<code>VNode</code>节点，在<strong>旧列表</strong> 中找不到。遇到这种情况，我们需要根据新的<code>VNode</code>节点生成<code>DOM</code>节点，并插入<code>DOM</code>树中。</p><p>至此，我们面临两个问题：1.如何发现全新的节点、2. 生成的<code>DOM</code>节点插入到哪里</p><p><img src="`+i+`" alt=""></p><p>我们先来解决第一个问题，找节点还是比较简单的，我们定义一个<code>find</code>变量值为<code>false</code>。如果在<strong>旧列表</strong> 找到了<code>key</code> 相同的<code>vnode</code>，就将<code>find</code>的值改为<code>true</code>。当遍历结束后判断<code>find</code>值，如果为<code>false</code>，说明当前节点为新节点</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">reactDiff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nextChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> nextChild <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                find <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prevChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> prevChild <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>key <span class="token operator">===</span> prevChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    find <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">                    <span class="token function">patch</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">,</span> nextChild<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 移动到前一个节点的后面</span></span>
<span class="line">                        <span class="token keyword">let</span> refNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span></span>
<span class="line">                        parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>el<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 不需要移动节点，记录当前位置，与之后的节点进行对比</span></span>
<span class="line">                        lastIndex <span class="token operator">=</span> j</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token keyword">break</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>find<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 插入新节点</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到新节点后，下一步就是插入到哪里了，这里的逻辑其实是和移动节点的逻辑是一样的。我们观察上图可以发现，新的<code>vnode-c</code>是紧跟在<code>vnode-b</code>后面的，并且<code>vnode-b</code>的DOM节点——<code>DOM-B</code>是已经排好序的，所以我们只需要将<code>vnode-c</code>生成的DOM节点插入到<code>DOM-B</code>之后就可以了。</p><p>但是这里有一种特殊情况需要注意，就是新的节点位于<strong>新列表</strong> 的第一个，这时候我们需要找到<strong>旧列表</strong> 第一个节点，将新节点插入到原来第一个节点之前就可以了。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">reactDiff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nextChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> nextChild <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                find <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prevChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> prevChild <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>key <span class="token operator">===</span> prevChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    find <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">                    <span class="token function">patch</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">,</span> nextChild<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 移动到前一个节点的后面</span></span>
<span class="line">                        <span class="token keyword">let</span> refNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span></span>
<span class="line">                        parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>el<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 不需要移动节点，记录当前位置，与之后的节点进行对比</span></span>
<span class="line">                        lastIndex <span class="token operator">=</span> j</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token keyword">break</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>find<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 插入新节点</span></span>
<span class="line">                <span class="token keyword">let</span> refNode <span class="token operator">=</span> i <span class="token operator">&lt;=</span> <span class="token number">0</span></span>
<span class="line">                                <span class="token operator">?</span> prevChildren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el</span>
<span class="line">                                <span class="token operator">:</span> nextChildren<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling</span>
<span class="line">                <span class="token function">mount</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 移除节点</strong></p><p>有增就有减，当旧的节点不在<strong>新列表</strong> 中时，我们就将其对应的DOM节点移除。</p><p><img src="`+u+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">reactDiff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nextChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> nextChild <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                find <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> prevChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> prevChild <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>key <span class="token operator">===</span> prevChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    find <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">                    <span class="token function">patch</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">,</span> nextChild<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 移动到前一个节点的后面</span></span>
<span class="line">                        <span class="token keyword">let</span> refNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span></span>
<span class="line">                        parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>el<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 不需要移动节点，记录当前位置，与之后的节点进行对比</span></span>
<span class="line">                        lastIndex <span class="token operator">=</span> j</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token keyword">break</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>find<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 插入新节点</span></span>
<span class="line">                <span class="token keyword">let</span> refNode <span class="token operator">=</span> i <span class="token operator">&lt;=</span> <span class="token number">0</span></span>
<span class="line">                                <span class="token operator">?</span> prevChildren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el</span>
<span class="line">                                <span class="token operator">:</span> nextChildren<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling</span>
<span class="line">                <span class="token function">mount</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prevChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> prevChild <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                key <span class="token operator">=</span> prevChild<span class="token punctuation">.</span>key<span class="token punctuation">,</span></span>
<span class="line">                has <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>has<span class="token punctuation">)</span> parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>6. 优化与不足</strong></p><p>以上就是React的diff算法的思路。</p><p>目前的<code>reactDiff</code>的时间复杂度为<code>O(m*n)</code>，我们可以用空间换时间，把<code>key</code>与<code>index</code>的关系维护成一个<code>Map</code>，从而将时间复杂度降低为<code>O(n)</code>，具体的代码可以[查看此项目 (opens new window)](https://github.com/sunyanzhe/virtual- dom/blob/master/src/diff/react-diff.js)。</p><p>我们接下来看这样一个例子</p><p><img src="`+r+`" alt=""></p><p>根据<code>reactDiff</code>的思路，我们需要先将<code>DOM-A</code>移动到<code>DOM-C</code>之后，然后再将<code>DOM-B</code>移动到<code>DOM-A</code>之后，完成<code>Diff</code>。但是我们通过观察可以发现，只要将<code>DOM-C</code>移动到<code>DOM-A</code>之前就可以完成<code>Diff</code>。</p><p>这里是有可优化的空间的，接下来我们介绍<code>vue2.x</code>中的<code>diff</code>算法——<code>双端比较</code>，该算法解决了上述的问题</p><h3 id="_4-2-vue2-x-diff-——-双端比较" tabindex="-1"><a class="header-anchor" href="#_4-2-vue2-x-diff-——-双端比较"><span>4.2 Vue2.X Diff —— 双端比较</span></a></h3><p>所谓<code>双端比较</code>就是<strong>新列表</strong> 和<strong>旧列表</strong> 两个列表的头与尾互相对比，，在对比的过程中指针会逐渐向内靠拢，直到某一个列表的节点全部遍历过，对比停止。</p><p><strong>1. 实现原理</strong></p><p>我们先用四个指针指向两个列表的头尾</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        oldEndIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">        newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        newEndIndex <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>nextStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>nextEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们根据四个指针找到四个节点，然后进行对比，那么如何对比呢？我们按照以下四个步骤进行对比</p><ol><li>使用<strong>旧列表</strong> 的头一个节点<code>oldStartNode</code>与<strong>新列表</strong> 的头一个节点<code>newStartNode</code>对比</li><li>使用<strong>旧列表</strong> 的最后一个节点<code>oldEndNode</code>与<strong>新列表</strong> 的最后一个节点<code>newEndNode</code>对比</li><li>使用<strong>旧列表</strong> 的头一个节点<code>oldStartNode</code>与<strong>新列表</strong> 的最后一个节点<code>newEndNode</code>对比</li><li>使用<strong>旧列表</strong> 的最后一个节点<code>oldEndNode</code>与<strong>新列表</strong> 的头一个节点<code>newStartNode</code>对比</li></ol><p>使用以上四步进行对比，去寻找<code>key</code>相同的可复用的节点，当在某一步中找到了则停止后面的寻找。具体对比顺序如下图</p><p><img src="`+d+`" alt=""></p><p>对比顺序代码结构如下:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        oldEndIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">        newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        newEndIndex <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当对比时找到了可复用的节点，我们还是先<code>patch</code>给元素打补丁，然后将指针进行<code>前/后移</code>一位指针。根据对比节点的不同，我们移动的<strong>指针</strong> 和<strong>方向</strong> 也不同，具体规则如下：</p><ol><li>当<strong>旧列表</strong> 的头一个节点<code>oldStartNode</code>与<strong>新列表</strong> 的头一个节点<code>newStartNode</code>对比时<code>key</code>相同。那么<strong>旧列表</strong> 的头指针<code>oldStartIndex</code>与<strong>新列表</strong> 的头指针<code>newStartIndex</code>同时向<strong>后</strong> 移动一位。</li><li>当<strong>旧列表</strong> 的最后一个节点<code>oldEndNode</code>与<strong>新列表</strong> 的最后一个节点<code>newEndNode</code>对比时<code>key</code>相同。那么<strong>旧列表</strong> 的尾指针<code>oldEndIndex</code>与<strong>新列表</strong> 的尾指针<code>newEndIndex</code>同时向<strong>前</strong> 移动一位。</li><li>当<strong>旧列表</strong> 的头一个节点<code>oldStartNode</code>与<strong>新列表</strong> 的最后一个节点<code>newEndNode</code>对比时<code>key</code>相同。那么<strong>旧列表</strong> 的头指针<code>oldStartIndex</code>向<strong>后</strong> 移动一位；<strong>新列表</strong> 的尾指针<code>newEndIndex</code>向<strong>前</strong> 移动一位。</li><li>当<strong>旧列表</strong> 的最后一个节点<code>oldEndNode</code>与<strong>新列表</strong> 的头一个节点<code>newStartNode</code>对比时<code>key</code>相同。那么<strong>旧列表</strong> 的尾指针<code>oldEndIndex</code>向<strong>前</strong> 移动一位；<strong>新列表</strong> 的头指针<code>newStartIndex</code>向<strong>后</strong> 移动一位。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        oldEndIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        newEndIndex <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">patch</span><span class="token punctuation">(</span>oldvStartNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">        oldStartIndex<span class="token operator">++</span></span>
<span class="line">        newStartIndex<span class="token operator">++</span></span>
<span class="line">        oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">        oldEndIndex<span class="token operator">--</span></span>
<span class="line">        newEndIndex<span class="token operator">--</span></span>
<span class="line">        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span></span>
<span class="line">        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">patch</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">        oldStartIndex<span class="token operator">++</span></span>
<span class="line">        newEndIndex<span class="token operator">--</span></span>
<span class="line">        oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">        oldEndIndex<span class="token operator">--</span></span>
<span class="line">        nextStartIndex<span class="token operator">++</span></span>
<span class="line">        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span></span>
<span class="line">        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在小节的开头，提到了要让指针向内靠拢，所以我们需要循环。循环停止的条件是当其中一个列表的节点全部遍历完成，代码如下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        oldEndIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        newEndIndex <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">          oldStartIndex<span class="token operator">++</span></span>
<span class="line">          newStartIndex<span class="token operator">++</span></span>
<span class="line">          oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">          newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">          oldEndIndex<span class="token operator">--</span></span>
<span class="line">          newndIndex<span class="token operator">--</span></span>
<span class="line">          oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span></span>
<span class="line">          newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>oldvStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">          oldStartIndex<span class="token operator">++</span></span>
<span class="line">          newEndIndex<span class="token operator">--</span></span>
<span class="line">          oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">          newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">          oldEndIndex<span class="token operator">--</span></span>
<span class="line">          newStartIndex<span class="token operator">++</span></span>
<span class="line">          oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span></span>
<span class="line">          newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此整体的循环我们就全部完成了，下面我们需要考虑这样两个问题：</p><ul><li>什么情况下<code>DOM</code>节点需要移动</li><li><code>DOM</code>节点如何移动</li></ul><p>我们来解决第一个问题：<strong>什么情况下需要移动</strong> ，我们还是以上图为例。</p><p><img src="`+k+`" alt=""></p><p>当我们在第一个循环时，在<code>第四步</code>发现<strong>旧列表的尾节点</strong><code>oldEndNode</code>与<strong>新列表的头节点</strong><code>newStartNode</code>的<code>key</code>相同，是可复用的<code>DOM</code>节点。通过观察我们可以发现，<strong>原本在旧列表末尾的节点，却是新列表中的开头节点，没有人比他更靠前，因为他是第一个，所以我们只需要把当前的节点移动到原本旧列表中的第一个节点之前，让它成为第一个节点即可</strong> 。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">// ...</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">          <span class="token comment">// 移动到旧列表头节点之前</span></span>
<span class="line">          parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">          </span>
<span class="line">          oldEndIndex<span class="token operator">--</span></span>
<span class="line">          newStartIndex<span class="token operator">++</span></span>
<span class="line">          oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span></span>
<span class="line">          newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+'" alt=""></p><p>然后我们进入第二次循环，我们在<code>第二步</code>发现，<strong>旧列表的尾节点</strong><code>oldEndNode</code>和<strong>新列表的尾节点</strong><code>newEndNode</code>为复用节点。<strong>原本在旧列表中就是尾节点，在新列表中也是尾节点，说明该节点不需要移动</strong> ，所以我们什么都不需要做。</p><p>同理，如果是<strong>旧列表的头节点</strong><code>oldStartNode</code>和<strong>新列表的头节点</strong><code>newStartNode</code>为复用节点，我们也什么都不需要做。</p><p><img src="'+m+`" alt=""></p><p>进入第三次循环，我们在<code>第三部</code>发现，<strong>旧列表的头节点</strong><code>oldStartNode</code>和<strong>新列表的尾节点</strong><code>newEndNode</code>为复用节点。到这一步聪明如你肯定就一眼可以看出来了，我们只要将<code>DOM-A</code>移动到<code>DOM-B</code>后面就可以了。</p><p>依照惯例我们还是解释一下，<strong>原本旧列表中是头节点，然后在新列表中是尾节点。那么只要在旧列表中把当前的节点移动到原本尾节点的后面，就可以了</strong> 。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">          parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldEndNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">          oldStartIndex<span class="token operator">++</span></span>
<span class="line">          newEndIndex<span class="token operator">--</span></span>
<span class="line">          oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">          newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+'" alt=""></p><p>OK，进入最后一个循环。在<code>第一步</code><strong>旧列表</strong> 头节点<code>oldStartNode</code>与<strong>新列表</strong> 头节点<code>newStartNode</code>位置相同，所以啥也不用做。然后结束循环，这就是<code>Vue2 双端比较</code>的原理。</p><p><strong>2. 非理想情况</strong></p><p>上一小节，我们讲了<code>双端比较</code>的原理，但是有一种特殊情况，当四次对比都<strong>没找到</strong> 复用节点时，我们只能拿<strong>新列表</strong> 的第一个节点去<strong>旧列表</strong> 中找与其<code>key</code>相同的节点。</p><p><img src="'+y+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 在旧列表中找到 和新列表头节点key 相同的节点</span></span>
<span class="line">          <span class="token keyword">let</span> newKey <span class="token operator">=</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span></span>
<span class="line">            oldIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> child<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找节点的时候其实会有两种情况：一种在<strong>旧列表</strong> 中找到了，另一种情况是没找到。我们先以上图为例，说一下找到的情况。</p><p><img src="`+g+`" alt=""></p><p>当我们在旧列表中找到对应的<code>VNode</code>，我们只需要将找到的节点的<code>DOM</code>元素，移动到开头就可以了。这里的逻辑其实和<code>第四步</code>的逻辑是一样的，只不过<code>第四步</code>是移动的尾节点，这里是移动找到的节点。<code>DOM</code>移动后，由我们将<strong>旧列表</strong> 中的节点改为<code>undefined</code>，这是<strong>至关重要</strong> 的一步，因为我们已经做了节点的移动了所以我们不需要进行再次的对比了。最后我们将头指针<code>newStartIndex</code>向后移一位。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 在旧列表中找到 和新列表头节点key 相同的节点</span></span>
<span class="line">          <span class="token keyword">let</span> newtKey <span class="token operator">=</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span></span>
<span class="line">            oldIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> child<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          </span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> oldNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">patch</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">            parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">            prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在<strong>旧列表</strong> 中没有找到复用节点呢？很简单，直接创建一个新的节点放到最前面就可以了，然后后移头指针<code>newStartIndex</code>。</p><p><img src="`+w+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 在旧列表中找到 和新列表头节点key 相同的节点</span></span>
<span class="line">          <span class="token keyword">let</span> newtKey <span class="token operator">=</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span></span>
<span class="line">            oldIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> child<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          </span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> oldNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">patch</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">            parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">            prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          	<span class="token function">mount</span><span class="token punctuation">(</span>newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后当<strong>旧列表</strong> 遍历到<code>undefind</code>时就跳过当前节点。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode <span class="token operator">===</span> undefind<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        	oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode <span class="token operator">===</span> undefind<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        	oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//...</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 添加节点</strong></p><p>我们先来看一个例子</p><p><img src="`+h+'" alt=""></p><p>这个例子非常简单，几次循环都是尾节点相同，尾指针一直向前移动，直到循环结束，如下图</p><p><img src="'+f+`" alt=""></p><p>此时<code>oldEndIndex</code>以及小于了<code>oldStartIndex</code>，但是<strong>新列表</strong> 中还有剩余的节点，我们只需要将剩余的节点依次插入到<code>oldStartNode</code>的<code>DOM</code>之前就可以了。为什么是插入<code>oldStartNode</code>之前呢？原因是剩余的节点在<strong>新列表</strong> 的位置是位于<code>oldStartNode</code>之前的，如果剩余节点是在<code>oldStartNode</code>之后，<code>oldStartNode</code>就会先行对比，这个需要思考一下，其实还是与<code>第四步</code>的思路一样。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndIndex <span class="token operator">&lt;</span> oldStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">mount</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prevStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4. 移除节点</strong></p><p>与上一小节的情况相反，当<strong>新列表</strong> 的<code>newEndIndex</code>小于<code>newStartIndex</code>时，我们将<strong>旧列表</strong> 剩余的节点删除即可。这里我们需要注意，<strong>旧列表</strong> 的<code>undefind</code>。在第二小节中我们提到过，当头尾节点都不相同时，我们会去<strong>旧列表</strong> 中找<strong>新列表</strong> 的第一个节点，移动完DOM节点后，将<strong>旧列表</strong> 的那个节点改为<code>undefind</code>。所以我们在最后的删除时，需要注意这些<code>undefind</code>，遇到的话跳过当前循环即可。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndIndex <span class="token operator">&lt;</span> oldStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">mount</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prevStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newEndIndex <span class="token operator">&lt;</span> newStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> oldStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            partent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5. 小结</strong></p><p>至此<code>双端比较</code>全部完成，以下是全部代码。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue2diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        newStartIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        oldStartIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        newStartIndex <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldStartIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">          oldStartIndex<span class="token operator">++</span></span>
<span class="line">          newStartIndex<span class="token operator">++</span></span>
<span class="line">          oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">          newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">          oldStartIndex<span class="token operator">--</span></span>
<span class="line">          newStartIndex<span class="token operator">--</span></span>
<span class="line">          oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">          newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newEndNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">,</span> newEndNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">          parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldEndNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span></span>
<span class="line">          oldStartIndex<span class="token operator">++</span></span>
<span class="line">          newStartIndex<span class="token operator">--</span></span>
<span class="line">          oldStartNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">          newEndNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>key <span class="token operator">===</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">          parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">          oldStartIndex<span class="token operator">--</span></span>
<span class="line">          newStartIndex<span class="token operator">++</span></span>
<span class="line">          oldEndNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span></span>
<span class="line">          newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> newKey <span class="token operator">=</span> newStartNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span></span>
<span class="line">            oldIndex <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> child <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">mount</span><span class="token punctuation">(</span>newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span></span>
<span class="line">            <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> newStartNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">            parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">            prevChildren<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          newStartIndex<span class="token operator">++</span></span>
<span class="line">          newStartNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIndex <span class="token operator">&gt;</span> newStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            oldStartIndex<span class="token operator">++</span></span>
<span class="line">            <span class="token keyword">continue</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>oldStartIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&gt;</span> oldStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>newStartIndex <span class="token operator">&lt;=</span> newStartIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">mount</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>newStartIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> oldStartNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-vue3-diff-——-最长递增子序列" tabindex="-1"><a class="header-anchor" href="#_4-3-vue3-diff-——-最长递增子序列"><span>4.3 Vue3 Diff —— 最长递增子序列</span></a></h3><p><code>vue3</code>的<code>diff</code>借鉴于<a href="https://github.com/infernojs/inferno" target="_blank" rel="noopener noreferrer">inferno (opens new window)</a>，该算法其中有两个理念。第一个是相同的前置与后置元素的预处理；第二个则是最长递增子序列，此思想与<code>React</code>的<code>diff</code>类似又不尽相同。下面我们来一一介绍。</p><p><strong>1. 前置与后置的预处理</strong></p><p>我们看这两段文字</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    Hello World</span>
<span class="line">    Hey World</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就简单的看一眼我们就能发现，这两段文字是有一部分是相同的，<strong>这些文字是不需要修改也不需要移动的</strong> ，真正需要进行修改中间的几个字母，所以<code>diff</code>就变成以下部分</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token literal-property property">text1</span><span class="token operator">:</span> <span class="token string">&#39;llo&#39;</span></span>
<span class="line">    <span class="token literal-property property">text2</span><span class="token operator">:</span> <span class="token string">&#39;y&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来换成<code>vnode</code>，我们以下图为例。</p><p><img src="`+x+`" alt=""></p><p>图中的被绿色框起来的节点，他们是不需要移动的，只需要进行打补丁<code>patch</code>就可以了。我们把该逻辑写成代码。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        prevEnd <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        nextEnd <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>key <span class="token operator">===</span> nextNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">        j<span class="token operator">++</span></span>
<span class="line">        prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">        nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>prevEnd<span class="token punctuation">]</span></span>
<span class="line">      nextNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>nextEnd<span class="token punctuation">]</span></span>
<span class="line">      </span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>key <span class="token operator">===</span> nextNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">        prevEnd<span class="token operator">--</span></span>
<span class="line">        nextEnd<span class="token operator">--</span></span>
<span class="line">        prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>prevEnd<span class="token punctuation">]</span></span>
<span class="line">        nextNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>nextEnd<span class="token punctuation">]</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候，我们就需要考虑边界情况了，这里有两种情况。一种是<code>j &gt; prevEnd</code>；另一种是<code>j &gt; nextEnd</code>。</p><p><img src="`+j+`" alt=""></p><p>我们以这张图为例，此时<code>j &gt; prevEnd</code>且<code>j &lt;= nextEnd</code>，我们只需要把<strong>新列表</strong> 中<code>j</code>到<code>nextEnd</code>之间剩下的节点<strong>插入</strong> 进去就可以了。相反， 如果<code>j &gt; nextEnd</code>时，我们把<strong>旧列表</strong> 中<code>j</code>到<code>prevEnd</code>之间的节点<strong>删除</strong> 就可以了。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> nextpos <span class="token operator">=</span> nextEnd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">          refNode <span class="token operator">=</span> nextpos <span class="token operator">&gt;=</span> nextChildren<span class="token punctuation">.</span>length</span>
<span class="line">                    <span class="token operator">?</span> <span class="token keyword">null</span></span>
<span class="line">                    <span class="token operator">:</span> nextChildren<span class="token punctuation">[</span>nextpos<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token function">mount</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> nextEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再继续思考，在我们<code>while</code>循环时，指针是从两端向内逐渐靠拢的，所以我们应该在循环中就应该去判断边界情况，我们使用<code>label</code>语法，当我们触发边界情况时，退出全部的循环，直接进入判断。代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">        prevEnd <span class="token operator">=</span> prevChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        nextEnd <span class="token operator">=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// label语法</span></span>
<span class="line">      <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>key <span class="token operator">===</span> nextNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">          j<span class="token operator">++</span></span>
<span class="line">          <span class="token comment">// 循环中如果触发边界情况，直接break，执行outer之后的判断</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">||</span> j <span class="token operator">&gt;</span> nextEnd<span class="token punctuation">)</span> <span class="token keyword">break</span> outer</span>
<span class="line">          prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">          nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>prevEnd<span class="token punctuation">]</span></span>
<span class="line">        nextNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>nextEnd<span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>key <span class="token operator">===</span> nextNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">          prevEnd<span class="token operator">--</span></span>
<span class="line">          nextEnd<span class="token operator">--</span></span>
<span class="line">          <span class="token comment">// 循环中如果触发边界情况，直接break，执行outer之后的判断</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">||</span> j <span class="token operator">&gt;</span> nextEnd<span class="token punctuation">)</span> <span class="token keyword">break</span> outer</span>
<span class="line">          prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>prevEnd<span class="token punctuation">]</span></span>
<span class="line">          nextNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>nextEnd<span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// 边界情况的判断</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> nextpos <span class="token operator">=</span> nextEnd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">          refNode <span class="token operator">=</span> nextpos <span class="token operator">&gt;=</span> nextChildren<span class="token punctuation">.</span>length</span>
<span class="line">                    <span class="token operator">?</span> <span class="token keyword">null</span></span>
<span class="line">                    <span class="token operator">:</span> nextChildren<span class="token punctuation">[</span>nextpos<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token function">mount</span><span class="token punctuation">(</span>nextChildren<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> nextEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevChildren<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 判断是否需要移动</strong></p><p>其实几个算法看下来，套路已经很明显了，就是找到移动的节点，然后给他移动到正确的位置。把该加的新节点添加好，把该删的旧节点删了，整个算法就结束了。这个算法也不例外，我们接下来看一下它是如何做的。</p><p>当<code>前/后置</code>的预处理结束后，我们进入真正的<code>diff</code>环节。首先，我们先根据<strong>新列表</strong> 剩余的节点数量，创建一个<code>source</code>数组，并将数组填满<code>-1</code>。</p><p><img src="`+N+`" alt=""></p><p>我们先写这块逻辑。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// 边界情况的判断</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> nextEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> prevStart <span class="token operator">=</span> j<span class="token punctuation">,</span></span>
<span class="line">          nextStart <span class="token operator">=</span> j<span class="token punctuation">,</span></span>
<span class="line">          nextLeft <span class="token operator">=</span> nextEnd <span class="token operator">-</span> nextStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment">// 新列表中剩余的节点长度</span></span>
<span class="line">          source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nextLeft<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建数组，填满-1</span></span>
<span class="line">         </span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么这个<code>source</code>数组，是要做什么的呢？他就是来做新旧节点的对应关系的，我们将<strong>新节点</strong> 在<strong>旧列表</strong> 的位置存储在该数组中，我们在根据<code>source</code>计算出它的<code>最长递增子序列</code>用于移动DOM节点。为此，我们先建立一个对象存储当前<strong>新列表</strong> 中的<code>节点</code>与<code>index</code>的关系，再去<strong>旧列表</strong> 中去找位置。</p><p>在找节点时要注意，<strong>如果旧节点在新列表中没有的话，直接删除就好</strong> 。除此之外，我们还需要一个数量表示记录我们已经<code>patch</code>过的节点，如果数量已经与<strong>新列表</strong> 剩余的节点数量一样，那么剩下的<code>旧节点</code>我们就直接删除了就可以了</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// 边界情况的判断</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> nextEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> prevStart <span class="token operator">=</span> j<span class="token punctuation">,</span></span>
<span class="line">          nextStart <span class="token operator">=</span> j<span class="token punctuation">,</span></span>
<span class="line">          nextLeft <span class="token operator">=</span> nextEnd <span class="token operator">-</span> nextStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment">// 新列表中剩余的节点长度</span></span>
<span class="line">          source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nextLeft<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 创建数组，填满-1</span></span>
<span class="line">          nextIndexMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                      <span class="token comment">// 新列表节点与index的映射</span></span>
<span class="line">          patched <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            <span class="token comment">// 已更新过的节点的数量</span></span>
<span class="line">          </span>
<span class="line">        <span class="token comment">// 保存映射关系  </span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nextStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> key <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key</span>
<span class="line">          nextIndexMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i</span>
<span class="line">        <span class="token punctuation">}</span> </span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 去旧列表找位置</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> prevStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">          	prevKey <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span></span>
<span class="line">            nextIndex <span class="token operator">=</span> nextIndexMap<span class="token punctuation">[</span>prevKey<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 新列表中没有该节点 或者 已经更新了全部的新节点，直接删除旧节点</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">===</span> undefind <span class="token operator">||</span> patched <span class="token operator">&gt;=</span> nextLeft<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token comment">// 找到对应的节点</span></span>
<span class="line">          <span class="token keyword">let</span> nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>nextIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 给source赋值</span></span>
<span class="line">          source<span class="token punctuation">[</span>nextIndex <span class="token operator">-</span> nextStart<span class="token punctuation">]</span> <span class="token operator">=</span> i</span>
<span class="line">          patched<span class="token operator">++</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+S+`" alt=""></p><p>找到位置后，我们观察这个重新赋值后的<code>source</code>，我们可以看出，如果是全新的节点的话，其在<code>source</code>数组中对应的值就是初始的<code>-1</code>，通过这一步我们可以区分出来哪个为全新的节点，哪个是可复用的。</p><p>其次，我们要判断是否需要移动。那么如何判断移动呢？很简单，和<code>React</code>一样我们用递增法，如果我们找到的<code>index</code>是一直递增的，说明不需要移动任何节点。我们通过设置一个变量来保存是否需要移动的状态。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// 边界情况的判断</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> prevEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> nextEnd <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> prevStart <span class="token operator">=</span> j<span class="token punctuation">,</span></span>
<span class="line">          nextStart <span class="token operator">=</span> j<span class="token punctuation">,</span></span>
<span class="line">          nextLeft <span class="token operator">=</span> nextEnd <span class="token operator">-</span> nextStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment">// 新列表中剩余的节点长度</span></span>
<span class="line">          source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nextLeft<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 创建数组，填满-1</span></span>
<span class="line">          nextIndexMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                      <span class="token comment">// 新列表节点与index的映射</span></span>
<span class="line">          patched <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">          move <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                           <span class="token comment">// 是否移动</span></span>
<span class="line">          lastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                          <span class="token comment">// 记录上一次的位置</span></span>
<span class="line">          </span>
<span class="line">        <span class="token comment">// 保存映射关系  </span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nextStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nextEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> key <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key</span>
<span class="line">          nextIndexMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> i</span>
<span class="line">        <span class="token punctuation">}</span> </span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 去旧列表找位置</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> prevStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> prevEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> prevNode <span class="token operator">=</span> prevChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">          	prevKey <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>key<span class="token punctuation">,</span></span>
<span class="line">            nextIndex <span class="token operator">=</span> nextIndexMap<span class="token punctuation">[</span>prevKey<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 新列表中没有该节点 或者 已经更新了全部的新节点，直接删除旧节点</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">===</span> undefind <span class="token operator">||</span> patched <span class="token operator">&gt;=</span> nextLeft<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token comment">// 找到对应的节点</span></span>
<span class="line">          <span class="token keyword">let</span> nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>nextIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token function">patch</span><span class="token punctuation">(</span>prevNode<span class="token punctuation">,</span> nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 给source赋值</span></span>
<span class="line">          source<span class="token punctuation">[</span>nextIndex <span class="token operator">-</span> nextStart<span class="token punctuation">]</span> <span class="token operator">=</span> i</span>
<span class="line">          patched<span class="token operator">++</span></span>
<span class="line">          </span>
<span class="line">          <span class="token comment">// 递增方法，判断是否需要移动</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          	move <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          	lastIndex <span class="token operator">=</span> nextIndex</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>move<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 需要移动</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    	</span>
<span class="line">        <span class="token comment">//不需要移动</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. DOM如何移动</strong></p><p>判断完是否需要移动后，我们就需要考虑如何移动了。一旦需要进行DOM移动，我们首先要做的就是找到<code>source</code>的<strong>最长递增子序列</strong> 。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>move<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    	<span class="token keyword">const</span> seq <span class="token operator">=</span> <span class="token function">lis</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1]</span></span>
<span class="line">      <span class="token comment">// 需要移动</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">//不需要移动</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>什么是最长递增子序列：给定一个数值序列，找到它的一个子序列，并且子序列中的值是递增的，子序列中的元素在原序列中不一定连续。</p><p>例如给定数值序列为：[ 0, 8, 4, 12 ]。</p><p>那么它的最长递增子序列就是：[0, 8, 12]。</p><p>当然答案可能有多种情况，例如：[0, 4, 12] 也是可以的。</p></blockquote><p>上面的代码中，我们调用<code>lis</code> 函数求出数组<code>source</code>的最长递增子序列为<code>[ 0, 1 ]</code>。我们知道 source 数组的值为 <code>[2, 3, 1, -1]</code>，很显然最长递增子序列应该是<code>[ 2, 3 ]</code>，但为什么计算出的结果是<code>[ 0, 1 ]</code>呢？其实<code>[ 0, 1 ]</code>代表的是最长递增子序列中的各个元素在<code>source</code>数组中的位置索引，如下图所示：</p><p><img src="`+E+`" alt=""></p><p>我们根据<code>source</code>，对<strong>新列表</strong> 进行重新编号，并找出了<code>最长递增子序列</code>。</p><p>我们从后向前进行遍历<code>source</code>每一项。此时会出现三种情况：</p><ol><li>当前的值为<code>-1</code>，这说明该节点是全新的节点，又由于我们是<strong>从后向前</strong> 遍历，我们直接创建好DOM节点插入到队尾就可以了。</li><li>当前的索引为<code>最长递增子序列</code>中的值，也就是<code>i === seq[j]</code>，这说说明该节点不需要移动</li><li>当前的索引不是<code>最长递增子序列</code>中的值，那么说明该DOM节点需要移动，这里也很好理解，我们也是直接将DOM节点插入到队尾就可以了，因为队尾是排好序的</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>move<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">// 需要移动</span></span>
<span class="line">    	<span class="token keyword">const</span> seq <span class="token operator">=</span> <span class="token function">lis</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1]</span></span>
<span class="line">        <span class="token keyword">let</span> j <span class="token operator">=</span> seq<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 最长子序列的指针</span></span>
<span class="line">        <span class="token comment">// 从后向前遍历</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nextLeft <span class="token operator">-</span> <span class="token number">1</span>； i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> pos <span class="token operator">=</span> nextStart <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token comment">// 对应新列表的index</span></span>
<span class="line">            nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">// 找到vnode</span></span>
<span class="line">          	nextPos <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token number">1</span>，    <span class="token comment">// 下一个节点的位置，用于移动DOM</span></span>
<span class="line">            refNode <span class="token operator">=</span> nextPos <span class="token operator">&gt;=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> nextChildren<span class="token punctuation">[</span>nextPos<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token comment">//DOM节点</span></span>
<span class="line">            cur <span class="token operator">=</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 当前source的值，用来判断节点是否需要移动</span></span>
<span class="line">        </span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 情况1，该节点是全新节点</span></span>
<span class="line">          	<span class="token function">mount</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> seq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 情况2，是递增子序列，该节点不需要移动</span></span>
<span class="line">            <span class="token comment">// 让j指向下一个</span></span>
<span class="line">            j<span class="token operator">--</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 情况3，不是递增子序列，该节点需要移动</span></span>
<span class="line">            parent<span class="token punctuation">.</span><span class="token function">insetBefore</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">     </span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//不需要移动</span></span>
<span class="line">      </span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说完了需要移动的情况，再说说不需要移动的情况。如果不需要移动的话，我们只需要判断是否有全新的节点给他添加进去就可以了。具体代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">vue3Diff</span><span class="token punctuation">(</span><span class="token parameter">prevChildren<span class="token punctuation">,</span> nextChildren<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//...</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>move<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    	<span class="token keyword">const</span> seq <span class="token operator">=</span> <span class="token function">lis</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1]</span></span>
<span class="line">        <span class="token keyword">let</span> j <span class="token operator">=</span> seq<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 最长子序列的指针</span></span>
<span class="line">        <span class="token comment">// 从后向前遍历</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nextLeft <span class="token operator">-</span> <span class="token number">1</span>； i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> pos <span class="token operator">=</span> nextStart <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token comment">// 对应新列表的index</span></span>
<span class="line">            nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">// 找到vnode</span></span>
<span class="line">          	nextPos <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token number">1</span>，    <span class="token comment">// 下一个节点的位置，用于移动DOM</span></span>
<span class="line">            refNode <span class="token operator">=</span> nextPos <span class="token operator">&gt;=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> nextChildren<span class="token punctuation">[</span>nextPos<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token comment">//DOM节点</span></span>
<span class="line">            cur <span class="token operator">=</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 当前source的值，用来判断节点是否需要移动</span></span>
<span class="line">        </span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 情况1，该节点是全新节点</span></span>
<span class="line">          	<span class="token function">mount</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> seq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 情况2，是递增子序列，该节点不需要移动</span></span>
<span class="line">            <span class="token comment">// 让j指向下一个</span></span>
<span class="line">            j<span class="token operator">--</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 情况3，不是递增子序列，该节点需要移动</span></span>
<span class="line">            parent<span class="token punctuation">.</span><span class="token function">insetBefore</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//不需要移动</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nextLeft <span class="token operator">-</span> <span class="token number">1</span>； i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> cur <span class="token operator">=</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 当前source的值，用来判断节点是否需要移动</span></span>
<span class="line">        </span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">let</span> pos <span class="token operator">=</span> nextStart <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token comment">// 对应新列表的index</span></span>
<span class="line">              nextNode <span class="token operator">=</span> nextChildren<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span>	<span class="token comment">// 找到vnode</span></span>
<span class="line">              nextPos <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token number">1</span>，    <span class="token comment">// 下一个节点的位置，用于移动DOM</span></span>
<span class="line">              refNode <span class="token operator">=</span> nextPos <span class="token operator">&gt;=</span> nextChildren<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> nextChildren<span class="token punctuation">[</span>nextPos<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token comment">//DOM节点</span></span>
<span class="line">          	<span class="token function">mount</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> refNode<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此<code>vue3.0</code>的diff完成。</p><p><strong>4. 最长递增子序列</strong></p><p>我们以该数组为例</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们可以使用动态规划的思想考虑这个问题。动态规划的思想是将一个大的问题分解成多个小的子问题，并尝试得到这些子问题的最优解，子问题的最优解有可能会在更大的问题中被利用，这样通过小问题的最优解最终求得大问题的最优解。</p><p>我们先假设只有一个值的数组<code>[13]</code>，那么该数组的最长递增子序列就是<code>[13]</code>自己本身，其长度为<code>1</code>。<strong>那么我们认为每一项的递增序列的长度值均为1</strong></p><p>那么我们这次给数组增加一个值<code>[7, 13]</code>, 由于<code>7 &lt; 13</code>，所以该数组的最长递增子序列是<code>[7, 13]</code>，那么该长度为<code>2</code>。<strong>那么我们是否可以认为，当<code>[7]</code>小于<code>[13]</code>时，以<code>[7]</code>为头的递增序列的长度是，<code>[7]</code>的长度和<code>[13]</code>的长度的和</strong>，即\`1</p><ul><li>1 = 2\`。</li></ul><p>ok，我们基于这种思想来给计算一下该数组。我们先将每个值的初始赋值为<code>1</code></p><p><img src="`+C+'" alt=""></p><p>首先 <code>7 &lt; 13</code> 那么<code>7</code>对应的长度就是<code>13</code>的长度再加1，<code>1 + 1 = 2</code></p><p><img src="'+I+'" alt=""></p><p>继续，我们对比<code>8</code>。我们首先和<code>7</code>比，发现不满足递增，但是没关系我们还可以继续和<code>13</code>比，<code>8 &lt; 13</code>满足递增，那么<code>8</code>的长度也是<code>13</code>的长度在加一，长度为<code>2</code></p><p><img src="'+_+'" alt=""></p><p>我们再对比<code>3</code>，我们先让其与<code>8</code>进行对比，<code>3 &lt; 8</code>，那么<code>3</code>的长度是<code>8</code>的长度加一，此时<code>3</code>的长度为<code>3</code>。但是还没结束，我们还需要让<code>3</code>与<code>7</code>对比。同样<code>3 &lt; 7</code>，此时我们需要在计算出一个长度是<code>7</code>的长度加一同样是<code>3</code>，我们对比两个长度，<strong>如果原本的长度没有本次计算出的长度值大的话，我们进行替换，反之则我们保留原本的值</strong> 。由于<code>3 === 3</code>，我们选择不替换。最后，我们让<code>3</code>与<code>13</code>进行对比，同样的<code>3 &lt; 13</code>，此时计算出的长度为<code>2</code>，比原本的长度<code>3</code>要小，我们选择保留原本的值。</p><p><img src="'+D+'" alt=""></p><p>之后的计算依次类推，最后的结果是这样的</p><p><img src="'+M+`" alt="image-20210220201751694"></p><p>我们从中取最大的值<code>4</code>，该值代表的<strong>最长递增子序列的个数</strong> 。代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">lis</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span></span>
<span class="line">        dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于保存长度</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> next <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">          <span class="token comment">// 如果是递增 取更大的长度值</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> next<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>dp<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此为止，我们讲完了基础的最长递增子序列。然而在<code>vue3.0</code>中，我们需要的是最长递增子序列在原本数组中的索引。所以我们还需要在创建一个数组用于保存每个值的最长子序列所对应在数组中的<code>index</code>。具体代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">lis</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span></span>
<span class="line">        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 存默认index</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> cur <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">          nextIndex <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 如果为-1 直接跳过，因为-1代表的是新节点，不需要进行排序</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> next <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">          <span class="token comment">// 满足递增条件</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> max <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">            <span class="token comment">// 当前长度是否比原本的长度要大</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&gt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max</span>
<span class="line">              nextIndex <span class="token operator">=</span> j</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 记录满足条件的值，对应在数组中的index</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>res<span class="token punctuation">[</span>nextIndex<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">let</span> index <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> cur <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>prev<span class="token punctuation">]</span> <span class="token operator">?</span> i <span class="token operator">:</span> prev<span class="token punctuation">,</span> dp<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 返回最长的递增子序列的index</span></span>
<span class="line">      <span class="token keyword">return</span> result<span class="token punctuation">[</span>index<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阅读全文</p>`,241),V=[q];function P(L,A){return a(),s("div",null,V)}const R=n(O,[["render",P],["__file","框架通识.html.vue"]]),K=JSON.parse('{"path":"/%E6%A1%86%E6%9E%B6%E9%80%9A%E8%AF%86.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1 MVVM","slug":"_1-mvvm","link":"#_1-mvvm","children":[]},{"level":2,"title":"2 路由原理","slug":"_2-路由原理","link":"#_2-路由原理","children":[]},{"level":2,"title":"3 Virtual Dom","slug":"_3-virtual-dom","link":"#_3-virtual-dom","children":[]},{"level":2,"title":"4 Diff算法","slug":"_4-diff算法","link":"#_4-diff算法","children":[{"level":3,"title":"4.1 React-Diff","slug":"_4-1-react-diff","link":"#_4-1-react-diff","children":[]},{"level":3,"title":"4.2 Vue2.X Diff —— 双端比较","slug":"_4-2-vue2-x-diff-——-双端比较","link":"#_4-2-vue2-x-diff-——-双端比较","children":[]},{"level":3,"title":"4.3 Vue3 Diff —— 最长递增子序列","slug":"_4-3-vue3-diff-——-最长递增子序列","link":"#_4-3-vue3-diff-——-最长递增子序列","children":[]}]}],"git":{"updatedTime":1717375429000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"filePathRelative":"框架通识.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/docs/excellent-docs/17-%E6%A1%86%E6%9E%B6%E9%80%9A%E8%AF%86.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/docs/excellent-docs/17-%E6%A1%86%E6%9E%B6%E9%80%9A%E8%AF%86.html</a></p>\\n<h2>1 MVVM</h2>\\n<blockquote>\\n<p><code>MVVM</code> 由以下三个内容组成</p>\\n</blockquote>"}');export{R as comp,K as data};
