import{_ as n,c as s,o as a,a as e}from"./app-wwIxXOKR.js";const p="/images/s_poetries_work_images_20210517094050.png",t="/images/s_poetries_work_images_20210517091829.png",o="/images/s_poetries_work_images_20210517091909.png",l="/images/s_poetries_work_images_20210517092109.png",c="/images/s_poetries_work_images_20210517092136.png",i="/images/s_poetries_work_images_20210517092246.png",u="/images/s_poetries_work_images_20210517093635.png",r="/images/s_poetries_work_images_20210517093720.png",d="/images/s_poetries_work_images_20210517093745.png",k={},m=e(`<p>原文链接: <a href="https://interview.poetries.top/docs/excellent-docs/8-Node%E6%A8%A1%E5%9D%97.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/docs/excellent-docs/8-Node%E6%A8%A1%E5%9D%97.html</a></p><blockquote><p>当面试官问你<code>node</code>的时候，更多引导面试官用<code>node</code>做前端工程化，去引导到<code>webpack</code>、<code>npm</code>、打包工具上面去说说自己的想法，不要引导到自己会后端，后台不是会一点<code>node</code>语法就能写的</p></blockquote><h2 id="_1-package-json版本号规则" tabindex="-1"><a class="header-anchor" href="#_1-package-json版本号规则"><span>1 package.json版本号规则</span></a></h2><p><strong>major.minor.patch</strong></p><ul><li>主版本号.次版本号.修补版本号(<code>major.minor.patch</code>)</li><li><code>major</code>：新的架构调整，不兼容老版本</li><li><code>minor</code>：新增功能，兼容老版本</li><li><code>patch</code>：修复<code>bug</code>，兼容老版本</li></ul><p><strong>~和^的区别</strong></p><ul><li><code>~</code>会匹配最近的小版本依赖包，比如<code>~1.2.3</code>会匹配所有<code>1.2.x</code>版本，但是不包括<code>1.3.0</code></li><li><code>^</code>会匹配最新的大版本依赖包，比如<code>^1.2.3</code>会匹配所有<code>1.x.x</code>的包，包括<code>1.3.0</code>，但是不包括<code>2.0.0</code></li><li><code>*</code> 安装最新版本的依赖包，比如 <code>*1.2.3</code> 会匹配 <code>x.x.x</code></li></ul><blockquote><p>那么该如何选择呢？当然你可以指定特定的版本号，直接写<code>1.2.3</code>，前面什么前缀都没有，这样固然没问题，但是如果依赖包发布新版本修复了一些小bug，那么需要手动修改<code>package.json</code>文件；<code>~</code> 和 <code>^</code> 则可以解决这个问题</p></blockquote><blockquote><ul><li>但是需要注意 <code>^</code>版本更新可能比较大，会造成项目代码错误，所以 建议使用 <code>~</code>来标记版本号，这样可以保证项目不会出现大的问题，也能保证包中的小bug可以得到修复。</li><li>版本号写 <code>*</code>，这意味着安装最新版本的依赖包，但缺点同上，可能会造成版本不兼容，慎用</li></ul></blockquote><p>我们举个例子：</p><blockquote><ul><li>假设我们中安装了 <code>vue</code>, 当我们运行安装 <code>npm install vue -save</code>的时候，在项目中的<code>package.json</code> 的 <code>vue</code>版本是 <code>vue: ^3.0.0</code>, 我们电脑安装的<code>vue</code>版本就是 <code>3.0.0</code> 版本，我们把项目代码提交后，过了一段时间，<code>vue</code> 发布了新版本 <code>3.0.1</code>，这时新来一个同事，从新 <code>git clone</code>克隆项目，执行 <code>npm install</code>安装的时候，在他电脑的<code>vue</code>版本就是 <code>3.0.1</code>了，因为<code>^</code>只是锁了主要版本，这样我们电脑中的<code>vue</code>版本就会不一样，从理论上讲（大家都遵循语义版本控制的话），它们应该仍然是兼容的，但也许 <code>bugfix</code> 会影响我们正在使用的功能，而且当使用<code>vue</code>版本<code>3.0.0</code>和<code>3.0.1</code>运行时，我们的应用程序会产生不同的结果。</li><li>大家思考思考，这样的话，不同人电脑安装的依赖版项目，是不是都有可能不一样，就会导致每个人电脑运行的应用程序产生不同的结果。就会存在bug的隐患。</li><li>这时也许有同学想到，那么我们在package.json上面锁死依赖包的版本号不就可以了? 直接写 <code>vue: 3.0.0</code>锁死，这样大家安装<code>vue</code>的版本都是<code>3.0.0</code>版本了。</li><li>这个想法固然是不错的，但是你只能控制你自己的项目锁死版本号，那你项目中依赖包的依赖包呢？你怎么控制限制别人锁死版本号呢？</li><li>为了解决这个不同人电脑安装的所有依赖版本都是一致的，确保项目代码在安装所执行的运行结果都一样，这时 <code>package-lock.json</code> 就应运而生了</li></ul></blockquote><h2 id="_2-package-json-与-package-lock-json-的关系" tabindex="-1"><a class="header-anchor" href="#_2-package-json-与-package-lock-json-的关系"><span>2 package.json 与 package-lock.json 的关系</span></a></h2><p><code>package-lock.json</code> 是在 <code>npm(^5.x.x.x)</code>后才有，中途有几次更改</p><blockquote><p><code>package-lock.json</code> 它会在 <code>npm</code> 更改 <code>node_modules</code> 目录树 或者 <code>package.json</code> 时自动生成的 ，它准确的描述了当前项目<code>npm</code>包的依赖树，并且在随后的安装中会根据 <code>package-lock.json</code> 来安装，保证是相同的一个依赖树，不考虑这个过程中是否有某个依赖有小版本的更新</p></blockquote><p><strong>它的产生就是来对整个依赖树进行版本固定的（锁死）</strong></p><ul><li>当我们在一个项目中<code>npm install</code>时候，会自动生成一个<code>package-lock.json</code>文件，和<code>package.json</code>在同一级目录下。<code>package-lock.json</code>记录了项目的一些信息和所依赖的模块。这样在每次安装都会出现相同的结果. 不管你在什么机器上面或什么时候安装</li><li>当我们下次再<code>npm install</code>时候，<code>npm</code> 发现如果项目中有 <code>package-lock.json</code> 文件，会根据 <code>package-lock.json</code> 里的内容来处理和安装依赖而不再根据 <code>package.json</code></li></ul><p>注意</p><p>使用<code>cnpm install</code>时候，并不会生成 <code>package-lock.json</code> 文件，也不会根据 <code>package-lock.json</code> 来安装依赖包，还是会使用 <code>package.json</code> 来安装。</p><p><strong><code>package-lock.json</code> 可能被意外更改的原因</strong></p><ul><li><code>package.json</code> 文件修改了</li><li>挪动了包的位置：将部分包的位置从 <code>dependencies</code> 移动到 <code>devDependencies</code> 这种操作，虽然包未变，但是也会影响 <code>package-lock.json</code></li></ul><h2 id="_3-npm-模块安装机制" tabindex="-1"><a class="header-anchor" href="#_3-npm-模块安装机制"><span>3 npm 模块安装机制</span></a></h2><ul><li>发出 <code>npm install</code> 命令 <code>1</code> 查询 <code>node_modules</code> 目录之中是否已经存在指定模块</li><li>若存在，不再重新安装</li><li>若不存在</li><li><code>npm</code> 向 <code>registry</code> 查询模块压缩包的网址</li><li>下载压缩包，存放在根目录下的<code>.npm</code> 目录里</li><li>解压压缩包到当前项目的 <code>node_modules</code> 目录</li></ul><h2 id="_4-模块化的差异-amd-cmd-commonjs-esmodule" tabindex="-1"><a class="header-anchor" href="#_4-模块化的差异-amd-cmd-commonjs-esmodule"><span>4 模块化的差异 AMD CMD COMMONJS ESMODULE</span></a></h2><ul><li><code>AMD</code>是依赖前置，<code>define</code>写法</li><li><code>CMD</code> 语法<code>require</code></li><li><code>AMD</code>和<code>CMD</code>是动态引入，运行时才知道的</li><li><code>ESMODULE</code>是静态引入，好处方便<code>wepback</code>打包依赖图谱分析</li><li><code>CommonJs</code> 是单个值导出，<code>ES6 Module</code> 可以导出多个</li><li><code>CommonJs</code> 是动态语法可以写在判断里，<code>ES6 Module</code> 静态语法只能写在顶层</li><li><code>CommonJs</code> 的 <code>this</code> 是当前模块，<code>ES6 Module</code>的 <code>this</code> 是 <code>undefined</code></li></ul><h2 id="_5-node-的-event-loop-6个阶段" tabindex="-1"><a class="header-anchor" href="#_5-node-的-event-loop-6个阶段"><span>5 Node 的 Event Loop: 6个阶段</span></a></h2><ul><li><code>timer</code> 阶段: 执行到期的<code>setTimeout / setInterval</code>队列回调</li><li><code>I/O</code> 阶段: 执行上轮循环残流的<code>callback</code></li><li><code>idle</code>, <code>prepare</code></li><li><code>poll</code>: 等待回调 <ul><li><pre><code>  1. 执行回调
</code></pre></li><li><pre><code>  2. 执行定时器
</code></pre><ul><li>如有到期的<code>setTimeout / setInterval</code>， 则返回 <code>timer</code> 阶段</li><li>如有<code>setImmediate</code>，则前往 <code>check</code> 阶段</li></ul></li></ul></li><li><code>check</code><ul><li>执行<code>setImmediate</code></li></ul></li><li><code>close callbacks</code></li></ul><h2 id="_6-koa相关" tabindex="-1"><a class="header-anchor" href="#_6-koa相关"><span>6 Koa相关</span></a></h2><h3 id="koa洋葱模型怎么实现的" tabindex="-1"><a class="header-anchor" href="#koa洋葱模型怎么实现的"><span>koa洋葱模型怎么实现的</span></a></h3><p><img src="`+p+`" alt=""></p><ul><li>中间件执行就像洋葱一样，最早 <code>use</code> 的中间件，就放在最外层。处理顺序从左到右，左边接收一个 <code>request</code>，右边输出返回 <code>response</code></li><li>一般的中间件都会执行两次，调用 <code>next</code> 之前为第一次，调用 <code>next</code> 时把控制传递给下游的下一个中间件。当下游不再有中间件或者没有执行 <code>next</code> 函数时，就将依次恢复上游中间件的行为，让上游中间件执行 <code>next</code> 之后的代码</li></ul><p>例如下面这段代码</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//执行结果是 1=&gt;4=&gt;3=&gt;2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>app.use()</code> 把中间件函数存储在<code>middleware</code>数组中，最终会调用<code>koa- compose</code>导出的函数compose返回一个promise，中间函数的第一个参数<code>ctx</code>是包含响应和请求的一个对象，会不断传递给下一个中间件。next是一个函数，返回的是一个<code>promise</code></p></blockquote><p><strong>koa 中间件实现源码大致思路如下：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 注意其中的compose函数，这个函数是实现中间件洋葱模型的关键</span></span>
<span class="line">    <span class="token comment">// 场景模拟</span></span>
<span class="line">    <span class="token comment">// 异步 promise 模拟</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 中间件模拟</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">fn3</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> middlewares <span class="token operator">=</span> <span class="token punctuation">[</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// compose 实现洋葱模型</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">middlewares<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> fn <span class="token operator">=</span> middlewares<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">compose</span><span class="token punctuation">(</span>middlewares<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如果中间件中的next-方法报错了怎么办" tabindex="-1"><a class="header-anchor" href="#如果中间件中的next-方法报错了怎么办"><span>如果中间件中的next()方法报错了怎么办</span></a></h3><blockquote><p>中间件链错误会由<code>ctx.onerror</code>捕获，该函数中会调用<code>this.app.emit(&#39;error&#39;, err, this)</code>（因为koa继承自events模块，所以有&#39;emit&#39;和on等方法），可以使用<code>app.on(&#39;error&#39;, (err) =&gt; {})</code>，或者<code>app.onerror = (err) =&gt; {}</code>进行捕获。</p></blockquote><h3 id="co的原理是怎样的" tabindex="-1"><a class="header-anchor" href="#co的原理是怎样的"><span>co的原理是怎样的</span></a></h3><blockquote><p>co的原理是通过不断调用generator函数的<code>next</code>方法来达到自动执行generator函数的，类似async、await函数自动执行</p></blockquote><h2 id="_7-express、koa实现原理以及对比" tabindex="-1"><a class="header-anchor" href="#_7-express、koa实现原理以及对比"><span>7 Express、koa实现原理以及对比</span></a></h2><blockquote><p>底层建立在<code>node.js</code>内置的http模块上。http模块生成服务器的原始代码如下</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Express</code>框架的核心是对http模块的再包装</li><li><code>Express</code>框架等于在http模块之上，加了一个中间层</li><li>它最大的特点就是，一个中间件处理完，再传递给下一个中间件</li><li>比如自带 <code>Router</code>、路由规则等</li><li><code>callback</code>太多</li></ul><p><strong>koa2特点</strong></p><ul><li>洋葱模型</li><li>没有自带路由，由koa-router管理</li><li>没有callback</li></ul><h2 id="_8-请介绍一下-require-的模块加载机制" tabindex="-1"><a class="header-anchor" href="#_8-请介绍一下-require-的模块加载机制"><span>8 请介绍一下 require 的模块加载机制</span></a></h2><p>这道题基本上就可以了解到面试者对 Node 模块机制的了解程度 基本上面试提到</p><ul><li>先计算模块路径</li><li>如果模块在缓存里面，取出缓存</li><li>加载模块</li><li>输出模块的 <code>exports</code> 属性即可</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// require 其实内部调用 Module._load 方法</span></span>
<span class="line">    Module<span class="token punctuation">.</span><span class="token function-variable function">_load</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> isMain</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//  计算绝对路径</span></span>
<span class="line">      <span class="token keyword">var</span> filename <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">_resolveFilename</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">//  第一步：如果有缓存，取出缓存</span></span>
<span class="line">      <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 第二步：是否为内置模块</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>NativeModule<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> NativeModule<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token doc-comment comment">/********************************这里注意了**************************/</span></span>
<span class="line">      <span class="token comment">// 第三步：生成模块实例，存入缓存</span></span>
<span class="line">      <span class="token comment">// 这里的Module就是我们上面的1.1定义的Module</span></span>
<span class="line">      <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token doc-comment comment">/********************************这里注意了**************************/</span></span>
<span class="line">      <span class="token comment">// 第四步：加载模块</span></span>
<span class="line">      <span class="token comment">// 下面的module.load实际上是Module原型上有一个方法叫Module.prototype.load</span></span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        module<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        hadException <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>hadException<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">delete</span> Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 第五步：输出模块的exports属性</span></span>
<span class="line">      <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>手写一个Require简版</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 路径操作</span></span>
<span class="line">    <span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件读取</span></span>
<span class="line">    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件执行</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// node模块化的实现</span></span>
<span class="line">    <span class="token comment">// node中是自带模块化机制的，每个文件就是一个单独的模块，并且它遵循的是CommonJS规范，也就是使用require的方式导入模块，通过module.export的方式导出模块。</span></span>
<span class="line">    <span class="token comment">// node模块的运行机制也很简单，其实就是在每一个模块外层包裹了一层函数，有了函数的包裹就可以实现代码间的作用域隔离</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// require加载模块</span></span>
<span class="line">    <span class="token comment">// require依赖node中的fs模块来加载模块文件，fs.readFile读取到的是一个字符串。</span></span>
<span class="line">    <span class="token comment">// 在javascrpt中我们可以通过eval或者new Function的方式来将一个字符串转换成js代码来运行。</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// eval</span></span>
<span class="line">    <span class="token comment">// const name = &#39;poetry&#39;;</span></span>
<span class="line">    <span class="token comment">// const str = &#39;const a = 123; console.log(name)&#39;;</span></span>
<span class="line">    <span class="token comment">// eval(str); // poetry;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// new Function</span></span>
<span class="line">    <span class="token comment">// new Function接收的是一个要执行的字符串，返回的是一个新的函数，调用这个新的函数字符串就会执行了。如果这个函数需要传递参数，可以在new Function的时候依次传入参数，最后传入的是要执行的字符串。比如这里传入参数b，要执行的字符串str</span></span>
<span class="line">    <span class="token comment">// const b = 3;</span></span>
<span class="line">    <span class="token comment">// const str = &#39;let a = 1; return a + b&#39;;</span></span>
<span class="line">    <span class="token comment">// const fun = new Function(&#39;b&#39;, str);</span></span>
<span class="line">    <span class="token comment">// console.log(fun(b, str)); // 4</span></span>
<span class="line">    <span class="token comment">// 可以看到eval和Function实例化都可以用来执行javascript字符串，似乎他们都可以来实现require模块加载。不过在node中并没有选用他们来实现模块化，原因也很简单因为他们都有一个致命的问题，就是都容易被不属于他们的变量所影响。</span></span>
<span class="line">    <span class="token comment">// 如下str字符串中并没有定义a，但是确可以使用上面定义的a变量，这显然是不对的，在模块化机制中，str字符串应该具有自身独立的运行空间，自身不存在的变量是不可以直接使用的</span></span>
<span class="line">    <span class="token comment">// const a = 1;</span></span>
<span class="line">    <span class="token comment">// const str = &#39;console.log(a)&#39;;</span></span>
<span class="line">    <span class="token comment">// eval(str);</span></span>
<span class="line">    <span class="token comment">// const func = new Function(str);</span></span>
<span class="line">    <span class="token comment">// func();</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// node存在一个vm虚拟环境的概念，用来运行额外的js文件，他可以保证javascript执行的独立性，不会被外部所影响</span></span>
<span class="line">    <span class="token comment">// vm 内置模块</span></span>
<span class="line">    <span class="token comment">// 虽然我们在外部定义了hello，但是str是一个独立的模块，并不在村hello变量，所以会直接报错。</span></span>
<span class="line">    <span class="token comment">// 引入vm模块， 不需要安装，node 自建模块</span></span>
<span class="line">    <span class="token comment">// const vm = require(&#39;vm&#39;);</span></span>
<span class="line">    <span class="token comment">// const hello = &#39;poetry&#39;;</span></span>
<span class="line">    <span class="token comment">// const str = &#39;console.log(hello)&#39;;</span></span>
<span class="line">    <span class="token comment">// wm.runInThisContext(str); // 报错</span></span>
<span class="line">    <span class="token comment">// 所以node执行javascript模块时可以采用vm来实现。就可以保证模块的独立性了</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 分析实现步骤</span></span>
<span class="line">    <span class="token comment">// 1.导入相关模块，创建一个Require方法。</span></span>
<span class="line">    <span class="token comment">// 2.抽离通过Module._load方法，用于加载模块。</span></span>
<span class="line">    <span class="token comment">// 3.Module.resolveFilename 根据相对路径，转换成绝对路径。</span></span>
<span class="line">    <span class="token comment">// 4.缓存模块 Module._cache，同一个模块不要重复加载，提升性能。</span></span>
<span class="line">    <span class="token comment">// 5.创建模块 id: 保存的内容是 exports = {}相当于this。</span></span>
<span class="line">    <span class="token comment">// 6.利用tryModuleLoad(module, filename) 尝试加载模块。</span></span>
<span class="line">    <span class="token comment">// 7.Module._extensions使用读取文件。</span></span>
<span class="line">    <span class="token comment">// 8.Module.wrap: 把读取到的js包裹一个函数。</span></span>
<span class="line">    <span class="token comment">// 9.将拿到的字符串使用runInThisContext运行字符串。</span></span>
<span class="line">    <span class="token comment">// 10.让字符串执行并将this改编成exports</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 定义导入类，参数为模块路径</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Require</span><span class="token punctuation">(</span><span class="token parameter">modulePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取当前要加载的绝对路径</span></span>
<span class="line">        <span class="token keyword">let</span> absPathname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> modulePath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 自动给模块添加后缀名，实现省略后缀名加载模块，其实也就是如果文件没有后缀名的时候遍历一下所有的后缀名看一下文件是否存在</span></span>
<span class="line">        <span class="token comment">// 获取所有后缀名</span></span>
<span class="line">        <span class="token keyword">const</span> extNames <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Module<span class="token punctuation">.</span>_extensions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 存储原始文件路径</span></span>
<span class="line">        <span class="token keyword">const</span> oldPath <span class="token operator">=</span> absPathname<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">findExt</span><span class="token punctuation">(</span><span class="token parameter">absPathname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> extNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;文件不存在&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                fs<span class="token punctuation">.</span><span class="token function">accessSync</span><span class="token punctuation">(</span>absPathname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> absPathname<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> ext <span class="token operator">=</span> extNames<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">findExt</span><span class="token punctuation">(</span>oldPath <span class="token operator">+</span> ext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 递归追加后缀名，判断文件是否存在</span></span>
<span class="line">        absPathname <span class="token operator">=</span> <span class="token function">findExt</span><span class="token punctuation">(</span>absPathname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 从缓存中读取，如果存在，直接返回结果</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>absPathname<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>absPathname<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 创建模块，新建Module实例</span></span>
<span class="line">        <span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Module</span><span class="token punctuation">(</span>absPathname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 给模块添加缓存</span></span>
<span class="line">        <span class="token comment">// 添加缓存也比较简单，就是文件加载的时候将文件放入缓存中，再去加载模块时先看缓存中是否存在，如果存在直接使用，如果不存在再去重新，加载之后再放入缓存</span></span>
<span class="line">        Module<span class="token punctuation">.</span>_cache<span class="token punctuation">[</span>absPathname<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 加载当前模块</span></span>
<span class="line">        <span class="token function">tryModuleLoad</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 返回exports对象</span></span>
<span class="line">        <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Module的实现很简单，就是给模块创建一个exports对象，tryModuleLoad执行的时候将内容加入到exports中，id就是模块的绝对路径</span></span>
<span class="line">    <span class="token comment">// 定义模块, 添加文件id标识和exports属性</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Module</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 读取到的文件内容会放在exports中</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    Module<span class="token punctuation">.</span>_cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 我们给Module挂载静态属性wrapper，里面定义一下这个函数的字符串，wrapper是一个数组，数组的第一个元素就是函数的参数部分，其中有exports，module. Require，__dirname, __filename, 都是我们模块中常用的全局变量。注意这里传入的Require参数是我们自己定义的Require</span></span>
<span class="line">    <span class="token comment">// 第二个参数就是函数的结束部分。两部分都是字符串，使用的时候我们将他们包裹在模块的字符串外部就可以了</span></span>
<span class="line">    Module<span class="token punctuation">.</span>wrapper <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string">&quot;(function(exports, module, Require, __dirname, __filename) {&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;})&quot;</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// _extensions用于针对不同的模块扩展名使用不同的加载方式，比如JSON和javascript加载方式肯定是不同的。JSON使用JSON.parse来运行。</span></span>
<span class="line">    <span class="token comment">// javascript使用vm.runInThisContext来运行，可以看到fs.readFileSync传入的是module.id也就是我们Module定义时候id存储的是模块的绝对路径，读取到的content是一个字符串，我们使用Module.wrapper来包裹一下就相当于在这个模块外部又包裹了一个函数，也就实现了私有作用域。</span></span>
<span class="line">    <span class="token comment">// 使用call来执行fn函数，第一个参数改变运行的this我们传入module.exports，后面的参数就是函数外面包裹参数exports, module, Require, __dirname, __filename</span></span>
<span class="line">    Module<span class="token punctuation">.</span>_extensions <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;.js&#39;</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">const</span> fnStr <span class="token operator">=</span> Module<span class="token punctuation">.</span>wrapper<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> content <span class="token operator">+</span> Module<span class="token punctuation">.</span>wrapper<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">const</span> fn <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">runInThisContext</span><span class="token punctuation">(</span>fnStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">,</span> Require<span class="token punctuation">,</span>__filename<span class="token punctuation">,</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;.json&#39;</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> json <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把文件的结果放在exports属性上</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// tryModuleLoad函数接收的是模块对象，通过path.extname来获取模块的后缀名，然后使用Module._extensions来加载模块</span></span>
<span class="line">    <span class="token comment">// 定义模块加载方法</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">tryModuleLoad</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取扩展名</span></span>
<span class="line">        <span class="token keyword">const</span> extension <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 通过后缀加载当前模块</span></span>
<span class="line">        Module<span class="token punctuation">.</span>_extensions<span class="token punctuation">[</span>extension<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 至此Require加载机制我们基本就写完了，我们来重新看一下。Require加载模块的时候传入模块名称，在Require方法中使用path.resolve(__dirname, modulePath)获取到文件的绝对路径。然后通过new Module实例化的方式创建module对象，将模块的绝对路径存储在module的id属性中，在module中创建exports属性为一个json对象</span></span>
<span class="line">    <span class="token comment">// 使用tryModuleLoad方法去加载模块，tryModuleLoad中使用path.extname获取到文件的扩展名，然后根据扩展名来执行对应的模块加载机制</span></span>
<span class="line">    <span class="token comment">// 最终将加载到的模块挂载module.exports中。tryModuleLoad执行完毕之后module.exports已经存在了，直接返回就可以了</span></span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 测试</span></span>
<span class="line">    <span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token function">Require</span><span class="token punctuation">(</span><span class="token string">&#39;./test.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> test2 <span class="token operator">=</span> <span class="token function">Require</span><span class="token punctuation">(</span><span class="token string">&#39;./test2.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-exports-xxx-xxx-和-module-exports-有什么区别" tabindex="-1"><a class="header-anchor" href="#_9-exports-xxx-xxx-和-module-exports-有什么区别"><span>9 exports.xxx=xxx 和 Module.exports={}有什么区别</span></a></h2><p><code>exports</code> 其实就是 <code>module.exports</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// module.exports vs exports</span></span>
<span class="line">    <span class="token comment">// 很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 方法一：对module.exports赋值：</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// hello.js</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">hello</span><span class="token operator">:</span> hello<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">greet</span><span class="token operator">:</span> greet</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 方法二：直接使用exports：</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// hello.js</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    exports<span class="token punctuation">.</span>hello <span class="token operator">=</span> hello<span class="token punctuation">;</span></span>
<span class="line">    exports<span class="token punctuation">.</span>greet <span class="token operator">=</span> greet<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 但是你不可以直接对exports赋值：</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 代码可以执行，但是模块并没有输出任何变量:</span></span>
<span class="line">    exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">hello</span><span class="token operator">:</span> hello<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">greet</span><span class="token operator">:</span> greet</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 如果你对上面的写法感到十分困惑，不要着急，我们来分析Node的加载机制：</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 首先，Node会把整个待加载的hello.js文件放入一个包装函数load中执行。在执行这个load()函数前，Node准备好了module变量：</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// load()函数最终返回module.exports：</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// hello.js的文件内容</span></span>
<span class="line">        <span class="token operator">...</span></span>
<span class="line">        <span class="token comment">// load函数返回:</span></span>
<span class="line">        <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> exportes <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 也就是说，默认情况下，Node准备的exports变量和module.exports变量实际上是同一个变量，并且初始化为空对象{}，于是，我们可以写：</span></span>
<span class="line">    </span>
<span class="line">    exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    exports<span class="token punctuation">.</span><span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 也可以写：</span></span>
<span class="line">    </span>
<span class="line">    module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 换句话说，Node默认给你准备了一个空对象{}，这样你可以直接往里面加东西。</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 但是，如果我们要输出的是一个函数或数组，那么，只能给module.exports赋值：</span></span>
<span class="line">    </span>
<span class="line">    module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 给exports赋值是无效的，因为赋值后，module.exports仍然是空对象{}。</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 结论</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 如果要输出一个键值对象{}，可以利用exports这个已存在的空对象{}，并继续在上面添加新的键值；</span></span>
<span class="line">    <span class="token comment">// 如果要输出一个函数或数组，必须直接对module.exports对象赋值。</span></span>
<span class="line">    <span class="token comment">// 所以我们可以得出结论：直接对module.exports赋值，可以应对任何情况：</span></span>
<span class="line">    </span>
<span class="line">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 或者：</span></span>
<span class="line">    </span>
<span class="line">    module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 最终，我们强烈建议使用module.exports = xxx的方式来输出模块变量，这样，你只需要记忆一种方法。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-node-的异步-i-o" tabindex="-1"><a class="header-anchor" href="#_10-node-的异步-i-o"><span>10 Node 的异步 I/O</span></a></h2><h3 id="请介绍一下-node-事件循环的流程" tabindex="-1"><a class="header-anchor" href="#请介绍一下-node-事件循环的流程"><span>请介绍一下 Node 事件循环的流程</span></a></h3><ul><li>在进程启动时，Node 便会创建一个类似于 while(true)的循环，每执行一次循环体的过程我们成为 Tick。</li><li>每个 Tick 的过程就是查看是否有事件待处理。如果有就取出事件及其相关的回调函数。然后进入下一个循环，如果不再有事件处理，就退出进程。</li></ul><p><img src="`+t+'" alt=""></p><h3 id="在每个-tick-的过程中-如何判断是否有事件需要处理呢" tabindex="-1"><a class="header-anchor" href="#在每个-tick-的过程中-如何判断是否有事件需要处理呢"><span>在每个 tick 的过程中，如何判断是否有事件需要处理呢</span></a></h3><ul><li>每个事件循环中有一个或者多个观察者，而判断是否有事件需要处理的过程就是向这些观察者询问是否有要处理的事件。</li><li>在 Node 中，事件主要来源于网络请求、文件的 I/O 等，这些事件对应的观察者有文件 I/O 观察者，网络 I/O 的观察者。</li><li>事件循环是一个典型的生产者/消费者模型。异步 I/O，网络请求等则是事件的生产者，源源不断为 Node 提供不同类型的事件，这些事件被传递到对应的观察者那里，事件循环则从观察者那里取出事件并处理。</li><li>在 windows 下，这个循环基于 IOCP 创建，在*nix 下则基于多线程创建</li></ul><h3 id="描述一下整个异步-i-o-的流程" tabindex="-1"><a class="header-anchor" href="#描述一下整个异步-i-o-的流程"><span>描述一下整个异步 I/O 的流程</span></a></h3><p><img src="'+o+`" alt=""></p><h2 id="_11-v8-的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_11-v8-的垃圾回收机制"><span>11 V8 的垃圾回收机制</span></a></h2><h3 id="如何查看-v8-的内存使用情况" tabindex="-1"><a class="header-anchor" href="#如何查看-v8-的内存使用情况"><span>如何查看 V8 的内存使用情况</span></a></h3><p>使用 <code>process.memoryUsage()</code>,返回如下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">rss</span><span class="token operator">:</span> <span class="token number">4935680</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">heapTotal</span><span class="token operator">:</span> <span class="token number">1826816</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">heapUsed</span><span class="token operator">:</span> <span class="token number">650472</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">external</span><span class="token operator">:</span> <span class="token number">49879</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>heapTotal</code> 和 <code>heapUsed</code> 代表 <code>V8</code> 的内存使用情况。<code>external</code> 代表 <code>V8</code> 管理的，绑定到 Javascript 的 C++对象的内存使用情况。rss, 驻留集大小, 是给这个进程分配了多少物理内存(占总分配内存的一部分) 这些物理内存中包含堆，栈，和代码段。</p></blockquote><h3 id="v8-的内存限制是多少-为什么-v8-这样设计" tabindex="-1"><a class="header-anchor" href="#v8-的内存限制是多少-为什么-v8-这样设计"><span>V8 的内存限制是多少，为什么 V8 这样设计</span></a></h3><blockquote><p>64 位系统下是 <code>1.4GB</code>， 32 位系统下是 <code>0.7GB</code>。因为 <code>1.5GB</code>的垃圾回收堆内存，V8 需要花费 50 毫秒以上，做一次非增量式的垃圾回收甚至要 1 秒以上。这是垃圾回收中引起 Javascript 线程暂停执行的事件，在这样的花销下，应用的性能和影响力都会直线下降。</p></blockquote><h3 id="v8-的内存分代和回收算法请简单讲一讲" tabindex="-1"><a class="header-anchor" href="#v8-的内存分代和回收算法请简单讲一讲"><span>V8 的内存分代和回收算法请简单讲一讲</span></a></h3><blockquote><p>在 V8 中，主要将内存分为新生代和老生代两代。新生代中的对象存活时间较短的对象，老生代中的对象存活时间较长，或常驻内存的对象。</p></blockquote><p><img src="`+l+'" alt=""></p><p><strong>新生代</strong></p><blockquote><p>新生代中的对象主要通过 Scavenge 算法进行垃圾回收。这是一种采用复制的方式实现的垃圾回收算法。它将堆内存一份为二，每一部分空间成为 semispace。在这两个 semispace 空间中，只有一个处于使用中，另一个处于闲置状态。处于使用状态的 semispace 空间称为 From 空间，处于闲置状态的空间称为 To 空间</p></blockquote><p><img src="'+c+'" alt=""></p><ul><li>当开始垃圾回收的时候，会检查 From 空间中的存活对象，这些存活对象将被复制到 To 空间中，而非存活对象占用的空间将会被释放。完成复制后，From 空间和 To 空间发生角色对换。</li><li>应为新生代中对象的生命周期比较短，就比较适合这个算法。</li><li>当一个对象经过多次复制依然存活，它将会被认为是生命周期较长的对象。这种新生代中生命周期较长的对象随后会被移到老生代中。</li></ul><p><strong>老生代</strong></p><blockquote><p>老生代主要采取的是标记清除的垃圾回收算法。与 Scavenge 复制活着的对象不同，标记清除算法在标记阶段遍历堆中的所有对象，并标记活着的对象，只清理死亡对象。活对象在新生代中只占叫小部分，死对象在老生代中只占较小部分，这是为什么采用标记清除算法的原因</p></blockquote><p><strong>标记清楚算法的问题</strong></p><p>主要问题是每一次进行标记清除回收后，内存空间会出现不连续的状态</p><p><img src="'+i+`" alt=""></p><ul><li>这种内存碎片会对后续内存分配造成问题，很可能出现需要分配一个大对象的情况，这时所有的碎片空间都无法完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。</li><li>为了解决碎片问题，标记整理被提出来。就是在对象被标记死亡后，在整理的过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。</li></ul><p><strong>哪些情况会造成 V8 无法立即回收内存</strong></p><p>闭包和全局变量</p><p><strong>请谈一下内存泄漏是什么，以及常见内存泄漏的原因，和排查的方法</strong></p><ol><li>什么是内存泄漏</li></ol><ul><li>内存泄漏(Memory Leak)指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。</li><li>如果内存泄漏的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用的内存变多会引起服务器响应速度变慢。</li><li>严重的情况下导致内存达到某个极限(可能是进程的上限，如 v8 的上限;也可能是系统可提供的内存上限)会使得应用程序崩溃。常见内存泄漏的原因 内存泄漏的几种情况:</li></ul><p>全局变量</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//未声明对象。</span></span>
<span class="line">    global<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//全局变量引用</span></span>
<span class="line">    <span class="token comment">// 这种比较简单的原因，全局变量直接挂在 root 对象上，不会被清除掉。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>闭包</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> bigData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buffer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function-variable function">inner</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>闭包会引用到父级函数中的变量，如果闭包未释放，就会导致内存泄漏。上面例子是 inner 直接挂在了 root 上，那么每次执行 out 函数所产生的 bigData 都不会释放，从而导致内存泄漏。需要注意的是，这里举得例子只是简单的将引用挂在全局对象上，实际的业务情况可能是挂在某个可以从 root 追溯到的对象上导致的</p></blockquote><p>事件监听</p><blockquote><p>Node.js 的事件监听也可能出现的内存泄漏。例如对同一个事件重复监听，忘记移除(removeListener)，将造成内存泄漏。这种情况很容易在复用对象上添加事件时出现，所以事件重复监听可能收到如下警告</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    emitter<span class="token punctuation">.</span><span class="token function">setMaxListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> to increase limit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>排查方法想要定位内存泄漏，通常会有两种情况</strong></p><ul><li>对于只要正常使用就可以重现的内存泄漏，这是很简单的情况只要在测试环境模拟就可以排查了。</li><li>对于偶然的内存泄漏，一般会与特殊的输入有关系。想稳定重现这种输入是很耗时的过程。如果不能通过代码的日志定位到这个特殊的输入，那么推荐去生产环境打印内存快照了。</li><li>需要注意的是，打印内存快照是很耗 CPU 的操作，可能会对线上业务造成影响。快照工具推荐使用 heapdump 用来保存内存快照，使用 devtool 来查看内存快照。</li><li>使用 heapdump 保存内存快照时，只会有 Node.js 环境中的对象，不会受到干扰(如果使用 node-inspector 的话，快照中会有前端的变量干扰)。</li></ul><blockquote><p>PS：安装 heapdump 在某些 Node.js 版本上可能出错，建议使用 <code>npm install heapdump -target=Node.js</code> 版本来安装。</p></blockquote><h2 id="_12-buffer-模块" tabindex="-1"><a class="header-anchor" href="#_12-buffer-模块"><span>12 Buffer 模块</span></a></h2><h3 id="新建-buffer-会占用-v8-分配的内存吗" tabindex="-1"><a class="header-anchor" href="#新建-buffer-会占用-v8-分配的内存吗"><span>新建 Buffer 会占用 V8 分配的内存吗</span></a></h3><p>不会，Buffer 属于堆外内存，不是 V8 分配的。</p><h3 id="buffer-alloc-和-buffer-allocunsafe-的区别" tabindex="-1"><a class="header-anchor" href="#buffer-alloc-和-buffer-allocunsafe-的区别"><span>Buffer.alloc 和 Buffer.allocUnsafe 的区别</span></a></h3><blockquote><p><code>Buffer.allocUnsafe</code> 创建的 Buffer 实例的底层内存是未初始化的。新创建的 Buffer 的内容是未知的，可能包含敏感数据。使用 Buffer.alloc() 可以创建以零初始化的 Buffer 实例。</p></blockquote><h3 id="buffer-的内存分配机制" tabindex="-1"><a class="header-anchor" href="#buffer-的内存分配机制"><span>Buffer 的内存分配机制</span></a></h3><ul><li>为了高效的使用申请来的内存，Node 采用了 slab 分配机制。slab 是一种动态的内存管理机制。Node 以 8kb 为界限来来区分 Buffer 为大对象还是小对象，如果是小于 8kb 就是小 <code>Buffer</code>，大于 8kb 就是大 Buffer。例如第一次分配一个 1024 字节的 Buffer，<code>Buffer.alloc(1024)</code>,那么这次分配就会- 用到一个 slab，接着如果继续 <code>Buffer.alloc(1024)</code>,那么上一次用的 slab 的空间还没有用完，因为总共是 8kb，<code>1024+1024 = 2048</code> 个字节，没有 8kb，所以就继续用这个 slab 给 Buffer 分配空间。如果超过 8kb，那么直接用 C++底层地宫的 <code>SlowBuffer</code> 来给 <code>Buffer</code> 对象提供空间。</li></ul><h3 id="buffer-乱码问题" tabindex="-1"><a class="header-anchor" href="#buffer-乱码问题"><span>Buffer 乱码问题</span></a></h3><p>例如一个份文件 test.md 里的内容如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    床前明月光，疑是地上霜，举头望明月，低头思故乡</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们这样读取就会出现乱码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> rs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;test.md&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">highWaterMark</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 床前明???光，疑???地上霜，举头???明月，???头思故乡</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>一般情况下，只需要设置 <code>rs.setEncoding(&#39;utf8&#39;)</code> 即可解决乱码问题</p><h2 id="_13-websocket" tabindex="-1"><a class="header-anchor" href="#_13-websocket"><span>13 webSocket</span></a></h2><h3 id="websocket-与传统的-http-有什么优势" tabindex="-1"><a class="header-anchor" href="#websocket-与传统的-http-有什么优势"><span>webSocket 与传统的 http 有什么优势</span></a></h3><ul><li>客户端与服务器只需要一个 TCP 连接，比 <code>http</code> 长轮询使用更少的连接</li><li><code>webSocket</code> 服务端可以推送数据到客户端</li><li>更轻量的协议头，减少数据传输量</li></ul><h3 id="websocket-协议升级简述一下" tabindex="-1"><a class="header-anchor" href="#websocket-协议升级简述一下"><span>webSocket 协议升级简述一下</span></a></h3><blockquote><p>首先，WebSocket 连接必须由浏览器发起，因为请求协议是一个标准的 HTTP 请求，格式如下：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token constant">GET</span> <span class="token literal-property property">ws</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3000</span><span class="token operator">/</span>ws<span class="token operator">/</span>chat <span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span></span>
<span class="line">    <span class="token literal-property property">Host</span><span class="token operator">:</span> localhost</span>
<span class="line">    <span class="token literal-property property">Upgrade</span><span class="token operator">:</span> websocket</span>
<span class="line">    <span class="token literal-property property">Connection</span><span class="token operator">:</span> Upgrade</span>
<span class="line">    <span class="token literal-property property">Origin</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3000</span></span>
<span class="line">    Sec<span class="token operator">-</span>WebSocket<span class="token operator">-</span>Key<span class="token operator">:</span> client<span class="token operator">-</span>random<span class="token operator">-</span>string</span>
<span class="line">    Sec<span class="token operator">-</span>WebSocket<span class="token operator">-</span>Version<span class="token operator">:</span> <span class="token number">13</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该请求和普通的 HTTP 请求有几点不同：</p><ul><li><code>GET</code> 请求的地址不是类似<code>/path/</code>，而是以 <code>ws://开头的地址</code>；</li><li>请求头 <code>Upgrade: websocket</code> 和 <code>Connection: Upgrade</code>表示这个连接将要被转换为 <code>WebSocket</code> 连接；</li><li><code>Sec-WebSocket-Key</code> 是用于标识这个连接，并非用于加密数据；</li><li><code>Sec-WebSocket-Version</code> 指定了 <code>WebSocket</code> 的协议版本。</li></ul><p>随后，服务器如果接受该请求，就会返回如下响应：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token constant">HTTP</span><span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">101</span> Switching Protocols</span>
<span class="line">    <span class="token literal-property property">Upgrade</span><span class="token operator">:</span> websocket</span>
<span class="line">    <span class="token literal-property property">Connection</span><span class="token operator">:</span> Upgrade</span>
<span class="line">    Sec<span class="token operator">-</span>WebSocket<span class="token operator">-</span>Accept<span class="token operator">:</span> server<span class="token operator">-</span>random<span class="token operator">-</span>string</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该响应代码 <code>101</code> 表示本次连接的 <code>HTTP</code> 协议即将被更改，更改后的协议就是 <code>Upgrade: websocket</code> 指定的 <code>WebSocket</code> 协议</p><h2 id="_14-https" tabindex="-1"><a class="header-anchor" href="#_14-https"><span>14 https</span></a></h2><h3 id="https-用哪些端口进行通信-这些端口分别有什么用" tabindex="-1"><a class="header-anchor" href="#https-用哪些端口进行通信-这些端口分别有什么用"><span>https 用哪些端口进行通信，这些端口分别有什么用</span></a></h3><ul><li><code>443</code> 端口用来验证服务器端和客户端的身份，比如验证证书的合法性</li><li><code>80</code> 端口用来传输数据（在验证身份合法的情况下，用来数据传输）</li></ul><h3 id="身份验证过程中会涉及到密钥-对称加密-非对称加密-摘要的概念-请解释一下" tabindex="-1"><a class="header-anchor" href="#身份验证过程中会涉及到密钥-对称加密-非对称加密-摘要的概念-请解释一下"><span>身份验证过程中会涉及到密钥， 对称加密，非对称加密，摘要的概念，请解释一下</span></a></h3><ul><li><strong>密钥</strong> ：密钥是一种参数，它是在明文转换为密文或将密文转换为明文的算法中输入的参数。密钥分为对称密钥与非对称密钥，分别应用在对称加密和非对称加密上。</li><li><strong>对称加密</strong> ：对称加密又叫做私钥加密，即信息的发送方和接收方使用同一个密钥去加密和解密数据。对称加密的特点是算法公开、加密和解密速度快，适合于对大数据量进行加密，常见的对称加密算法有 <code>DES、3DES、TDEA、Blowfish、RC5</code> 和 <code>IDEA</code>。</li><li><strong>非对称加密</strong> ：非对称加密也叫做公钥加密。非对称加密与对称加密相比，其安全性更好。对称加密的通信双方使用相同的密钥，如果一方的密钥遭泄露，那么整个通信就会被破解。而非对称加密使用一对密钥，即公钥和私钥，且二者成对出现。私钥被自己保存，不能对外泄露。公钥指的是公共的密钥，任何人都可以获得该密钥。用公钥或私钥中的任何一个进行加密，用另一个进行解密。</li><li><strong>摘要</strong> ：摘要算法又称哈希/散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用 16 进制的字符串表示）。算法不可逆。</li></ul><h3 id="为什么需要-ca-机构对证书签名" tabindex="-1"><a class="header-anchor" href="#为什么需要-ca-机构对证书签名"><span>为什么需要 CA 机构对证书签名</span></a></h3><blockquote><p>如果不签名会存在中间人攻击的风险，签名之后保证了证书里的信息，比如公钥、服务器信息、企业信息等不被篡改，能够验证客户端和服务器端的“合法性”。</p></blockquote><h3 id="https-验证身份也就是-tsl-ssl-身份验证的过程" tabindex="-1"><a class="header-anchor" href="#https-验证身份也就是-tsl-ssl-身份验证的过程"><span>https 验证身份也就是 TSL/SSL 身份验证的过程</span></a></h3><p><img src="`+u+'" alt=""></p><h2 id="_15-进程通信" tabindex="-1"><a class="header-anchor" href="#_15-进程通信"><span>15 进程通信</span></a></h2><h3 id="请简述一下-node-的多进程架构" tabindex="-1"><a class="header-anchor" href="#请简述一下-node-的多进程架构"><span>请简述一下 node 的多进程架构</span></a></h3><blockquote><p>面对 node 单线程对多核 CPU 使用不足的情况，Node 提供了 <code>child_process</code> 模块，来实现进程的复制，node 的多进程架构是主从模式，如下所示：</p></blockquote><p><img src="'+r+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> fork <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fork<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> cpus <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fork</span><span class="token punctuation">(</span><span class="token string">&#39;./worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 linux 中，我们通过 <code>ps aux | grep worker.js</code> 查看进程</p></blockquote><p><img src="`+d+`" alt=""></p><p>这就是著名的主从模式，<code>Master-Worker</code></p><h3 id="请问创建子进程的方法有哪些-简单说一下它们的区别" tabindex="-1"><a class="header-anchor" href="#请问创建子进程的方法有哪些-简单说一下它们的区别"><span>请问创建子进程的方法有哪些，简单说一下它们的区别</span></a></h3><ul><li><code>spawn()</code>：启动一个子进程来执行命令</li><li><code>exec()</code>: 启动一个子进程来执行命令，与 spawn()不同的是其接口不同，它有一个回调函数获知子进程的状况</li><li><code>execFlie()</code>: 启动一个子进程来执行可执行文件</li><li><code>fork()</code>: 与 <code>spawn()</code>类似，不同电在于它创建 Node 子进程需要执行 js 文件</li><li><code>spawn()</code>与 <code>exec()</code>、<code>execFile()</code>不同的是，后两者创建时可以指定 <code>timeout</code> 属性设置超时时间，一旦创建的进程超过设定的时间就会被杀死</li><li><code>exec()</code>与 <code>execFile()</code>不同的是，<code>exec()</code>适合执行已有命令，<code>execFile()</code>适合执行文件。</li></ul><h3 id="实现一个-node-子进程被杀死-然后自动重启代码的思路" tabindex="-1"><a class="header-anchor" href="#实现一个-node-子进程被杀死-然后自动重启代码的思路"><span>实现一个 node 子进程被杀死，然后自动重启代码的思路</span></a></h3><p>在创建子进程的时候就让子进程监听 <code>exit</code> 事件，如果被杀死就重新 <code>fork</code> 一下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> <span class="token function-variable function">createWorker</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> worker <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;worker.js&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        worker<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Worker&#39;</span> <span class="token operator">+</span> worker<span class="token punctuation">.</span>pid <span class="token operator">+</span> <span class="token string">&#39;exited&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 如果退出就创建新的worker</span></span>
<span class="line">            <span class="token function">createWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阅读全文</p>`,145),v=[m];function b(h,g){return a(),s("div",null,v)}const x=n(k,[["render",b],["__file","Node.html.vue"]]),w=JSON.parse('{"path":"/Node.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/docs/excellent-docs/8-Node%E6%A8%A1%E5%9D%97.html 当面试官问你node的时候，更多引导面试官用node做前端工程化，去引导到webpack、npm、打包工具上面去说说自己的想法，不要引导到自己会后端，后台不是会一点node语法就能...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/Node.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/docs/excellent-docs/8-Node%E6%A8%A1%E5%9D%97.html 当面试官问你node的时候，更多引导面试官用node做前端工程化，去引导到webpack、npm、打包工具上面去说说自己的想法，不要引导到自己会后端，后台不是会一点node语法就能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_images_20210517094050.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-04T18:04:03.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-04T18:04:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210517094050.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210517091829.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210517091909.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210517092109.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210517092136.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210517092246.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210517093635.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210517093720.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210517093745.png\\"],\\"dateModified\\":\\"2024-06-04T18:04:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1 package.json版本号规则","slug":"_1-package-json版本号规则","link":"#_1-package-json版本号规则","children":[]},{"level":2,"title":"2 package.json 与 package-lock.json 的关系","slug":"_2-package-json-与-package-lock-json-的关系","link":"#_2-package-json-与-package-lock-json-的关系","children":[]},{"level":2,"title":"3 npm 模块安装机制","slug":"_3-npm-模块安装机制","link":"#_3-npm-模块安装机制","children":[]},{"level":2,"title":"4 模块化的差异 AMD CMD COMMONJS ESMODULE","slug":"_4-模块化的差异-amd-cmd-commonjs-esmodule","link":"#_4-模块化的差异-amd-cmd-commonjs-esmodule","children":[]},{"level":2,"title":"5 Node 的 Event Loop: 6个阶段","slug":"_5-node-的-event-loop-6个阶段","link":"#_5-node-的-event-loop-6个阶段","children":[]},{"level":2,"title":"6 Koa相关","slug":"_6-koa相关","link":"#_6-koa相关","children":[{"level":3,"title":"koa洋葱模型怎么实现的","slug":"koa洋葱模型怎么实现的","link":"#koa洋葱模型怎么实现的","children":[]},{"level":3,"title":"如果中间件中的next()方法报错了怎么办","slug":"如果中间件中的next-方法报错了怎么办","link":"#如果中间件中的next-方法报错了怎么办","children":[]},{"level":3,"title":"co的原理是怎样的","slug":"co的原理是怎样的","link":"#co的原理是怎样的","children":[]}]},{"level":2,"title":"7 Express、koa实现原理以及对比","slug":"_7-express、koa实现原理以及对比","link":"#_7-express、koa实现原理以及对比","children":[]},{"level":2,"title":"8 请介绍一下 require 的模块加载机制","slug":"_8-请介绍一下-require-的模块加载机制","link":"#_8-请介绍一下-require-的模块加载机制","children":[]},{"level":2,"title":"9 exports.xxx=xxx 和 Module.exports={}有什么区别","slug":"_9-exports-xxx-xxx-和-module-exports-有什么区别","link":"#_9-exports-xxx-xxx-和-module-exports-有什么区别","children":[]},{"level":2,"title":"10 Node 的异步 I/O","slug":"_10-node-的异步-i-o","link":"#_10-node-的异步-i-o","children":[{"level":3,"title":"请介绍一下 Node 事件循环的流程","slug":"请介绍一下-node-事件循环的流程","link":"#请介绍一下-node-事件循环的流程","children":[]},{"level":3,"title":"在每个 tick 的过程中，如何判断是否有事件需要处理呢","slug":"在每个-tick-的过程中-如何判断是否有事件需要处理呢","link":"#在每个-tick-的过程中-如何判断是否有事件需要处理呢","children":[]},{"level":3,"title":"描述一下整个异步 I/O 的流程","slug":"描述一下整个异步-i-o-的流程","link":"#描述一下整个异步-i-o-的流程","children":[]}]},{"level":2,"title":"11 V8 的垃圾回收机制","slug":"_11-v8-的垃圾回收机制","link":"#_11-v8-的垃圾回收机制","children":[{"level":3,"title":"如何查看 V8 的内存使用情况","slug":"如何查看-v8-的内存使用情况","link":"#如何查看-v8-的内存使用情况","children":[]},{"level":3,"title":"V8 的内存限制是多少，为什么 V8 这样设计","slug":"v8-的内存限制是多少-为什么-v8-这样设计","link":"#v8-的内存限制是多少-为什么-v8-这样设计","children":[]},{"level":3,"title":"V8 的内存分代和回收算法请简单讲一讲","slug":"v8-的内存分代和回收算法请简单讲一讲","link":"#v8-的内存分代和回收算法请简单讲一讲","children":[]}]},{"level":2,"title":"12 Buffer 模块","slug":"_12-buffer-模块","link":"#_12-buffer-模块","children":[{"level":3,"title":"新建 Buffer 会占用 V8 分配的内存吗","slug":"新建-buffer-会占用-v8-分配的内存吗","link":"#新建-buffer-会占用-v8-分配的内存吗","children":[]},{"level":3,"title":"Buffer.alloc 和 Buffer.allocUnsafe 的区别","slug":"buffer-alloc-和-buffer-allocunsafe-的区别","link":"#buffer-alloc-和-buffer-allocunsafe-的区别","children":[]},{"level":3,"title":"Buffer 的内存分配机制","slug":"buffer-的内存分配机制","link":"#buffer-的内存分配机制","children":[]},{"level":3,"title":"Buffer 乱码问题","slug":"buffer-乱码问题","link":"#buffer-乱码问题","children":[]}]},{"level":2,"title":"13 webSocket","slug":"_13-websocket","link":"#_13-websocket","children":[{"level":3,"title":"webSocket 与传统的 http 有什么优势","slug":"websocket-与传统的-http-有什么优势","link":"#websocket-与传统的-http-有什么优势","children":[]},{"level":3,"title":"webSocket 协议升级简述一下","slug":"websocket-协议升级简述一下","link":"#websocket-协议升级简述一下","children":[]}]},{"level":2,"title":"14 https","slug":"_14-https","link":"#_14-https","children":[{"level":3,"title":"https 用哪些端口进行通信，这些端口分别有什么用","slug":"https-用哪些端口进行通信-这些端口分别有什么用","link":"#https-用哪些端口进行通信-这些端口分别有什么用","children":[]},{"level":3,"title":"身份验证过程中会涉及到密钥， 对称加密，非对称加密，摘要的概念，请解释一下","slug":"身份验证过程中会涉及到密钥-对称加密-非对称加密-摘要的概念-请解释一下","link":"#身份验证过程中会涉及到密钥-对称加密-非对称加密-摘要的概念-请解释一下","children":[]},{"level":3,"title":"为什么需要 CA 机构对证书签名","slug":"为什么需要-ca-机构对证书签名","link":"#为什么需要-ca-机构对证书签名","children":[]},{"level":3,"title":"https 验证身份也就是 TSL/SSL 身份验证的过程","slug":"https-验证身份也就是-tsl-ssl-身份验证的过程","link":"#https-验证身份也就是-tsl-ssl-身份验证的过程","children":[]}]},{"level":2,"title":"15 进程通信","slug":"_15-进程通信","link":"#_15-进程通信","children":[{"level":3,"title":"请简述一下 node 的多进程架构","slug":"请简述一下-node-的多进程架构","link":"#请简述一下-node-的多进程架构","children":[]},{"level":3,"title":"请问创建子进程的方法有哪些，简单说一下它们的区别","slug":"请问创建子进程的方法有哪些-简单说一下它们的区别","link":"#请问创建子进程的方法有哪些-简单说一下它们的区别","children":[]},{"level":3,"title":"实现一个 node 子进程被杀死，然后自动重启代码的思路","slug":"实现一个-node-子进程被杀死-然后自动重启代码的思路","link":"#实现一个-node-子进程被杀死-然后自动重启代码的思路","children":[]}]}],"git":{"updatedTime":1717524243000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"Node.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/docs/excellent-docs/8-Node%E6%A8%A1%E5%9D%97.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/docs/excellent-docs/8-Node%E6%A8%A1%E5%9D%97.html</a></p>\\n<blockquote>\\n<p>当面试官问你<code>node</code>的时候，更多引导面试官用<code>node</code>做前端工程化，去引导到<code>webpack</code>、<code>npm</code>、打包工具上面去说说自己的想法，不要引导到自己会后端，后台不是会一点<code>node</code>语法就能写的</p>\\n</blockquote>"}');export{x as comp,w as data};
