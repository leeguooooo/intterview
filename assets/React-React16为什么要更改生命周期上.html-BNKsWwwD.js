import{_ as n,c as s,o as a,a as p}from"./app-DVMZDNEl.js";const t="/images/s_poetries_work_images_20210428192615.png",e="/images/s_poetries_work_images_20210428192712.png",o="/images/s_poetries_work_images_20210428192753.png",c="/images/s_poetries_work_images_20210428193117.png",l="/images/s_poetries_work_images_20210428193203.png",i="/images/s_poetries_work_images_20210428193409.png",u="/images/s_poetries_work_images_20210428193654.png",r="/images/s_poetries_work_images_20210428193914.png",d="/images/s_poetries_work_images_20210428193937.png",k="/images/s_poetries_work_images_20210428194003.png",m="/images/s_poetries_work_images_20210428194051.png",v="/images/s_poetries_work_images_20210428194119.png",g="/images/s_poetries_work_images_20210428194344.png",b="/images/s_poetries_work_images_20210428194400.png",h={},_=p(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/react/11-React16%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9B%B4%E6%94%B9%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8A.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/react/11-React16%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9B%B4%E6%94%B9%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8A.html</a></p><h2 id="拆解-react-生命周期-从-react-15-说起" tabindex="-1"><a class="header-anchor" href="#拆解-react-生命周期-从-react-15-说起"><span>拆解 React 生命周期：从 React 15 说起</span></a></h2><blockquote><p>在 React 15 中，大家需要关注以下几个生命周期方法：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">componentWillUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果你接触 React 足够早，或许会记得还有 <code>getDefaultProps</code> 和 <code>getInitState</code> 这两个方法，它们都是 <code>React.createClass()</code> 模式下初始化数据的方法。由于这种写法在 ES6 普及后已经不常见，这里不再详细展开</p></blockquote><p>这些生命周期方法是如何彼此串联、相互依存的呢？这里我为你总结了一张大图：</p><p><img src="`+t+`" alt=""></p><p>接下来，我就围绕这张大图，分阶段讨论组件生命周期的运作规律。在学习的过程中，下面这个 Demo 可以帮助你具体地验证每个阶段的工作流程：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 定义子组件</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">LifeCycle</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;进入constructor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// state 可以在 constructor 里初始化</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;子组件的文本&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 初始化渲染时调用</span></span>
<span class="line">      <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;componentWillMount方法执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 初始化渲染时调用</span></span>
<span class="line">      <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;componentDidMount方法执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 父组件修改组件的props时会调用</span></span>
<span class="line">      <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span><span class="token parameter">nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;componentWillReceiveProps方法执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 组件更新时调用</span></span>
<span class="line">      <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;shouldComponentUpdate方法执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 组件更新时调用</span></span>
<span class="line">      <span class="token function">componentWillUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;componentWillUpdate方法执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 组件更新后调用</span></span>
<span class="line">      <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">preProps<span class="token punctuation">,</span> preState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;componentDidUpdate方法执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 组件卸载时调用</span></span>
<span class="line">      <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;子组件的componentWillUnmount方法执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 点击按钮，修改子组件文本内容的方法</span></span>
<span class="line">      <span class="token function-variable function">changeText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;修改后的子组件文本&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;render方法执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;container&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeText<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&quot;changeText&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">              修改子组件文本内容</span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&quot;textContent&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">&quot;fatherContent&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 定义 LifeCycle 组件的父组件</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">LifeCycleContainer</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// state 也可以像这样用属性声明的形式初始化</span></span>
<span class="line">      state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;父组件的文本&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">hideChild</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 点击按钮，修改父组件文本的方法</span></span>
<span class="line">      <span class="token function-variable function">changeText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;修改后的父组件文本&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 点击按钮，隐藏（卸载）LifeCycle 组件的方法</span></span>
<span class="line">      <span class="token function-variable function">hideChild</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">hideChild</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;fatherContainer&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeText<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&quot;changeText&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">              修改父组件文本内容</span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>hideChild<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&quot;hideChild&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">              隐藏子组件</span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hideChild <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">&lt;</span>LifeCycle text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>LifeCycleContainer <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该入口文件对应的 index.html 中预置了 id 为 root 的真实 DOM 节点作为根节点，body 标签内容如下：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 Demo 渲染到浏览器上大概是这样的：</p><p><img src="`+e+'" alt=""></p><p>此处由于我们强调的是对生命周期执行规律的验证，所以样式上从简，你也可以根据自己的喜好添加 CSS 相关的内容。</p><p>接下来我们就结合这个 Demo 和开头的生命周期大图，一起来看看<code>挂载、更新、卸载这 3 个阶段</code>，React 组件都经历了哪些事情。</p><h2 id="mounting-阶段-组件的初始化渲染-挂载" tabindex="-1"><a class="header-anchor" href="#mounting-阶段-组件的初始化渲染-挂载"><span>Mounting 阶段：组件的初始化渲染（挂载）</span></a></h2><p>挂载过程在组件的一生中仅会发生一次，在这个过程中，组件被初始化，然后会被渲染到真实 DOM 里，完成所谓的“首次渲染”。</p><blockquote><p>在挂载阶段，一个 <code>React</code> 组件会按照顺序经历如下图所示的生命周期：</p></blockquote><p><img src="'+o+`" alt=""></p><blockquote><p>首先我们来看 <code>constructor</code> 方法，该方法仅仅在挂载的时候被调用一次，我们可以在该方法中对 <code>this.state</code> 进行初始化</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;进入constructor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// state 可以在 constructor 里初始化</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;子组件的文本&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>componentWillMount</code>、<code>componentDidMount</code> 方法同样只会在挂载阶段被调用一次。其中 <code>componentWillMount</code> 会在执行 <code>render</code> 方法前被触发</p></blockquote><p>接下来 <code>render 方法被触发</code>。注意 <code>render 在执行过程中并不会去操作真实 DOM（也就是说不会渲染）</code>，它的职能是把需要渲染的内容返回出来。<code>真实 DOM 的渲染工作，在挂载阶段是由 ReactDOM.render 来承接的</code></p><p><code>componentDidMount 方法在渲染结束后被触发</code>，此时因为真实 DOM 已经挂载到了页面上，我们可以在这个生命周期里执行真实 DOM 相关的操作。此外，类似于异步请求、数据初始化这样的操作也大可以放在这个生命周期来做</p><p>这一整个流程对应的其实就是我们 Demo 页面刚刚打开时，组件完成初始化渲染的过程。下图是 Demo 中的 LifeCycle 组件在挂载过程中控制台的输出，你可以用它来验证挂载过程中生命周期顺序的正确性：</p><p><img src="`+c+'" alt=""></p><h2 id="updating-阶段-组件的更新" tabindex="-1"><a class="header-anchor" href="#updating-阶段-组件的更新"><span>Updating 阶段：组件的更新</span></a></h2><p>组件的更新分为两种：</p><ul><li>一种是由父组件更新触发的更新；</li><li>另一种是组件自身调用自己的 <code>setState</code> 触发的更新。</li></ul><p>这两种更新对应的生命周期流程如下图所示：</p><p><img src="'+l+`" alt=""></p><p><strong>componentWillReceiveProps 到底是由什么触发的？</strong></p><p>从图中你可以明显看出，父组件触发的更新和组件自身的更新相比，多出了这样一个生命周期方法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这个生命周期方法里，<code>nextProps</code> 表示的是接收到新 <code>props</code> 内容，而现有的 <code>props</code> （相对于 <code>nextProps</code> 的“旧 props”）我们可以通过 <code>this.props</code> 拿到，由此便能够感知到 <code>props</code> 的变化</p><p>写到这里，就不得不在“变化”这个动作上深挖一下了。包括一些候选人面试时的回答里，都不约而同地见过/听过这样一种说法：<code>componentWillReceiveProps</code> 是在组件的 <code>props</code> 内容发生了变化时被触发的。</p><p>这种说法不够严谨。远的不说，就拿咱们上文给出的 Demo 开刀，该界面的控制台输出在初始化完成后是这样的：</p><p><img src="`+i+`" alt=""></p><p>注意，我们代码里面，<code>LifeCycleContainer</code> 这个父组件传递给子组件 LifeCycle 的 props 只有一个 text：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LifeCycle</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{this.state.text}</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>假如我点击“修改父组件文本内容”这个按钮，父组件的 <code>this.state.text</code> 会发生改变，进而带动子组件的 <code>this.props.text</code> 发生改变。此时一定会触发 <code>componentWillReceiveProps</code> 这个生命周期，这是毋庸置疑的：</p><p><img src="`+u+`" alt=""></p><p>但如果我现在对父组件的结构进行一个小小的修改，给它一个和子组件完全无关的 state（this.state.ownText），同时相应地给到一个修改这个 state 的方法（this.changeOwnText），并用一个新的 button 按钮来承接这个触发的动作。</p><p>改变后的 LifeCycleContainer 如下所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">// 定义 LifeCycle 组件的父组件</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">LifeCycleContainer</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// state 也可以像这样用属性声明的形式初始化</span></span>
<span class="line">      state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;父组件的文本&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// 新增的只与父组件有关的 state</span></span>
<span class="line">        <span class="token literal-property property">ownText</span><span class="token operator">:</span> <span class="token string">&quot;仅仅和父组件有关的文本&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">hideChild</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function-variable function">changeText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;修改后的父组件文本&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 修改 ownText 的方法</span></span>
<span class="line">      <span class="token function-variable function">changeOwnText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">ownText</span><span class="token operator">:</span> <span class="token string">&quot;修改后的父组件自有文本&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function-variable function">hideChild</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">hideChild</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;fatherContainer&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span><span class="token comment">/* 新的button按钮 */</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeOwnText<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&quot;changeText&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">              修改父组件自有文本内容</span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeText<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&quot;changeText&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">              修改父组件文本内容</span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>hideChild<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&quot;hideChild&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">              隐藏子组件</span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>ownText<span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hideChild <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token operator">&lt;</span>LifeCycle text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新的界面如下图所示：</p><p><img src="`+r+'" alt=""></p><p>可以看到，this.state.ownText 这个状态和子组件完全无关。但是当我点击“修改父组件自有文本内容”这个按钮的时候，<code>componentReceiveProps</code> 仍然被触发了，效果如下图所示：</p><p><img src="'+d+'" alt=""></p><p>面对这样的运行结果，我不由得要带你复习一下 React 官方文档中的这句话：</p><p><img src="'+k+'" alt=""></p><blockquote><p><code>componentReceiveProps 并不是由 props 的变化触发的，而是由父组件的更新触发的</code>，这个结论，请你谨记。</p></blockquote><p><strong>组件自身 setState 触发的更新</strong></p><blockquote><p><code>this.setState()</code> 调用后导致的更新流程，前面大图中已经有体现，这里我直接沿用上一个 Demo 来做演示。若我们点击上一个 Demo 中的“修改子组件文本内容”这个按钮：</p></blockquote><p><img src="'+m+'" alt=""></p><p>这个动作将会触发子组件 LifeCycle 自身的更新流程，随之被触发的生命周期函数如下图增加的 console 内容所示：</p><p><img src="'+v+`" alt=""></p><blockquote><p>先来说说 <code>componentWillUpdate 和 componentDidUpdate</code> 这一对好基友。</p></blockquote><p><code>componentWillUpdate</code> 会在 <code>render</code> 前被触发，它和 <code>componentWillMount</code> 类似，允许你在里面做一些不涉及真实 DOM 操作的准备工作；而 <code>componentDidUpdate</code> 则在组件更新完毕后被触发，和 <code>componentDidMount</code> 类似，这个生命周期也经常被用来处理 DOM 操作。此外，我们也常常将 <code>componentDidUpdate</code> 的执行作为子组件更新完毕的标志通知到父组件</p><p><strong>render 与性能：初识 shouldComponentUpdate</strong></p><p>这里需要重点提一下 <code>shouldComponentUpdate</code> 这个生命周期方法，它的调用形式如下所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>render 方法由于伴随着对虚拟 DOM 的构建和对比，过程可以说相当耗时</code>。而在 React 当中，很多时候我们会不经意间就频繁地调用了 <code>render</code>。为了避免不必要的 <code>render</code> 操作带来的性能开销，React 为我们提供了 <code>shouldComponentUpdate</code> 这个钩子。</p><p>React 组件会根据 <code>shouldComponentUpdate</code> 的返回值，来决定是否执行该方法之后的生命周期，进而决定是否对组件进行<code>re- render（重渲染</code>）。<code>shouldComponentUpdate</code> 的默认值为 <code>true</code>，也就是说“无条件 re- render”。在实际的开发中，我们往往通过手动往 <code>shouldComponentUpdate</code> 中填充判定逻辑，或者直接在项目中引入 <code>PureComponent</code> 等最佳实践，来实现“有条件的 re-render”。</p><h2 id="unmounting-阶段-组件的卸载" tabindex="-1"><a class="header-anchor" href="#unmounting-阶段-组件的卸载"><span>Unmounting 阶段：组件的卸载</span></a></h2><p>组件的销毁阶段本身是比较简单的，只涉及一个生命周期，如下图所示：</p><p><img src="`+g+'" alt=""></p><p>对应上文的 Demo 来看，我们点击“隐藏子组件”后就可以把 LifeCycle 从父组件中移除掉，进而实现卸载的效果。整个过程如下图所示：</p><p><img src="'+b+'" alt=""></p><p>这个生命周期本身不难理解，我们重点说说怎么触发它。组件销毁的常见原因有以下两个。</p><ul><li><strong>组件在父组件中被移除了</strong> ：这种情况相对比较直观，对应的就是我们上图描述的这个过程。</li><li><strong>组件中设置了 key 属性</strong> ，父组件在 <code>render</code> 的过程中，发现 <code>key</code> 值和上一次不一致，那么这个组件就会被干掉。</li></ul><p>阅读全文</p>',72),y=[_];function w(f,E){return a(),s("div",null,y)}const B=n(h,[["render",w],["__file","React-React16为什么要更改生命周期上.html.vue"]]),x=JSON.parse('{"path":"/React-React16%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9B%B4%E6%94%B9%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8A.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/react/11-React16%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9B%B4%E6%94%B9%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8A.html 拆解 R...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/React-React16%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9B%B4%E6%94%B9%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8A.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/react/11-React16%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9B%B4%E6%94%B9%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8A.html 拆解 R..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_images_20210428192615.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428192615.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428192712.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428192753.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428193117.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428193203.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428193409.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428193654.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428193914.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428193937.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428194003.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428194051.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428194119.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428194344.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428194400.png\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"拆解 React 生命周期：从 React 15 说起","slug":"拆解-react-生命周期-从-react-15-说起","link":"#拆解-react-生命周期-从-react-15-说起","children":[]},{"level":2,"title":"Mounting 阶段：组件的初始化渲染（挂载）","slug":"mounting-阶段-组件的初始化渲染-挂载","link":"#mounting-阶段-组件的初始化渲染-挂载","children":[]},{"level":2,"title":"Updating 阶段：组件的更新","slug":"updating-阶段-组件的更新","link":"#updating-阶段-组件的更新","children":[]},{"level":2,"title":"Unmounting 阶段：组件的卸载","slug":"unmounting-阶段-组件的卸载","link":"#unmounting-阶段-组件的卸载","children":[]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"React-React16为什么要更改生命周期上.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/react/11-React16%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9B%B4%E6%94%B9%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8A.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/react/11-React16%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9B%B4%E6%94%B9%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%8A.html</a></p>"}');export{B as comp,x as data};
