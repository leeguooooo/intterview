import{_ as s,a as n,b as a}from"./s_poetries_work_images_20210506175834-C7r9VXF2.js";import{_ as e,c as t,o,a as l}from"./app-4ig7XT8g.js";const p={},c=l(`<p>原文链接: <a href="https://interview.poetries.top/docs/excellent-docs/13-%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/docs/excellent-docs/13-%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97.html</a></p><h2 id="_1-代码注入xss" tabindex="-1"><a class="header-anchor" href="#_1-代码注入xss"><span>1 代码注入XSS</span></a></h2><blockquote><p>跨网站指令码（英语：<code>Cross-site scripting</code>，通常简称为：<code>XSS</code>）是一种网站应用程式的安全漏洞攻击，是代码注入的一种。它允许恶意使用者将程式码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含了 <code>HTML</code> 以及使用者端脚本语言</p></blockquote><blockquote><p><code>XSS</code> 分为三种：反射型，存储型和 <code>DOM-based</code></p></blockquote><h3 id="_1-1-如何攻击" tabindex="-1"><a class="header-anchor" href="#_1-1-如何攻击"><span>1.1 如何攻击</span></a></h3><ul><li><code>XSS</code> 通过修改 <code>HTML</code>节点或者执行 <code>JS</code>代码来攻击网站。</li><li>例如通过 <code>URL</code> 获取某些参数</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line">    <span class="token comment">&lt;!-- http://www.domain.com?name=&lt;script&gt;alert(1)&lt;/script&gt; --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上述 <code>URL</code> 输入可能会将 <code>HTML</code> 改为 <code>&lt;div&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/div&gt;</code> ，这样页面中就凭空多了一段可执行脚本。这种攻击类型是反射型攻击，也可以说是 <code>DOM-based</code> 攻击</p></blockquote><h3 id="_1-2-如何防御" tabindex="-1"><a class="header-anchor" href="#_1-2-如何防御"><span>1.2 如何防御</span></a></h3><blockquote><p>最普遍的做法是转义输入输出的内容，对于引号，尖括号，斜杠进行转义</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    	str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;amp;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    	str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;lt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    	str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    	str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&quot;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;quto;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    	str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#39;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;##39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    	str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\`</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;##96;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&amp;##x2F;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> str</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过转义可以将攻击代码 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 变成</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// -&gt; &amp;lt;script&amp;gt;alert(1)&amp;lt;&amp;##x2F;script&amp;gt;</span></span>
<span class="line">    <span class="token function">escape</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;script&gt;alert(1)&lt;/script&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>对于显示富文本来说，不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。这种情况通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> xss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;xss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token function">xss</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1 id=&quot;title&quot;&gt;XSS Demo&lt;/h1&gt;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// -&gt; &lt;h1&gt;XSS Demo&lt;/h1&gt;&amp;lt;script&amp;gt;alert(&quot;xss&quot;);&amp;lt;/script&amp;gt;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>以上示例使用了 <code>js-xss</code>来实现。可以看到在输出中保留了 <code>h1</code> 标签且过滤了 <code>script</code> 标签</p></blockquote><h3 id="_1-3-cookie-如何防范-xss-攻击" tabindex="-1"><a class="header-anchor" href="#_1-3-cookie-如何防范-xss-攻击"><span>1.3 cookie 如何防范 XSS 攻击</span></a></h3><blockquote><p>XSS(跨站脚本攻击)是指攻击者在返回的 HTML 中嵌入 javascript 脚本，为了减轻这些 攻击，需要在 HTTP 头部配上，set- cookie</p></blockquote><ul><li><code>httpOnly</code> 这个属性可以防止 XSS,它会禁止 javascript 脚本来访问 <code>cookie</code></li><li><code>secure</code>- 这个属性告诉浏览器仅在请求为 <code>https</code> 的时候发送 <code>cookie</code></li></ul><h2 id="_2-跨站请求伪造csrf" tabindex="-1"><a class="header-anchor" href="#_2-跨站请求伪造csrf"><span>2 跨站请求伪造CSRF</span></a></h2><blockquote><ul><li><code>CSRF</code> 就是利用用户的登录态发起恶意请求</li><li><code>CSRF（Cross-site request forgery）</code> 跨站请求伪造，是一种常见的攻击方式。是指 <code>A</code> 网站正常登陆后，<code>cookie</code> 正常保存登录信息，其他网站 B 通过某种方式调用 A 网站接口进行操作，<code>A</code> 的接口会在请求时会自动带上 <code>cookie</code>。</li></ul></blockquote><ul><li>同源策略可以通过 <code>html</code> 标签加载资源，而且同源策略不阻止接口请求而是拦截请求结果，<code>CSRF</code> 恰恰占了这两个便宜。</li><li>对于 <code>GET</code> 请求，直接放到 <code>&lt;img&gt;</code> 就能神不知鬼不觉地请求跨域接口。</li><li>对于 <code>POST</code> 请求，很多例子都使用 <code>form</code> 提交：</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>&lt;nowiki&gt;http://bank.com/transfer.do&lt;/nowiki&gt;<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>acct<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>MARIA<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>amount<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>View my pictures<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>浏览器同源策略不能作为防范 CSRF 的方法</strong> 浏览器允许这么做，归根到底就是因为<strong>你无法用 js 直接操作获得的结果。</strong></p></blockquote><p><strong>如何攻击</strong></p><blockquote><p>假设网站中有一个通过 Get 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&quot;http://www.domain.com/xxx?comment=&#39;attack&#39;&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+s+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Set-Cookie&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">username=poetry2;sameSite = strict;path=/;httpOnly;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getCookirExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>在B网站，危险网站向A网站发起请求</p></blockquote><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line">    <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token comment">&lt;!-- 利用img自动发送请求 --&gt;</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://localhost:8000/api/user/login<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会带上A网站的cookie</p><p><img src="`+n+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 在A网站下发cookie的时候，加上sameSite=strict，这样B网站在发送A网站请求，不会自动带上A网站的cookie，保证了安全</span></span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// NAME=VALUE    赋予Cookie的名称及对应值</span></span>
<span class="line">    <span class="token comment">// expires=DATE  Cookie 的有效期</span></span>
<span class="line">    <span class="token comment">// path=PATH     赋予Cookie的名称及对应值</span></span>
<span class="line">    <span class="token comment">// domain=域名   作为 Cookie 适用对象的域名 （若不指定则默认为创建 Cookie 的服务器的域名） (一般不指定)</span></span>
<span class="line">    <span class="token comment">// Secure        仅在 HTTPS 安全通信时才会发送 Cookie</span></span>
<span class="line">    <span class="token comment">// HttpOnly      加以限制，使 Cookie 不能被 JavaScript 脚本访问</span></span>
<span class="line">    <span class="token comment">// SameSite      Lax|Strict|None  它允许您声明该Cookie是否仅限于第一方或者同一站点上下文</span></span>
<span class="line">    </span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Set-Cookie&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">username=poetry;sameSite=strict;path=/;httpOnly;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getCookirExpires</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+a+`" alt=""></p><p><strong>如何防御</strong></p><ul><li><code>Get</code> 请求不对数据进行修改</li><li>不让第三方网站访问到用户 <code>Cookie</code></li><li>阻止第三方网站请求接口</li><li>请求时附带验证信息，比如验证码或者 <code>token</code></li><li><code>SameSite Cookies</code>: 只能当前域名的网站发出的http请求，携带这个<code>Cookie</code>。当然，由于这是新的cookie属性，在兼容性上肯定会有问题</li></ul><blockquote><p>CSRF攻击，仅仅是利用了http携带cookie的特性进行攻击的，但是攻击站点还是无法得到被攻击站点的cookie。这个和XSS不同，XSS是直接通过拿到Cookie等信息进行攻击的</p></blockquote><p><strong>在CSRF攻击中，就Cookie相关的特性：</strong></p><ul><li>http请求，会自动携带Cookie。</li><li>携带的cookie，还是http请求所在域名的cookie。</li></ul><h3 id="csrf怎么获取用户的登录态" tabindex="-1"><a class="header-anchor" href="#csrf怎么获取用户的登录态"><span>CSRF怎么获取用户的登录态</span></a></h3><blockquote><p>攻击全称不需要获取cookie，只是在危险的网站欺骗用户去点击已登录的网站链接，利用已登录的网站的自动发送cookie达到目的。因为http请求都会带着请求目标域下的<code>cookie</code>的，向同一个服务器发请求时会带上浏览器保存的对于那个服务器的cookie，而不管你从哪个网站向目标网站发请求</p></blockquote><h3 id="cookie通常是不能跨域访问的-那问什么会有csrf攻击" tabindex="-1"><a class="header-anchor" href="#cookie通常是不能跨域访问的-那问什么会有csrf攻击"><span>cookie通常是不能跨域访问的，那问什么会有csrf攻击</span></a></h3><p><strong>疑问：</strong></p><blockquote><p>csrf说用户访问了A网站，然后又访问恶意网站B, B中也发送请求到A，携带A站的cookie，这样就构成了csrf。 可是cookie好像是不支持跨域的吧？</p></blockquote><p><strong>回答</strong></p><ul><li>浏览器会依据加载的域名附带上对应域名<code>cookie</code>，又不是发送b站的<code>cookie</code>。</li><li>就是如果用户在<code>a</code>站登录了生成了授权的<code>cookie</code> 之类的，然后访问<code>b</code>站，b站故意构造请求a站的请求，如删除操作之类的，用<code>script</code>，<code>img</code>或者<code>iframe</code>之类的加载<code>a</code>站着个地址，浏览器会附带上<code>a</code>站此登录用户的授权<code>cookie</code>信息，这样就构成<code>crsf</code>，会删除掉当前用户的数据</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><code>XSS</code>攻击: 注入恶意代码 <ul><li><code>cookie</code> 设置 <code>httpOnly</code></li><li>转义页面上的输入内容和输出内容</li></ul></li><li><code>CSRF</code>: 跨站请求伪造，防护: <ul><li><code>get</code>不修改数据</li><li>不被第三方网站访问到用户的 <code>cookie</code></li><li>设置白名单，不被第三方网站请求</li><li>请求校验</li></ul></li></ul><h2 id="_3-浏览器同源策略-sop" tabindex="-1"><a class="header-anchor" href="#_3-浏览器同源策略-sop"><span>3 浏览器同源策略 SOP</span></a></h2><h3 id="_3-1-同源" tabindex="-1"><a class="header-anchor" href="#_3-1-同源"><span>3.1 同源</span></a></h3><blockquote><p>先解释何为同源：协议、域名、端口都一样，就是同源。</p></blockquote><table><thead><tr><th>url</th><th>同源</th></tr></thead><tbody><tr><td><a href="https://niconico.com/" target="_blank" rel="noopener noreferrer">https://niconico.com (opens new window)</a></td><td>基准</td></tr><tr><td>https://niconico.com/spirit</td><td>o</td></tr><tr><td>https://sub.niconico.com/spirit</td><td>x</td></tr><tr><td>http://niconico.com/spirit</td><td>x</td></tr><tr><td>https://niconico.com:8080/spirit</td><td>x</td></tr></tbody></table><h3 id="_3-2-限制" tabindex="-1"><a class="header-anchor" href="#_3-2-限制"><span>3.2 限制</span></a></h3><ul><li>你之所以会遇到 <strong>跨域问题</strong> ，正是因为 SOP 的各种限制。但是具体来说限制了什么呢？</li><li>如果你说 SOP 就是“限制非同源资源的获取”，这不对，最简单的例子是引用图片、css、js 文件等资源的时候就允许跨域。</li><li>如果你说 SOP 就是“禁止跨域请求”，这也不对，本质上 SOP 并不是禁止跨域请求，而是在请求后拦截了请求的回应。</li></ul><p><strong>其实表面上 SOP 分两种情况：</strong></p><ul><li>可以正常引用 iframe、图片等各种资源，<strong>但是</strong> 限制对其内容进行操作</li><li>直接限制 ajax 请求，准确来说是<strong>限制操作 ajax 响应结果</strong> ，<strong>这会引起后面说到的 CSRF</strong></li></ul><blockquote><p>但是，本质上这两条是一样的：总之，对于非同源的资源，浏览器可以“直接使用”，但是程序员和用户不可以对这些数据进行操作，杜绝某些居心不良的行为。这就是现代安全浏览器对用户的保护之一。</p></blockquote><p><strong>下面是 3 个在实际应用中会遇到的例子：</strong></p><ul><li>使用 ajax 请求其他跨域 API，最常见的情况，前端新手噩梦</li><li>iframe 与父页面交流（如 DOM 或变量的获取），出现率比较低，而且解决方法也好懂</li><li>对跨域图片（例如来源于 <code>&lt;img&gt;</code> ）进行操作，在 canvas 操作图片的时候会遇到这个问题</li></ul><p><strong>如果没有了 SOP：</strong></p><ul><li><code>iframe</code> 里的机密信息被肆意读取</li><li>更加肆意地进行 <code>CSRF</code></li><li>接口被第三方滥用</li></ul><h3 id="_3-3-绕过跨域" tabindex="-1"><a class="header-anchor" href="#_3-3-绕过跨域"><span>3.3 绕过跨域</span></a></h3><blockquote><p><code>SOP</code> 虽然让用户更安全，同时也会对程序员带来一定程度的麻烦，因为有时候业务上就是有跨域的需求。绕过跨域的方案由于篇幅所限，并且网上也很多相关文章，所以不在这里展开解决跨域的方案，只给出几个关键词：</p></blockquote><p><strong>对于 ajax</strong></p><ul><li>使用 <code>JSONP</code></li><li>后端进行 <code>CORS</code> 配置</li><li>后端反向代理</li><li>使用 <code>WebSocket</code></li></ul><p><strong>对于 iframe</strong></p><ul><li>使用 <code>location.hash</code> 或 <code>window.name</code> 进行信息交流</li><li>使用 <code>postMessage</code></li></ul><h3 id="_3-4-浏览器同源策略与ajax" tabindex="-1"><a class="header-anchor" href="#_3-4-浏览器同源策略与ajax"><span>3.4 浏览器同源策略与ajax</span></a></h3><blockquote><p>对于 ajax 请求，在获得数据之后你能肆意进行 js 操作。这时候虽然同源策略会阻止响应，但依然会发出请求。因为<strong>执行响应拦截的是浏览器</strong> 而不是后端程序。事实上你的<strong>请求已经发到服务器</strong> 并返回了结果，但是迫于安全策略，浏览器不允许你<strong>继续进行 js 操作</strong> ，所以报出你熟悉的 <code>blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code>。</p></blockquote><p><strong>所以再强调一次，同源策略不能作为防范 CSRF 的方法</strong> 。</p><p>不过<strong>可以防范 CSRF 的例外</strong> 还是有的，浏览器并不是让所有请求都发送成功，上述情况仅限于<strong>简单请求</strong> ，相关知识会在下面 CORS 一节详细解释。</p><h2 id="_4-跨域资源共享-cors" tabindex="-1"><a class="header-anchor" href="#_4-跨域资源共享-cors"><span>4 跨域资源共享 CORS</span></a></h2><p>跨域是浏览器限制，跨域资源共享（Cross-origin resource sharing）也是服务器与浏览器协调的结果。</p><blockquote><p>如果服务器设置了 CORS 相关配置，在返回浏览器的请求头会加上 <code>Access-Control-Allow- Origin</code>，浏览器看到这个字段的值与当前的源匹配，就会解锁跨域限制。</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">    HTTP/1.1 200 OK</span>
<span class="line">    Date: Sun, 24 Apr 2016 12:43:39 GMT</span>
<span class="line">    Server: Apache</span>
<span class="line">    Access-Control-Allow-Origin: http://www.acceptmeplease.com</span>
<span class="line">    Keep-Alive: timeout=2, max=100</span>
<span class="line">    Connection: Keep-Alive</span>
<span class="line">    Content-Type: application/xml</span>
<span class="line">    Content-Length: 423</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 CORS，请求分两种。</p><h3 id="_4-1-简单请求" tabindex="-1"><a class="header-anchor" href="#_4-1-简单请求"><span>4.1 简单请求</span></a></h3><ul><li>请求方法使用 <code>GET</code>、<code>POST</code> 或 <code>HEAD</code></li><li><code>Content-Type</code> 设为 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code> 或 <code>text/plain</code></li></ul><p>符合上面两个条件的都为 <code>CORS</code> 简单请求。简单请求都会直接发到服务器，会造成 <code>CSRF</code>。</p><h3 id="_4-2-预检请求" tabindex="-1"><a class="header-anchor" href="#_4-2-预检请求"><span>4.2 预检请求</span></a></h3><blockquote><p>不符合简单请求要求的请求都需要先发送预检请求（Preflight Request）。浏览器会在真正请求前发送 OPTION 方法的请求向服务器询问当前源是否符合 CORS 目标，验证通过后才会发送正式请求。</p></blockquote><p>例如<strong>使用 application/json 传参的 POST 请求</strong> 就是非简单请求，会在预检中被拦截。</p><p>再例如使用 <code>PUT</code> 方法请求，也会发送预检请求。</p><p>上面提到的<strong>可以防范 CSRF 的例外</strong> ，就是指预检请求。即使跨域成功请求预检，但真正请求并不能发出去，这就保证了 <code>CSRF</code> 无法成功。</p><h3 id="_4-3-cors-与-cookie" tabindex="-1"><a class="header-anchor" href="#_4-3-cors-与-cookie"><span>4.3 CORS 与 cookie</span></a></h3><ul><li>与同域不同，用于跨域的 <code>CORS</code> 请求默认不发送 <code>Cookie</code> 和 <code>HTTP</code> 认证信息，前后端都要在配置中设定请求时带上 <code>cookie</code>。</li><li>这就是为什么在进行 <code>CORS</code> 请求时 <code>axios</code> 需要设置 <code>withCredentials: true</code>。</li></ul><p>下面是 <code>node.js</code> 的后台 <code>koa</code> 框架的 CORS 设置：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">    /**</span>
<span class="line">     * CORS middleware</span>
<span class="line">     *</span>
<span class="line">     * @param {Object} [options]</span>
<span class="line">     *  - {String|Function(ctx)} origin \`Access-Control-Allow-Origin\`, default is request Origin header</span>
<span class="line">     *  - {String|Array} allowMethods \`Access-Control-Allow-Methods\`, default is &#39;GET,HEAD,PUT,POST,DELETE,PATCH&#39;</span>
<span class="line">     *  - {String|Array} exposeHeaders \`Access-Control-Expose-Headers\`</span>
<span class="line">     *  - {String|Array} allowHeaders \`Access-Control-Allow-Headers\`</span>
<span class="line">     *  - {String|Number} maxAge \`Access-Control-Max-Age\` in seconds</span>
<span class="line">     *  - {Boolean} credentials \`Access-Control-Allow-Credentials\`</span>
<span class="line">     *  - {Boolean} keepHeadersOnError Add set headers to \`err.header\` if an error is thrown</span>
<span class="line">     * @return {Function} cors middleware</span>
<span class="line">     * @api public</span>
<span class="line">     */</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>顺带一提，<code>Access-Control-Allow-Credentials</code> 设为 <code>true</code> 时，<code>Access-Control-Allow- Origin</code> 强制不能设为 <code>*</code>，为了安全，也是挺麻烦</p></blockquote><h2 id="_5-密码安全" tabindex="-1"><a class="header-anchor" href="#_5-密码安全"><span>5 密码安全</span></a></h2><p><strong>加盐</strong></p><blockquote><p>对于密码存储来说，必然是不能明文存储在数据库中的，否则一旦数据库泄露，会对用户造成很大的损失。并且不建议只对密码单纯通过加密算法加密，因为存在彩虹表的关系</p></blockquote><ul><li>通常需要对密码加盐，然后进行几次不同加密算法的加密</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 加盐也就是给原密码添加字符串，增加原密码长度</span></span>
<span class="line">    <span class="token function">sha256</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span>salt <span class="token operator">+</span> password <span class="token operator">+</span> salt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>但是加盐并不能阻止别人盗取账号，只能确保即使数据库泄露，也不会暴露用户的真实密码。一旦攻击者得到了用户的账号，可以通过暴力破解的方式破解密码。对于这种情况，通常使用验证码增加延时或者限制尝试次数的方式。并且一旦用户输入了错误的密码，也不能直接提示用户输错密码，而应该提示账号或密码错误</p></blockquote><p><strong>前端加密</strong></p><blockquote><p>虽然前端加密对于安全防护来说意义不大，但是在遇到中间人攻击的情况下，可以避免明文密码被第三方获取</p></blockquote><p>阅读全文</p>`,99),i=[c];function r(u,d){return o(),t("div",null,i)}const m=e(p,[["render",r],["__file","前端安全.html.vue"]]),h=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/docs/excellent-docs/13-%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97.html 1 代码注入XSS 跨网站指令码（英语：Cross-site scripting，通常简称为：XSS）是一种网站应...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/docs/excellent-docs/13-%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97.html 1 代码注入XSS 跨网站指令码（英语：Cross-site scripting，通常简称为：XSS）是一种网站应..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_images_20210506174602.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-03T00:43:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-03T00:43:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210506174602.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210506174856.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210506175834.png\\"],\\"dateModified\\":\\"2024-06-03T00:43:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1 代码注入XSS","slug":"_1-代码注入xss","link":"#_1-代码注入xss","children":[{"level":3,"title":"1.1 如何攻击","slug":"_1-1-如何攻击","link":"#_1-1-如何攻击","children":[]},{"level":3,"title":"1.2 如何防御","slug":"_1-2-如何防御","link":"#_1-2-如何防御","children":[]},{"level":3,"title":"1.3 cookie 如何防范 XSS 攻击","slug":"_1-3-cookie-如何防范-xss-攻击","link":"#_1-3-cookie-如何防范-xss-攻击","children":[]}]},{"level":2,"title":"2 跨站请求伪造CSRF","slug":"_2-跨站请求伪造csrf","link":"#_2-跨站请求伪造csrf","children":[{"level":3,"title":"CSRF怎么获取用户的登录态","slug":"csrf怎么获取用户的登录态","link":"#csrf怎么获取用户的登录态","children":[]},{"level":3,"title":"cookie通常是不能跨域访问的，那问什么会有csrf攻击","slug":"cookie通常是不能跨域访问的-那问什么会有csrf攻击","link":"#cookie通常是不能跨域访问的-那问什么会有csrf攻击","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"3 浏览器同源策略 SOP","slug":"_3-浏览器同源策略-sop","link":"#_3-浏览器同源策略-sop","children":[{"level":3,"title":"3.1 同源","slug":"_3-1-同源","link":"#_3-1-同源","children":[]},{"level":3,"title":"3.2 限制","slug":"_3-2-限制","link":"#_3-2-限制","children":[]},{"level":3,"title":"3.3 绕过跨域","slug":"_3-3-绕过跨域","link":"#_3-3-绕过跨域","children":[]},{"level":3,"title":"3.4 浏览器同源策略与ajax","slug":"_3-4-浏览器同源策略与ajax","link":"#_3-4-浏览器同源策略与ajax","children":[]}]},{"level":2,"title":"4 跨域资源共享 CORS","slug":"_4-跨域资源共享-cors","link":"#_4-跨域资源共享-cors","children":[{"level":3,"title":"4.1 简单请求","slug":"_4-1-简单请求","link":"#_4-1-简单请求","children":[]},{"level":3,"title":"4.2 预检请求","slug":"_4-2-预检请求","link":"#_4-2-预检请求","children":[]},{"level":3,"title":"4.3 CORS 与 cookie","slug":"_4-3-cors-与-cookie","link":"#_4-3-cors-与-cookie","children":[]}]},{"level":2,"title":"5 密码安全","slug":"_5-密码安全","link":"#_5-密码安全","children":[]}],"git":{"updatedTime":1717375429000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"前端安全.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/docs/excellent-docs/13-%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/docs/excellent-docs/13-%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9D%97.html</a></p>\\n<h2>1 代码注入XSS</h2>"}');export{m as comp,h as data};
