import{_ as n,c as s,o as a,a as p}from"./app-f2Cpj3V4.js";const e="/images/s_poetries_work_images_20210503215021.png",t="/images/s_poetries_work_images_20210503215029.png",o="/images/s_poetries_work_images_20210503215039.png",c="/images/s_poetries_work_images_20210503215054.png",l="/images/s_poetries_work_images_20210503215110.png",i="/images/s_poetries_work_images_20210503215117.png",u={},r=p(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/webpack/07-%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E6%96%B0%E7%8E%A9%E6%B3%95%20Vite%20%E4%B8%8A%E6%89%8B%E4%B8%8E%E6%80%9D%E8%80%83.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/webpack/07-%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E6%96%B0%E7%8E%A9%E6%B3%95%20Vite%20%E4%B8%8A%E6%89%8B%E4%B8%8E%E6%80%9D%E8%80%83.html</a></p><h2 id="vite-的定义" tabindex="-1"><a class="header-anchor" href="#vite-的定义"><span>Vite 的定义</span></a></h2><p>Vite 是面向现代浏览器的一个更轻、更快的 Web 应用开发工具，核心基于 ECMAScript 标准原生模块系统（ES Modules）实现。</p><p>表象功能上看，Vite 可以取代基于 Webpack 的 vue-cli 或者 cra 的集成式开发工具，提供全新的一种开发体验。</p><p>具体细节往下看。</p><h3 id="vite-的由来" tabindex="-1"><a class="header-anchor" href="#vite-的由来"><span>Vite 的由来</span></a></h3><p>在此之前，如果我们所开发的应用比较复杂（代码量偏大），使用 Webpack 的开发过程相对没有那么「丝滑」，具体表现为以下两点：</p><ul><li>Webpack Dev Server 冷启动时间会比较长，稍大一点的项目启动开发服务都需要等待 10 - 20 秒；</li><li>Webpack HMR 热更新的反应速度比较慢，修改完代码需要等待编译器全部编译完成才能开始同步到浏览器；</li></ul><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h2><p>这里我们话不多说，先上手体验一下 Vite，然后再来分析其内部的思路和想法。</p><p>Vite 官方目前提供了一个比较简单的脚手架：create-vite-app，可以使用这个脚手架快速创建一个使用 Vite 构建的 Vue.js 应用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">    $ <span class="token function">npm</span> init vite-app <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span></span>
<span class="line">    $ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span></span>
<span class="line">    $ <span class="token function">npm</span> <span class="token function">install</span></span>
<span class="line">    $ <span class="token function">npm</span> run dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 Yarn：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">    $ <span class="token function">yarn</span> create vite-app <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span></span>
<span class="line">    $ <span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span></span>
<span class="line">    $ <span class="token function">yarn</span></span>
<span class="line">    $ <span class="token function">yarn</span> dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>P.S. <code>npm init</code> 或者 <code>yarn create</code> 是这两个包管理工具提供的新功能， 其内部就是自动去安装一个 <code>create-&lt;xxx&gt;</code> 的模块（临时），然后自动执行这个模块中的 bin。 例如: <code>yarn create react-app my- react-app</code> 就相当于先 <code>yarn global add create-react-app</code>，然后自动执行 <code>create-react-app my-react-app</code></p></blockquote><h3 id="对比差异点" tabindex="-1"><a class="header-anchor" href="#对比差异点"><span>对比差异点</span></a></h3><p>打开生成的项目过后，你会发现就是一个很普通的 Vue.js 应用，没有太多特殊的地方。</p><p>不过相比于之前 vue-cli 创建的项目或者是基于 Webpack 搭建的 Vue.js 项目，这里的开发依赖非常简单，只有 <code>vite</code> 和 <code>@vue/compiler-sfc</code>。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite-demo&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;vue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.0.0-rc.1&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;vite&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.0-rc.1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;@vue/compiler-sfc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^3.0.0-rc.1&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>vite</code> 就是我们今天要介绍的主角，而 <code>@vue/compiler-sfc</code> 就是用来编译我们项目中 <code>.vue</code> 结尾的单文件组件（SFC），它取代的就是 Vue.js 2.x 时使用的 <code>vue-template-compiler</code>。</p><p>再者就是 Vue.js 的版本是 3.0。这里尤其需要注意：<strong>Vite 目前只支持 Vue.js 3.0 版本。</strong></p><blockquote><p>如果你想，在后面介绍完实现原理过后，你也可以改造 Vite 让它支持 Vue.js 2.0。</p></blockquote><h3 id="基础体验" tabindex="-1"><a class="header-anchor" href="#基础体验"><span>基础体验</span></a></h3><p>这里我们所安装的 vite 模块提供了两个子命令：</p><ul><li><code>serve</code>：启动一个用于开发的服务器</li><li><code>build</code>：构建整个项目（上线）</li></ul><p>当我们执行 <code>vite serve</code> 的时候，你会发现响应速度非常快，几乎就是秒开。</p><p>可能单独体验你不会有太明显的感觉，你可以对比使用 <code>vue-cli-service</code>（内部还是 Webpack）启动开发服务器，</p><p>当我们对比使用 <code>vue-cli-service serve</code> 的时候，你会有更明显的感觉。</p><p>因为 Webpack Dev Server 在启动时，需要先 build 一遍，而 build 的过程是需要耗费很多时间的。</p><p><img src="`+e+'" alt=""></p><p>而 Vite 则完全不同，当我们执行 <code>vite serve</code> 时，内部直接启动了 Web Server，并不会先编译所有的代码文件。</p><p>那仅仅是启动 Web Server，速度上自然就快了很多。</p><p><img src="'+t+'" alt=""></p><p>但是像 Webpack 这类工具的做法是将所有模块提前编译、打包进 bundle 里，换句话说，不管模块是否会被执行，都要被编译和打包到 bundle 里。随着项目越来越大打包后的 bundle 也越来越大，打包的速度自然也就越来越慢。</p><p>Vite 利用现代浏览器原生支持 ESM 特性，省略了对模块的打包。</p><p>对于需要编译的文件，Vite 采用的是另外一种模式：即时编译。</p><p>也就是说，只有具体去请求某个文件时才会编译这个文件。</p><p>所以，这种「即时编译」的好处主要体现在：按需编译。</p><h3 id="optimize" tabindex="-1"><a class="header-anchor" href="#optimize"><span>Optimize</span></a></h3><p>Vite 还提供了一个目前在帮助列表中并没有呈现的一个子命令：optimize。</p><p>这个命令的作用就是单独的去「优化依赖」。</p><p>所谓的「优化依赖」，指的就是自动去把代码中依赖的第三方模块提前编译出来。</p><p>例如，我们在代码中通过 <code>import</code> 载入了 vue 这个模块，那通过这个命令就会自动将这个模块打包成一个单独的 ESM bundle, 放到 <code>node_modules/.vite_opt_cache</code> 目录中。</p><p>这样后续请求这个文件时就不需要再即时去加载了。</p><h3 id="hmr" tabindex="-1"><a class="header-anchor" href="#hmr"><span>HMR</span></a></h3><p>同样也是模式的问题，热更新的时候，Vite 只需要立即编译当前所修改的文件即可，所以响应速度非常快。</p><p>而 Webpack 修改某个文件过后，会自动以这个文件为入口重写 build 一次，所有的涉及到的依赖也都会被加载一遍，所以反应速度会慢很多。</p><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build"><span>Build</span></a></h3><p>Vite 在生产模式下打包，需要使用 <code>vite build</code> 命令。</p><p>这个命令内部采用的是 Rollup 完成的应用打包，最终还是会把文件都提前编译并打包到一起。</p><p>对于 Code Splitting 需求，Vite 内部采用的就是原生 Dynamic imports 特性实现的，所以打包结果还是只能够支持现代浏览器。</p><p>不过好在 Dynamic imports 特性是可以有 Polyfill 的：https://github.com/GoogleChromeLabs/dynamic-import-polyfill ，也就是说，只要你想，它也可以运行在相对低版本的浏览器中。</p><h3 id="打包-or-不打包" tabindex="-1"><a class="header-anchor" href="#打包-or-不打包"><span>打包 or 不打包</span></a></h3><p>Vite 的出现，引发了另外一个值得我们思考的问题：究竟还有没有必要打包应用？</p><p>之前我们使用 Webpack 打包应用代码，使之成为一个 bundle.js，主要有两个原因：</p><ol><li>浏览器环境并不支持模块化</li><li>零散的模块文件会产生大量的 HTTP 请求</li></ol><p>随着浏览器的对 ES 标准支持的逐渐完善，第一个问题已经慢慢不存在了。现阶段绝大多数浏览器都是支持 ES Modules 的。</p><p><img src="'+o+'" alt=""></p><p>零散模块文件确实会产生大量的 HTTP 请求，而大量的 HTTP 请求在浏览器端就会并发请求资源的问题；</p><p><img src="'+c+'" alt=""></p><blockquote><p>如上图所示，红色圈出来的请求就是并行请求，但是后面的请求就因为域名链接数已超过限制，而被挂起等待了一段时间。</p></blockquote><p>在 HTTP 1.1 的标准下，每次请求都需要单独建立 TCP 链接，经过完整的通讯过程，非常耗时；</p><p><img src="'+l+'" alt=""></p><p>而且每次请求除了请求体中的内容，请求头中也会包含很多数据，大量请求的情况下也会浪费很多资源。</p><p>但是这些问题随着 HTTP 2 的出现，也就不复存在了。</p><p><img src="'+i+`" alt=""></p><p>关于 HTTP 1.1 与 HTTP 2 之间的差异，可以通过这个链接体验：https://http2.akamai.com/demo ，直观感受下 HTTP/2 比 HTTP/1 到底快了多少。</p><p>而且不打包也有一个好处，就是可以把按需加载实现到极致。</p><blockquote><p>关于 HTTP 2 的详细介绍，可以参考：</p><ul><li>https://blog.fundebug.com/2019/03/07/understand-http2-and-http3/</li><li>https://www.digitalocean.com/community/tutorials/http-1-1-vs- http-2-what-s-the-difference</li></ul></blockquote><h3 id="开箱即用" tabindex="-1"><a class="header-anchor" href="#开箱即用"><span>开箱即用</span></a></h3><ul><li>TypeScript - 内置支持</li><li>less/sass/stylus/postcss - 内置支持（需要单独安装所对应的编译器）</li></ul><h3 id="特性小结" tabindex="-1"><a class="header-anchor" href="#特性小结"><span>特性小结</span></a></h3><p>Vite 带来的优势主要体现在提升开发者在开发过程中的体验。</p><ul><li>Dev Server 无需等待，即时启动；</li><li>几乎实时的模块热更新；</li><li>所需文件按需编译，避免编译用不到的文件；</li><li>开箱即用，避免各种 Loader 和 Plugin 的配置；</li></ul><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h2><p>Vite 的核心功能：Static Server + Compile + HMR</p><p>核心思路：</p><ol><li>将当前项目目录作为静态文件服务器的根目录</li><li>拦截部分文件请求 1. 处理代码中 import node_modules 中的模块 2. 处理 vue 单文件组件（SFC）的编译</li><li>通过 WebSocket 实现 HMR</li></ol><h3 id="手写实现" tabindex="-1"><a class="header-anchor" href="#手写实现"><span>手写实现</span></a></h3><p>详细参考 https://github.com/zce/vite-essentials</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    #<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> Readable <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;stream&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> send <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-send&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> compilerSfc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@vue/compiler-sfc&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> cwd <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">streamToString</span> <span class="token operator">=</span> <span class="token parameter">stream</span> <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        stream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 重写请求路径，/@modules/xxx =&gt; /node_modules/</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/@modules/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> moduleName <span class="token operator">=</span> ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// =&gt; vue</span></span>
<span class="line">        <span class="token keyword">const</span> modulePkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>cwd<span class="token punctuation">,</span> <span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> <span class="token string">&#39;package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        ctx<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/node_modules&#39;</span><span class="token punctuation">,</span> moduleName<span class="token punctuation">,</span> modulePkg<span class="token punctuation">.</span>module<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 根据请求路径得到相应文件 /index.html</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// ctx.path // http://localhost:3080/</span></span>
<span class="line">      <span class="token comment">// ctx.body = &#39;my-vite&#39;</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">send</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">root</span><span class="token operator">:</span> cwd<span class="token punctuation">,</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 有可能还需要额外处理相应结果</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// .vue 文件请求的处理，即时编译</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">streamToString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> descriptor <span class="token punctuation">}</span> <span class="token operator">=</span> compilerSfc<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> code</span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          code <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>script<span class="token punctuation">.</span>content</span>
<span class="line">          code <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">export\\s+default\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;const __script = &#39;</span><span class="token punctuation">)</span></span>
<span class="line">          code <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">      import { render as __render } from &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ctx<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?type=template&quot;</span>
<span class="line">      __script.render = __render</span>
<span class="line">      export default __script</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">          <span class="token comment">// console.log(code)</span></span>
<span class="line">          ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;application/javascript&#39;</span></span>
<span class="line">          ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> Readable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">const</span> templateRender <span class="token operator">=</span> compilerSfc<span class="token punctuation">.</span><span class="token function">compileTemplate</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">source</span><span class="token operator">:</span> descriptor<span class="token punctuation">.</span>template<span class="token punctuation">.</span>content</span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">          code <span class="token operator">=</span> templateRender<span class="token punctuation">.</span>code</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        ctx<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;application/javascript&#39;</span></span>
<span class="line">        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> Readable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 替换代码中特殊位置</span></span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;application/javascript&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">streamToString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>body<span class="token punctuation">)</span></span>
<span class="line">        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> contents</span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(from\\s+[&#39;&quot;])(?![\\.\\/])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1/@modules/&#39;</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">process\\.env\\.NODE_ENV</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&quot;production&quot;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3080</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Server running @ http://localhost:3080&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阅读全文</p>`,82),k=[r];function d(m,v){return a(),s("div",null,k)}const g=n(u,[["render",d],["__file","Webpack-07-前端构建新玩法-Vite-上手与思考.html.vue"]]),h=JSON.parse('{"path":"/Webpack-07-%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E6%96%B0%E7%8E%A9%E6%B3%95-Vite-%E4%B8%8A%E6%89%8B%E4%B8%8E%E6%80%9D%E8%80%83.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/webpack/07-%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E6%96%B0%E7%8E%A9%E6%B3%95%20Vite%20%E4%B8%8A%E6%89%8B%E4%B8%8E%E6%80%9D%E8%8...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/Webpack-07-%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E6%96%B0%E7%8E%A9%E6%B3%95-Vite-%E4%B8%8A%E6%89%8B%E4%B8%8E%E6%80%9D%E8%80%83.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/webpack/07-%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E6%96%B0%E7%8E%A9%E6%B3%95%20Vite%20%E4%B8%8A%E6%89%8B%E4%B8%8E%E6%80%9D%E8%8..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215021.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215021.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215029.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215039.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215054.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215110.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215117.png\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Vite 的定义","slug":"vite-的定义","link":"#vite-的定义","children":[{"level":3,"title":"Vite 的由来","slug":"vite-的由来","link":"#vite-的由来","children":[]}]},{"level":2,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[{"level":3,"title":"对比差异点","slug":"对比差异点","link":"#对比差异点","children":[]},{"level":3,"title":"基础体验","slug":"基础体验","link":"#基础体验","children":[]},{"level":3,"title":"Optimize","slug":"optimize","link":"#optimize","children":[]},{"level":3,"title":"HMR","slug":"hmr","link":"#hmr","children":[]},{"level":3,"title":"Build","slug":"build","link":"#build","children":[]},{"level":3,"title":"打包 or 不打包","slug":"打包-or-不打包","link":"#打包-or-不打包","children":[]},{"level":3,"title":"开箱即用","slug":"开箱即用","link":"#开箱即用","children":[]},{"level":3,"title":"特性小结","slug":"特性小结","link":"#特性小结","children":[]}]},{"level":2,"title":"实现原理","slug":"实现原理","link":"#实现原理","children":[{"level":3,"title":"手写实现","slug":"手写实现","link":"#手写实现","children":[]}]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"Webpack-07-前端构建新玩法-Vite-上手与思考.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/webpack/07-%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E6%96%B0%E7%8E%A9%E6%B3%95%20Vite%20%E4%B8%8A%E6%89%8B%E4%B8%8E%E6%80%9D%E8%80%83.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/webpack/07-%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E6%96%B0%E7%8E%A9%E6%B3%95%20Vite%20%E4%B8%8A%E6%89%8B%E4%B8%8E%E6%80%9D%E8%80%83.html</a></p>"}');export{g as comp,h as data};
