import{_ as s,c as n,o as a,a as e}from"./app-TapK6V6W.js";const t="/images/s_poetries_work_gitee_2020_07_74.png",p="/images/s_poetries_work_gitee_2020_07_75.png",o="/images/s_poetries_work_gitee_2020_07_76.png",c={},i=e(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/comprehensive/02-setTimeout%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/comprehensive/02-setTimeout%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html</a></p><blockquote><p><code>setTimeout</code>，它就是一个定时器，用来指定某个函数在多少毫秒之后执行</p></blockquote><h3 id="settimeout用法" tabindex="-1"><a class="header-anchor" href="#settimeout用法"><span>setTimeout用法</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> timeoutID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">[</span><span class="token punctuation">,</span> delay<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> timeoutID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">[</span><span class="token punctuation">,</span> delay<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> timeoutID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span><span class="token punctuation">,</span> delay<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一个参数为函数或可执行的字符串(比如<code>alert(&#39;test&#39;)</code>,此法不建议使用)</li><li>第二个参数为延迟毫秒数，可选的，默认值为<code>0.</code></li><li>第三个及后面的参数为函数的入参。</li><li><code>setTimeout</code> 的返回值是一个数字，这个值为<code>timeoutID</code>，可以用于取消该定时器</li></ul><h3 id="settimeout在浏览器中的实现" tabindex="-1"><a class="header-anchor" href="#settimeout在浏览器中的实现"><span>setTimeout在浏览器中的实现</span></a></h3><ul><li>浏览器渲染进程中所有运行在主线程上的任务都需要先添加到消息队列，然后事件循环系统再按照顺序执行消息队列中的任务。</li><li>在 Chrome 中除了正常使用的消息队列之外，还有另外一个消息队列(我们可以称为延迟队列)，这个队列中维护了需要延迟执行的任务列表，包括了定时器和 Chromium 内部一些需要延迟执行的任务。所以当通过 JavaScript 创建一个定时器时，渲染进程会将该定时器的回调任务添加到延迟队列中。</li></ul><p>比如这样的一段代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> timeoutID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当通过 JavaScript 调用 <code>setTimeout</code> 设置回调函数的时候，渲染进程将会创建一个回调任务，包含了回调函数foo、当前发起时间、延迟执行时间等，其模拟代码如下所示</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    struct DelayTask<span class="token punctuation">{</span></span>
<span class="line">      int64 id；</span>
<span class="line">      CallBackFunction cbf<span class="token punctuation">;</span></span>
<span class="line">      int start_time<span class="token punctuation">;</span></span>
<span class="line">      int delay_time<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    DelayTask timerTask<span class="token punctuation">;</span></span>
<span class="line">    timerTask<span class="token punctuation">.</span>cbf <span class="token operator">=</span> foo<span class="token punctuation">;</span></span>
<span class="line">    timerTask<span class="token punctuation">.</span>start_time <span class="token operator">=</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前时间</span></span>
<span class="line">    timerTask<span class="token punctuation">.</span>delay_time <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//设置延迟执行时间</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建好回调任务之后，就会将该任务添加到延迟执行队列中。那这个回调任务，什么时候会被执行呢？</li><li>浏览器中有个函数是专门用来处理延迟执行任务的，暂且称为ProcessDelayTask，它的主要逻辑如下：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">void</span> <span class="token function">ProcessTimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//从delayed_incoming_queue中取出已经到期的定时器任务</span></span>
<span class="line">      <span class="token comment">//依次执行这些任务</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    TaskQueue task_queue；</span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">ProcessTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    bool keep_running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">MainTherad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//执行消息队列中的任务</span></span>
<span class="line">        Task task <span class="token operator">=</span> task_queue<span class="token punctuation">.</span><span class="token function">takeTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">ProcessTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">//执行延迟队列中的任务</span></span>
<span class="line">        <span class="token function">ProcessDelayTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>keep_running<span class="token punctuation">)</span> <span class="token comment">//如果设置了退出标志，那么直接退出线程循环</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span> </span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是，当浏览器处理完消息队列中的一个任务之后，就会开始执行 <code>ProcessDelayTask</code> 函数。<code>ProcessDelayTask</code> 函数会根据发起时间和延迟时间计算出到期的任务，然后依次执行这些到期的任务。等到期的任务执行完成之后，再继续下一个循环过程。这样定时器就实现了，从这个过程也可以明显看出，<strong>定时器并不一定是准时延后执行的</strong> 。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ol><li>如果当前任务执行时间过久，会延迟到期定时器任务的执行</li></ol><blockquote><p>在使用 setTimeout 的时候，有很多因素会导致回调函数执行比设定的预期值要久，其中一个就是上文说到的，如果处理的当前任务耗时过长，定时器设置的任务就会被延后执行。</p></blockquote><p>比如在浏览器中执行这样一段代码，并打印执行时间</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> endTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;cost time&#39;</span><span class="token punctuation">,</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">8</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如图：</p><p><img src="`+t+`" alt=""></p><blockquote><p>从结果可以看到，执行 <code>foo</code> 函数所消耗的时长是 <code>365</code> 毫秒，这也就意味着通过 <code>setTimeout</code> 设置的任务被推迟了 <code>365</code> 毫秒才执行，而设置 <code>setTimeout</code> 的回调延迟时间是 <code>0</code></p></blockquote><ol start="2"><li>使用 setTimeout 设置的回调函数中的 this 环境不是指向回调函数</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> name<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> MyObj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">test</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function-variable function">showName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span>MyObj<span class="token punctuation">.</span>showName<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">    MyObj<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">//先输出 2 1</span></span>
<span class="line">    <span class="token comment">// 1s后输出 1 undefined </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里其实认真分析一下，也很好理解这个 <code>this</code> 的指向。按照 <code>this</code> 的规定，如果是对象调用<code>(obj.fn())</code>，那么this指向该对象,因此<code>MyObj.showName()</code>输出的是 <code>MyObj</code> 里面的值。在 <code>setTimeout</code> 中，入参是<code>MyObj.showName</code>，这里是把这个值传了进去，可以理解为：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> fn <span class="token operator">=</span> MyObj<span class="token punctuation">.</span>showName</span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这样看，在<code>setTimeout</code>里面，当执行到的时候，实际上就是在<code>window</code>下<code>执行</code>fn<code>，此时的</code>this<code>，就指向了</code>window\`,而不是原来的函数。</p></blockquote><ol start="3"><li>setTimeout 存在嵌套调用问题</li></ol><blockquote><p>如果 <code>setTimeout</code> 存在嵌套调用，调用超过<code>5</code>次后，系统会设置最短执行时间间隔为 <code>4</code> 毫秒。</p></blockquote><p>我们可以在浏览器粗略测试一下，有如下代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">let</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">      <span class="token keyword">const</span> endTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;cost time&#39;</span><span class="token punctuation">,</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span></span>
<span class="line">      startTime <span class="token operator">=</span> startTime</span>
<span class="line">      <span class="token function">setTimeout</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+`" alt=""></p><blockquote><p>从结果可以看出，前面五次调用的时间间隔比较小，嵌套调用超过五次以上，后面每次的调用最小时间间隔是 <code>4</code> 毫秒(我运行的结果，间隔基本是 <code>5ms</code>，考虑有代码执行的计算误差)。</p></blockquote><blockquote><p>之所以出现这样的情况，是因为在 <code>Chrome</code> 中，定时器被嵌套调用 <code>5</code> 次以上，系统会判断该函数方法被阻塞了，如果定时器的调用时间间隔小于 <code>4</code> 毫秒，那么浏览器会将每次调用的时间间隔设置为 <code>4</code> 毫秒。可以看下源码(https://cs.chromium.org/chromium/src/third_party/blink/renderer/core/frame/dom_timer.cc)</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">static</span> <span class="token keyword">const</span> int kMaxTimerNestingLevel <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Chromium uses a minimum timer interval of 4ms. We&#39;d like to go</span></span>
<span class="line">    <span class="token comment">// lower; however, there are poorly coded websites out there which do</span></span>
<span class="line">    <span class="token comment">// create CPU-spinning loops.  Using 4ms prevents the CPU from</span></span>
<span class="line">    <span class="token comment">// spinning too busily and provides a balance between CPU spinning and</span></span>
<span class="line">    <span class="token comment">// the smallest possible interval timer.</span></span>
<span class="line">    <span class="token keyword">static</span> constexpr base<span class="token operator">:</span><span class="token operator">:</span>TimeDelta kMinimumInterval <span class="token operator">=</span> base<span class="token operator">:</span><span class="token operator">:</span>TimeDelta<span class="token operator">:</span><span class="token operator">:</span><span class="token function">FromMilliseconds</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>所以，一些实时性较高的需求就不太适合使用 <code>setTimeout</code> 了，比如你用 <code>setTimeout</code> 来实现 <code>JavaScript</code>动画就不一定是一个很好的主意。</p></blockquote><ol start="4"><li>未激活的页面，setTimeout 执行最小间隔是 1000 毫秒</li></ol><blockquote><p>如果标签不是当前的激活标签，那么定时器最小的时间间隔是 1000 毫秒，目的是为了优化后台页面的加载损耗以及降低耗电量。这一点你在使用定时器的时候要注意。</p></blockquote><ol start="5"><li>延时执行时间有最大值</li></ol><blockquote><p>Chrome、Safari、Firefox 都是以 <code>32</code> 个 <code>bit</code> 来存储延时值的，<code>32bit</code> 最大只能存放的数字是 <code>2147483647</code> 毫秒，这就意味着，如果 setTimeout 设置的延迟值大于 <code>2147483647</code> 毫秒（大约 <code>24.8</code> 天）时就会溢出，这导致定时器会被立即执行。如：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">let</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> endTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;cost time&#39;</span><span class="token punctuation">,</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">var</span> timerID <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span><span class="token number">2147483648</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会被立即调用执行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><p><img src="`+o+'" alt=""></p><blockquote><p>运行后可以看到，这段代码是立即被执行的。但如果将延时值修改为小于 <code>2147483647</code> 毫秒的某个值，那么执行时就没有问题了。</p></blockquote><p>阅读全文</p>',45),l=[i];function u(r,d){return a(),n("div",null,l)}const m=s(c,[["render",u],["__file","综合-02-setTimeout实现原理和使用注意.html.vue"]]),v=JSON.parse('{"path":"/%E7%BB%BC%E5%90%88-02-setTimeout%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/comprehensive/02-setTimeout%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html setTimeout，...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/%E7%BB%BC%E5%90%88-02-setTimeout%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/comprehensive/02-setTimeout%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html setTimeout，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_gitee_2020_07_74.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2020_07_74.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2020_07_75.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2020_07_76.png\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"setTimeout用法","slug":"settimeout用法","link":"#settimeout用法","children":[]},{"level":3,"title":"setTimeout在浏览器中的实现","slug":"settimeout在浏览器中的实现","link":"#settimeout在浏览器中的实现","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"综合-02-setTimeout实现原理和使用注意.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/comprehensive/02-setTimeout%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/comprehensive/02-setTimeout%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F.html</a></p>"}');export{m as comp,v as data};
