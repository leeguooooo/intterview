import{_ as n,c as s,o as a,a as e}from"./app-DPCMlS-8.js";const p="/images/s_poetries_work_gitee_2020_07_77.jpeg",t={},o=e('<p>原文链接: <a href="https://interview.poetries.top/principle-docs/vue/01-%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/vue/01-%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html</a></p><h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识"><span>基础知识</span></a></h2><h3 id="钩子函数" tabindex="-1"><a class="header-anchor" href="#钩子函数"><span>钩子函数</span></a></h3><blockquote><p>其实和回调是一个概念，当系统执行到某处时，检查是否有<code>hook</code>(钩子)，有的话就会执行回调。</p></blockquote><p>通俗的说，<code>hook</code>就是在程序运行中，在某个特定的位置，框架的开发者设计好了一个钩子来告诉我们当前程序已经运行到特定的位置了，会触发一个回调函数，并提供给我们，让我们可以在生命周期的特定阶段进行相关业务代码的编写</p><p><img src="'+p+`" alt=""></p><p><strong>总的来说，Vue的生命周期可以分为以下八个阶段</strong></p><ul><li><code>beforeCreate</code> 实例创建前</li><li><code>created</code> 实例创建完成</li><li><code>beforeMount</code> 挂载前</li><li><code>mounted</code> 挂载完成</li><li><code>beforeUpdate</code> 更新前</li><li><code>updated</code> 更新完成</li><li><code>beforeDestory</code> 销毁前</li><li><code>destoryed</code> 销毁完成</li></ul><h3 id="beforecreate" tabindex="-1"><a class="header-anchor" href="#beforecreate"><span>beforeCreate</span></a></h3><blockquote><p>这个钩子是<code>new Vue()</code>之后触发的第一个钩子，在当前阶段中<code>data</code>、<code>methods</code>、<code>computed</code>以及<code>watch</code>上的数据和方法均不能被访问。</p></blockquote><h3 id="created" tabindex="-1"><a class="header-anchor" href="#created"><span>created</span></a></h3><blockquote><p>这个钩子在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发<code>updated</code>函数。可以做一些初始数据的获取，在当前阶段无法与<code>Dom</code>进行交互，如果你非要想，可以通过<code>vm.$nextTick</code>来访问<code>Dom</code>。</p></blockquote><h3 id="beforemount" tabindex="-1"><a class="header-anchor" href="#beforemount"><span>beforeMount</span></a></h3><blockquote><p>这个钩子发生在挂载之前，在这之前<code>template</code>模板已导入渲染函数编译。而当前阶段虚拟<code>Dom</code>已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发<code>updated</code></p></blockquote><h3 id="mounted" tabindex="-1"><a class="header-anchor" href="#mounted"><span>mounted</span></a></h3><blockquote><p>这个钩子在挂载完成后发生，在当前阶段，真实的<code>Dom</code>挂载完毕，数据完成双向绑定，可以访问到<code>Dom</code>节点，使用<code>$refs</code>属性对<code>Dom</code>进行操作。也可以向后台发送请求，拿到返回数据</p></blockquote><h3 id="beforeupdate" tabindex="-1"><a class="header-anchor" href="#beforeupdate"><span>beforeUpdate</span></a></h3><blockquote><p>这个钩子发生在更新之前，也就是响应式数据发生更新，虚拟dom重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染</p></blockquote><h3 id="updated" tabindex="-1"><a class="header-anchor" href="#updated"><span>updated</span></a></h3><blockquote><p>这个钩子发生在更新完成之后，当前阶段组件Dom已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新</p></blockquote><h3 id="beforedestroy" tabindex="-1"><a class="header-anchor" href="#beforedestroy"><span>beforeDestroy</span></a></h3><blockquote><p>这个钩子发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</p></blockquote><h3 id="destroyed" tabindex="-1"><a class="header-anchor" href="#destroyed"><span>destroyed</span></a></h3><blockquote><p>这个钩子发生在实例销毁之后，这个时候只剩下了dom空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁</p></blockquote><p><strong>注意点</strong></p><blockquote><p>在使用生命周期时有几点注意事项需要我们牢记</p></blockquote><p>1.除了<code>beforeCreate</code>和<code>created</code>钩子之外，其他钩子均在服务器端渲染期间不被调用。 2.上文曾提到过，在<code>updated</code>的时候千万不要去修改<code>data</code>里面赋值的数据，否则会导致死循环。 3.<code>Vue</code>的所有生命周期函数都是自动绑定到<code>this</code>的上下文上。所以，你这里使用箭头函数的话，就会出现<code>this</code>指向的父级作用域，就会报错。原因下面源码部分会讲解</p><h2 id="源码解读" tabindex="-1"><a class="header-anchor" href="#源码解读"><span>源码解读</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// src/core/instance/lifecycle.js</span></span>
<span class="line">    <span class="token comment">// callhook 函数的功能就是在当前vue组件实例中，调用某个生命周期钩子注册的所有回调函数。</span></span>
<span class="line">    <span class="token comment">// vm:Vue实例</span></span>
<span class="line">    <span class="token comment">// hook:生命周期名字</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">callHook</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">vm</span><span class="token operator">:</span> Component<span class="token punctuation">,</span> <span class="token literal-property property">hook</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">const</span> handlers <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">[</span>hook<span class="token punctuation">]</span> </span>
<span class="line">      <span class="token comment">// 初始化合并 options 的过程 、，将各个生命周期函数合并到 options 里</span></span>
<span class="line">      <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hook<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> hook</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> handlers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>handlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_hasHookEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vm<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;hook:&#39;</span> <span class="token operator">+</span> hook<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// src/core/util/error.js</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">invokeWithErrorHandling</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token parameter"><span class="token literal-property property">handler</span><span class="token operator">:</span> Function<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">context</span><span class="token operator">:</span> any<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">vm</span><span class="token operator">:</span> any<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">info</span><span class="token operator">:</span> string</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> res</span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        res <span class="token operator">=</span> args <span class="token operator">?</span> <span class="token function">handler</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">handler</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">.</span>_isVue <span class="token operator">&amp;&amp;</span> <span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">.</span>_handled<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          res<span class="token punctuation">.</span>_handled <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> res</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们从上面的代码中可以看到<code>callHook</code>中调用了<code>invokeWithErrorHandling</code>方法，在<code>invokeWithErrorHandling</code>方法中，使用了<code>apply</code>和<code>call</code>改变了<code>this</code>指向，而在箭头函数中<code>this</code>指向是无法改变的，所以我们在编写生命周期函数的时候不能使用箭头函数</p></blockquote><h3 id="beforecreate和created" tabindex="-1"><a class="header-anchor" href="#beforecreate和created"><span>beforeCreate和created</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// src/core/instance/init</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">Vue</span><span class="token operator">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options<span class="token operator">?</span><span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token literal-property property">vm</span><span class="token operator">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="line">        <span class="token operator">...</span></span>
<span class="line">        <span class="token comment">// 合并选项部分已省略</span></span>
<span class="line">        </span>
<span class="line">        <span class="token function">initLifecycle</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token comment">// 主要就是给vm对象添加了 $parent、$root、$children 属性，以及一些其它的生命周期相关的标识</span></span>
<span class="line">        <span class="token function">initEvents</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment">// 初始化事件相关的属性</span></span>
<span class="line">        <span class="token function">initRender</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>  <span class="token comment">// vm 添加了一些虚拟 dom、slot 等相关的属性和方法</span></span>
<span class="line">        <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;beforeCreate&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 调用 beforeCreate 钩子</span></span>
<span class="line">        <span class="token comment">//下面 initInjections(vm) 和 initProvide(vm) 两个配套使用，用于将父组件 _provided 中定义的值，通过 inject 注入到子组件，且这些属性不会被观察</span></span>
<span class="line">        <span class="token function">initInjections</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> </span>
<span class="line">        <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>   <span class="token comment">// props、methods、data、watch、computed等数据初始化</span></span>
<span class="line">        <span class="token function">initProvide</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> </span>
<span class="line">        <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;created&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 调用 created 钩子</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// src/core/instance/state</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initState</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">vm</span><span class="token operator">:</span> Component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      vm<span class="token punctuation">.</span>_watchers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options</span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token function">initProps</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>props<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>methods<span class="token punctuation">)</span> <span class="token function">initMethods</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>methods<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">observe</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* asRootData */</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token function">initComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>computed<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>watch <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>watch <span class="token operator">!==</span> nativeWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>watch<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们可以看到<code>beforeCreate</code>钩子调用是在<code>initState</code>之前的，而从上面的第二段代码我们可以看出<code>initState</code>的作用是对<code>props</code>、<code>methods</code>、<code>data</code>、<code>computed</code>、<code>watch</code>等属性做初始化处理。</li><li>通过阅读源码，我们更加清楚的明白了在beforeCreate钩子的时候我们没有对<code>props</code>、<code>methods</code>、<code>data</code>、<code>computed</code>、<code>watch</code>上的数据的访问权限。在<code>created</code>中才可以</li></ul><h3 id="beforemount和mounted" tabindex="-1"><a class="header-anchor" href="#beforemount和mounted"><span>beforeMount和mounted</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// mountComponent 核心就是先实例化一个渲染Watcher</span></span>
<span class="line">    <span class="token comment">// 在它的回调函数中会调用 updateComponent 方法</span></span>
<span class="line">    <span class="token comment">// 两个核心方法 vm._render(生成虚拟Dom) 和 vm._update(映射到真实Dom)</span></span>
<span class="line">    <span class="token comment">// src/core/instance/lifecycle</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span> <span class="token punctuation">(</span></span>
<span class="line">      <span class="token parameter"><span class="token literal-property property">vm</span><span class="token operator">:</span> Component<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token operator">?</span>Element<span class="token punctuation">,</span></span>
<span class="line">      hydrating<span class="token operator">?</span><span class="token operator">:</span> boolean</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token operator">:</span> Component <span class="token punctuation">{</span></span>
<span class="line">      vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> el</span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>render <span class="token operator">=</span> createEmptyVNode</span>
<span class="line">        <span class="token operator">...</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;beforeMount&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 调用 beforeMount 钩子</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">let</span> updateComponent</span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">updateComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 将虚拟 Dom 映射到真实 Dom 的函数。</span></span>
<span class="line">        <span class="token comment">// vm._update 之前会先调用 vm._render() 函数渲染 VNode</span></span>
<span class="line">          <span class="token operator">...</span></span>
<span class="line">          <span class="token keyword">const</span> vnode <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token operator">...</span></span>
<span class="line">          vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">updateComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">before</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token comment">// 先判断是否 mouted 完成 并且没有被 destroyed</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>_isDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;beforeUpdate&#39;</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* isRenderWatcher */</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vm<span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;mounted&#39;</span><span class="token punctuation">)</span>  <span class="token comment">//调用 mounted 钩子</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> vm</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过上面的代码，我们可以看出在执行<code>vm._render()</code>函数渲染<code>VNode</code>之前，执行了 <code>beforeMount</code>钩子函数，在执行完 <code>vm._update()</code> 把<code>VNode patch</code>到真实Dom后，执行 <code>mouted</code>钩子。也就明白了为什么直到<code>mounted</code>阶段才名正言顺的拿到了Dom</p></blockquote><h3 id="beforeupdate和updated" tabindex="-1"><a class="header-anchor" href="#beforeupdate和updated"><span>beforeUpdate和updated</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">      <span class="token comment">// src/core/instance/lifecycle</span></span>
<span class="line">     <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">before</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token comment">// 先判断是否 mouted 完成 并且没有被 destroyed</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>_isDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;beforeUpdate&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 调用 beforeUpdate 钩子</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment">/* isRenderWatcher */</span><span class="token punctuation">)</span></span>
<span class="line">     </span>
<span class="line">     <span class="token comment">// src/core/observer/scheduler </span></span>
<span class="line">     <span class="token keyword">function</span> <span class="token function">callUpdatedHooks</span> <span class="token punctuation">(</span><span class="token parameter">queue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">let</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span>length</span>
<span class="line">       <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">         <span class="token keyword">const</span> watcher <span class="token operator">=</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">         <span class="token keyword">const</span> vm <span class="token operator">=</span> watcher<span class="token punctuation">.</span>vm</span>
<span class="line">         <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_watcher <span class="token operator">===</span> watcher <span class="token operator">&amp;&amp;</span> vm<span class="token punctuation">.</span>_isMounted <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>_isDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">           <span class="token comment">// 只有满足当前 watcher 为 vm._watcher（也就是当前的渲染watcher）</span></span>
<span class="line">           <span class="token comment">// 以及组件已经 mounted 并且没有被 destroyed 才会执行 updated 钩子函数。</span></span>
<span class="line">           <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;updated&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 调用 updated 钩子</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一段代码就是在<code>beforeMount</code>和<code>mounted</code>钩子中间出现的，那么<code>watcher</code>中究竟做了些什么呢？</li><li>第二段代码的<code>callUpdatedHooks</code>函数中什么时候才可以满足条件并执行<code>updated</code>呢？我们来接着往下看。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// src/instance/observer/watcher.js</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token function">constructor</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token literal-property property">vm</span><span class="token operator">:</span> Component<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">expOrFn</span><span class="token operator">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">cb</span><span class="token operator">:</span> Function<span class="token punctuation">,</span></span>
<span class="line">        options<span class="token operator">?</span><span class="token operator">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// 在它的构造函数里会判断 isRenderWatcher，</span></span>
<span class="line">        <span class="token comment">// 接着把当前 watcher 的实例赋值给 vm._watcher</span></span>
<span class="line">        isRenderWatcher<span class="token operator">?</span><span class="token operator">:</span> boolean</span>
<span class="line">      <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 还把当前 wathcer 实例 push 到 vm._watchers 中，</span></span>
<span class="line">        <span class="token comment">// vm._watcher 是专门用来监听 vm 上数据变化然后重新渲染的，</span></span>
<span class="line">        <span class="token comment">// 所以它是一个渲染相关的 watcher，因此在 callUpdatedHooks 函数中，</span></span>
<span class="line">        <span class="token comment">// 只有 vm._watcher 的回调执行完毕后，才会执行 updated 钩子函数</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>isRenderWatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          vm<span class="token punctuation">.</span>_watcher <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>看到这里我们明白了<code>Vue</code>是通过<code>watcher</code>来监听实例上的数据变化，进而控制渲染流程</p></blockquote><h3 id="beforedestroy和destroyed" tabindex="-1"><a class="header-anchor" href="#beforedestroy和destroyed"><span>beforeDestroy和destroyed</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">      <span class="token comment">// src/core/instance/lifecycle.js</span></span>
<span class="line">      <span class="token comment">// 在 $destroy 的执行过程中，它会执行 vm.__patch__(vm._vnode, null)</span></span>
<span class="line">      <span class="token comment">// 触发它子组件的销毁钩子函数，这样一层层的递归调用，</span></span>
<span class="line">      <span class="token comment">// 所以 destroy 钩子函数执行顺序是先子后父，和 mounted 过程一样。</span></span>
<span class="line">      <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$destroy</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token literal-property property">vm</span><span class="token operator">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isBeingDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;beforeDestroy&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 调用 beforeDestroy 钩子</span></span>
<span class="line">        vm<span class="token punctuation">.</span>_isBeingDestroyed <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token comment">// 一些销毁工作</span></span>
<span class="line">        <span class="token keyword">const</span> parent <span class="token operator">=</span> vm<span class="token punctuation">.</span>$parent</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>parent<span class="token punctuation">.</span>_isBeingDestroyed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>abstract<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">remove</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>$children<span class="token punctuation">,</span> vm<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 拆卸 watchers</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">let</span> i <span class="token operator">=</span> vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span>length</span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">...</span></span>
<span class="line">        vm<span class="token punctuation">.</span>_isDestroyed <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token comment">// 调用当前 rendered tree 上的 destroy 钩子</span></span>
<span class="line">        <span class="token comment">// 发现子组件，会先去销毁子组件</span></span>
<span class="line">        vm<span class="token punctuation">.</span><span class="token function">__patch__</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_vnode<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;destroyed&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 调用 destroyed 钩子</span></span>
<span class="line">        <span class="token comment">// 关闭所有实例侦听器。</span></span>
<span class="line">        vm<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 删除 __vue__ 引用</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>__vue__ <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 释放循环引用</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          vm<span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过上面的代码，我们了解了组件销毁阶段的拆卸过程，其中会执行一个<code>__patch__</code>函数</li><li>除了这八种钩子外，我们在官网也可以查阅到另外几种不常用的钩子，这里列举出来</li></ul><h2 id="几种不常用的钩子" tabindex="-1"><a class="header-anchor" href="#几种不常用的钩子"><span>几种不常用的钩子</span></a></h2><h3 id="activated" tabindex="-1"><a class="header-anchor" href="#activated"><span>activated</span></a></h3><blockquote><p><code>keep-alive</code> 组件激活时调用，该钩子在服务器端渲染期间不被调用。</p></blockquote><h3 id="deactivated" tabindex="-1"><a class="header-anchor" href="#deactivated"><span>deactivated</span></a></h3><blockquote><p><code>keep-alive</code> 组件停用时调用，该钩子在服务器端渲染期间不被调用。</p></blockquote><h3 id="errorcaptured" tabindex="-1"><a class="header-anchor" href="#errorcaptured"><span>errorCaptured</span></a></h3><ul><li>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 <code>false</code> 以阻止该错误继续向上传播</li><li>你可以在此钩子中修改组件的状态。因此在模板或渲染函数中设置其它内容的短路条件非常重要，它可以防止当一个错误被捕获时该组件进入一个无限的渲染循环。</li></ul><p>阅读全文</p>`,52),c=[o];function l(i,u){return a(),s("div",null,c)}const d=n(t,[["render",l],["__file","Vue源码.html.vue"]]),k=JSON.parse('{"path":"/Vue%E6%BA%90%E7%A0%81.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/vue/01-%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html 基础知识 钩子函数 其实和回调是一个概念，当系统执行到某...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/Vue%E6%BA%90%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/vue/01-%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html 基础知识 钩子函数 其实和回调是一个概念，当系统执行到某..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_gitee_2020_07_77.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-05T18:28:42.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-05T18:28:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2020_07_77.jpeg\\"],\\"dateModified\\":\\"2024-06-05T18:28:42.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"基础知识","slug":"基础知识","link":"#基础知识","children":[{"level":3,"title":"钩子函数","slug":"钩子函数","link":"#钩子函数","children":[]},{"level":3,"title":"beforeCreate","slug":"beforecreate","link":"#beforecreate","children":[]},{"level":3,"title":"created","slug":"created","link":"#created","children":[]},{"level":3,"title":"beforeMount","slug":"beforemount","link":"#beforemount","children":[]},{"level":3,"title":"mounted","slug":"mounted","link":"#mounted","children":[]},{"level":3,"title":"beforeUpdate","slug":"beforeupdate","link":"#beforeupdate","children":[]},{"level":3,"title":"updated","slug":"updated","link":"#updated","children":[]},{"level":3,"title":"beforeDestroy","slug":"beforedestroy","link":"#beforedestroy","children":[]},{"level":3,"title":"destroyed","slug":"destroyed","link":"#destroyed","children":[]}]},{"level":2,"title":"源码解读","slug":"源码解读","link":"#源码解读","children":[{"level":3,"title":"beforeCreate和created","slug":"beforecreate和created","link":"#beforecreate和created","children":[]},{"level":3,"title":"beforeMount和mounted","slug":"beforemount和mounted","link":"#beforemount和mounted","children":[]},{"level":3,"title":"beforeUpdate和updated","slug":"beforeupdate和updated","link":"#beforeupdate和updated","children":[]},{"level":3,"title":"beforeDestroy和destroyed","slug":"beforedestroy和destroyed","link":"#beforedestroy和destroyed","children":[]}]},{"level":2,"title":"几种不常用的钩子","slug":"几种不常用的钩子","link":"#几种不常用的钩子","children":[{"level":3,"title":"activated","slug":"activated","link":"#activated","children":[]},{"level":3,"title":"deactivated","slug":"deactivated","link":"#deactivated","children":[]},{"level":3,"title":"errorCaptured","slug":"errorcaptured","link":"#errorcaptured","children":[]}]}],"git":{"updatedTime":1717612122000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":2}]},"autoDesc":true,"filePathRelative":"Vue源码.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/vue/01-%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/vue/01-%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html</a></p>"}');export{d as comp,k as data};
