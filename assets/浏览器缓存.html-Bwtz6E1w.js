import{_ as e,c as t,o as l,a as r}from"./app-C8bJcRtK.js";const o={},i=r('<h1 id="浏览器缓存" tabindex="-1"><a class="header-anchor" href="#浏览器缓存"><span>浏览器缓存</span></a></h1><h2 id="强缓存和协商缓存" tabindex="-1"><a class="header-anchor" href="#强缓存和协商缓存"><span>强缓存和协商缓存</span></a></h2><ul><li><strong>强缓存</strong>：客户端直接使用缓存，不向服务器发送请求。 <ul><li>使用 <code>Expires</code> 和 <code>Cache-Control</code> 头部。</li></ul></li><li><strong>协商缓存</strong>：客户端向服务器发送请求，根据服务器返回的状态决定是否使用缓存。 <ul><li>使用 <code>Last-Modified</code> 和 <code>ETag</code> 头部。</li></ul></li><li><strong>状态码</strong>：强缓存返回 200 (from cache)，协商缓存返回 304 (Not Modified)。</li></ul><h2 id="expires-与-cache-control-的使用" tabindex="-1"><a class="header-anchor" href="#expires-与-cache-control-的使用"><span>Expires 与 Cache-Control 的使用</span></a></h2><ul><li><strong>Expires</strong>：使用绝对时间来表示资源的过期时间。</li><li><strong>Cache-Control</strong>：使用相对时间来表示资源的缓存时间，例如 <code>max-age</code>。</li><li><strong>优先级</strong>：<code>Cache-Control</code> 优先级高于 <code>Expires</code>。</li></ul><h2 id="代理服务器" tabindex="-1"><a class="header-anchor" href="#代理服务器"><span>代理服务器</span></a></h2><ul><li><strong>定义</strong>：代理服务器是一个中间服务器，位于客户端和目标服务器之间，用于转发请求和响应。</li><li><strong>功能</strong>： <ul><li>缓存：存储服务器响应以减少延迟。</li><li>过滤：阻止访问某些网站或内容。</li><li>安全：隐藏客户端 IP 以增强隐私和安全。</li></ul></li></ul><h2 id="离线缓存实现" tabindex="-1"><a class="header-anchor" href="#离线缓存实现"><span>离线缓存实现</span></a></h2><ul><li><strong>Service Workers</strong>： <ul><li>注册 Service Worker。</li><li>在 <code>install</code> 事件中缓存资源。</li><li>在 <code>fetch</code> 事件中提供缓存资源。</li></ul></li><li><strong>Cache API</strong>： <ul><li>打开缓存并存储资源。</li><li>匹配缓存中的资源以实现离线访问。</li></ul></li><li><strong>IndexedDB</strong>：用于存储大量结构化数据，适合复杂查询和离线应用。</li><li><strong>Manifest 文件</strong>：一种已废弃的应用缓存方式。</li></ul><h2 id="在公司知乎-app-上实现离线缓存" tabindex="-1"><a class="header-anchor" href="#在公司知乎-app-上实现离线缓存"><span>在公司知乎 App 上实现离线缓存</span></a></h2><ul><li>创建并注册 Service Worker。</li><li>使用 Cache API 缓存资源。</li><li>动态缓存新的请求并更新过期缓存。</li><li>测试和优化缓存策略。</li></ul><h2 id="各大厂离线缓存和访问速度优化策略" tabindex="-1"><a class="header-anchor" href="#各大厂离线缓存和访问速度优化策略"><span>各大厂离线缓存和访问速度优化策略</span></a></h2><ul><li><strong>字节跳动</strong>： <ul><li>使用 PWA 和 Service Workers 实现离线缓存。</li><li>部署全球 CDN 网络和边缘计算。</li></ul></li><li><strong>阿里巴巴</strong>： <ul><li>前端优化和资源预加载。</li><li>使用多级缓存系统和智能缓存策略。</li></ul></li><li><strong>腾讯</strong>： <ul><li>使用腾讯云 CDN 和边缘计算。</li><li>实现智能缓存策略和性能监控。</li></ul></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener noreferrer">MDN Web Docs: Service Workers</a></li><li><a href="https://developers.google.com/web/fundamentals/primers/service-workers" target="_blank" rel="noopener noreferrer">Google Developers: Service Workers</a></li><li><a href="https://www.alibabacloud.com/product/cdn" target="_blank" rel="noopener noreferrer">Alibaba Cloud: CDN and Edge Computing</a></li><li><a href="https://intl.cloud.tencent.com/product/cdn" target="_blank" rel="noopener noreferrer">Tencent Cloud: CDN</a></li></ul><p>整理时间：{datetime.now().strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)}</p>',16),a=[i];function n(c,s){return l(),t("div",null,a)}const d=e(o,[["render",n],["__file","浏览器缓存.html.vue"]]),h=JSON.parse('{"path":"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98.html","title":"浏览器缓存","lang":"zh-CN","frontmatter":{"date":"2024-06-04T00:00:00.000Z","category":["Browser"],"tag":["Browser","Cache","Service Worker","PWA","Web Development","面试题总结"],"author":"Lisa","description":"浏览器缓存 强缓存和协商缓存 强缓存：客户端直接使用缓存，不向服务器发送请求。 使用 Expires 和 Cache-Control 头部。 协商缓存：客户端向服务器发送请求，根据服务器返回的状态决定是否使用缓存。 使用 Last-Modified 和 ETag 头部。 状态码：强缓存返回 200 (from cache)，协商缓存返回 304 (No...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:title","content":"浏览器缓存"}],["meta",{"property":"og:description","content":"浏览器缓存 强缓存和协商缓存 强缓存：客户端直接使用缓存，不向服务器发送请求。 使用 Expires 和 Cache-Control 头部。 协商缓存：客户端向服务器发送请求，根据服务器返回的状态决定是否使用缓存。 使用 Last-Modified 和 ETag 头部。 状态码：强缓存返回 200 (from cache)，协商缓存返回 304 (No..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-04T18:04:03.000Z"}],["meta",{"property":"article:author","content":"Lisa"}],["meta",{"property":"article:tag","content":"Browser"}],["meta",{"property":"article:tag","content":"Cache"}],["meta",{"property":"article:tag","content":"Service Worker"}],["meta",{"property":"article:tag","content":"PWA"}],["meta",{"property":"article:tag","content":"Web Development"}],["meta",{"property":"article:tag","content":"面试题总结"}],["meta",{"property":"article:published_time","content":"2024-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-04T18:04:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浏览器缓存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-04T18:04:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lisa\\"}]}"]]},"headers":[{"level":2,"title":"强缓存和协商缓存","slug":"强缓存和协商缓存","link":"#强缓存和协商缓存","children":[]},{"level":2,"title":"Expires 与 Cache-Control 的使用","slug":"expires-与-cache-control-的使用","link":"#expires-与-cache-control-的使用","children":[]},{"level":2,"title":"代理服务器","slug":"代理服务器","link":"#代理服务器","children":[]},{"level":2,"title":"离线缓存实现","slug":"离线缓存实现","link":"#离线缓存实现","children":[]},{"level":2,"title":"在公司知乎 App 上实现离线缓存","slug":"在公司知乎-app-上实现离线缓存","link":"#在公司知乎-app-上实现离线缓存","children":[]},{"level":2,"title":"各大厂离线缓存和访问速度优化策略","slug":"各大厂离线缓存和访问速度优化策略","link":"#各大厂离线缓存和访问速度优化策略","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"updatedTime":1717524243000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":2}]},"autoDesc":true,"filePathRelative":"posts/浏览器缓存.md","excerpt":"\\n<h2>强缓存和协商缓存</h2>\\n<ul>\\n<li><strong>强缓存</strong>：客户端直接使用缓存，不向服务器发送请求。\\n<ul>\\n<li>使用 <code>Expires</code> 和 <code>Cache-Control</code> 头部。</li>\\n</ul>\\n</li>\\n<li><strong>协商缓存</strong>：客户端向服务器发送请求，根据服务器返回的状态决定是否使用缓存。\\n<ul>\\n<li>使用 <code>Last-Modified</code> 和 <code>ETag</code> 头部。</li>\\n</ul>\\n</li>\\n<li><strong>状态码</strong>：强缓存返回 200 (from cache)，协商缓存返回 304 (Not Modified)。</li>\\n</ul>"}');export{d as comp,h as data};
