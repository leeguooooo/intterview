import{_ as n,c as s,o as a,a as p}from"./app-DjymQ69Z.js";const e="/images/pic4_zhimg_com_80_v2_4a8793499b4d1a5395f2b5f7d0584a4b_1440w.jpg",t={},o=p(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/vue/16-diff%E7%AE%97%E6%B3%95%E6%B7%B1%E5%85%A5.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/vue/16-diff%E7%AE%97%E6%B3%95%E6%B7%B1%E5%85%A5.html</a></p><h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言"><span>一、前言</span></a></h2><p>有同学问：能否详细说一下 diff 算法。</p><blockquote><p>简单说：diff 算法是一种优化手段，将前后两个模块进行差异化比较，修补(更新)差异的过程叫做 patch，也叫打补丁。</p></blockquote><p>详细的说，请阅读这篇文章，有疑问的地方欢迎联系「松宝写代码」一起讨论。</p><p>文章主要解决的问题：</p><ul><li>1、为什么要说这个 diff 算法？</li><li>2、虚拟 dom 的 diff 算法</li><li>3、为什么使用虚拟 dom？</li><li>4、diff 算法的复杂度和特点？</li><li>5、vue 的模板文件是如何被编译渲染的？</li><li>6、vue2.x 和 vue3.x 中的 diff 有区别吗</li><li>7、diff 算法的源头 snabbdom 算法</li><li>8、diff 算法与 snabbdom 算法的差异地方？</li></ul><h2 id="二、为什么要说这个-diff-算法" tabindex="-1"><a class="header-anchor" href="#二、为什么要说这个-diff-算法"><span>二、为什么要说这个 diff 算法？</span></a></h2><p>因为 diff 算法是 vue2.x ， vue3.x 以及 react 中关键核心点，理解 diff 算法，更有助于理解各个框架本质。</p><p>说到「diff 算法」，不得不说「虚拟 Dom」，因为这两个息息相关。</p><p>比如：</p><ul><li>vue 的响应式原理？</li><li>vue 的 template 文件是如何被编译的？</li><li>介绍一下 Virtual Dom 算法？</li><li>为什么要用 virtual dom 呢？</li><li>diff 算法复杂度以及最大的特点？</li><li>vue2.x 的 diff 算法中节点比较情况？</li></ul><p>等等</p><h2 id="三、虚拟-dom-的-diff-算法" tabindex="-1"><a class="header-anchor" href="#三、虚拟-dom-的-diff-算法"><span>三、虚拟 dom 的 diff 算法</span></a></h2><p>我们先来说说虚拟 Dom，就是通过 JS 模拟实现 DOM ，接下来难点就是如何判断旧对象和新对象之间的差异。</p><p>Dom 是多叉树结构，如果需要完整的对比两棵树的差异，那么算法的时间复杂度 O(n ^ 3)，这个复杂度很难让人接收，尤其在 n 很大的情况下，于是 React 团队优化了算法，实现了 O(n) 的复杂度来对比差异。</p><p>实现 O(n) 复杂度的关键就是只对比同层的节点，而不是跨层对比，这也是考虑到在实际业务中很少会去跨层的移动 DOM 元素。</p><p>虚拟 DOM 差异算法的步骤分为 2 步：</p><ul><li>首先从上至下，从左往右遍历对象，也就是树的深度遍历，这一步中会给每个节点添加索引，便于最后渲染差异</li><li>一旦节点有子元素，就去判断子元素是否有不同</li></ul><h3 id="_3-1-vue-中-diff-算法" tabindex="-1"><a class="header-anchor" href="#_3-1-vue-中-diff-算法"><span><strong>3.1 vue 中 diff 算法</strong></span></a></h3><p>实际 diff 算法比较中，节点比较主要有 5 种规则的比较</p><ul><li>1、如果新旧 VNode 都是静态的，同时它们的 key 相同（代表同一节点），并且新的 VNode 是 clone 或者是标记了 once（标记 v-once 属性，只渲染一次），那么只需要替换 elm 以及 componentInstance 即可。</li><li>2、新老节点均有 children 子节点，则对子节点进行 diff 操作，调用 updateChildren，这个 updateChildren 也是 diff 的核心。</li><li>3、如果老节点没有子节点而新节点存在子节点，先清空老节点 DOM 的文本内容，然后为当前 DOM 节点加入子节点。</li><li>4、当新节点没有子节点而老节点有子节点的时候，则移除该 DOM 节点的所有子节点。</li><li>5、当新老节点都无子节点的时候，只是文本的替换</li></ul><p>部分源码 <a href="https://link.zhihu.com/?target=https%3A//github.com/vuejs/vue/blob/8a219e3d4cfc580bbb3420344600801bd9473390/src/core/vdom/patch.js%23L501" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/vue/blob/8a219e3d4cfc580bbb3420344600801bd9473390/src/core/vdom/patch.js#L501 (opens new window)</a> 如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> ownerArray<span class="token punctuation">,</span> index<span class="token punctuation">,</span> removeOnly</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">===</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ownerArray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// clone reused vnode</span></span>
<span class="line">        vnode <span class="token operator">=</span> ownerArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">const</span> elm <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>isAsyncPlaceholder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>asyncFactory<span class="token punctuation">.</span>resolved<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">hydrate</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          vnode<span class="token punctuation">.</span>isAsyncPlaceholder <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token function">isTrue</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">        vnode<span class="token punctuation">.</span>key <span class="token operator">===</span> oldVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isCloned<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isOnce<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>componentInstance<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">let</span> i<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>prepatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">const</span> oldCh <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> ch <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPatchable</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 定义了子节点，且不相同，用diff算法对比</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh <span class="token operator">!==</span> ch<span class="token punctuation">)</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 新节点有子元素。旧节点没有</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 检查key</span></span>
<span class="line">            <span class="token function">checkDuplicateKeys</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token comment">// 清空旧节点的text属性</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 添加新的Vnode</span></span>
<span class="line">          <span class="token function">addVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 如果旧节点的子节点有内容，新的没有。那么直接删除旧节点子元素的内容</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">removeVnodes</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 如上。只是判断是否为文本节点</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 如果文本节点不同，替换节点内容</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>postpatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-react-diff-算法" tabindex="-1"><a class="header-anchor" href="#_3-2-react-diff-算法"><span><strong>3.2 React diff 算法</strong></span></a></h3><p>在 reconcileChildren 函数的入参中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span></span>
<span class="line">      workInProgress<span class="token punctuation">,</span></span>
<span class="line">      current<span class="token punctuation">.</span>child<span class="token punctuation">,</span></span>
<span class="line">      nextChildren<span class="token punctuation">,</span></span>
<span class="line">      renderLanes<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>workInProgress：作为父节点传入，新生成的第一个 fiber 的 return 会被指向它。</li><li>current.child：旧 fiber 节点，diff 生成新 fiber 节点时会用新生成的 ReactElement 和它作比较。</li><li>nextChildren：新生成的 ReactElement，会以它为标准生成新的 fiber 节点。</li><li>renderLanes：本次的渲染优先级，最终会被挂载到新 fiber 的 lanes 属性上。</li></ul><p>diff 的两个主体是：oldFiber（current.child）和 newChildren（nextChildren，新的 ReactElement），它们是两个不一样的数据结构。</p><p>部分源码</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">reconcileChildrenArray</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token parameter"><span class="token literal-property property">returnFiber</span><span class="token operator">:</span> Fiber<span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">currentFirstChild</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">newChildren</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">lanes</span><span class="token operator">:</span> Lanes<span class="token punctuation">,</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">/* * returnFiber：currentFirstChild的父级fiber节点</span>
<span class="line">       * currentFirstChild：当前执行更新任务的WIP（fiber）节点</span>
<span class="line">       * newChildren：组件的render方法渲染出的新的ReactElement节点</span>
<span class="line">       * lanes：优先级相关</span>
<span class="line">       * */</span></span>
<span class="line">      <span class="token comment">// resultingFirstChild是diff之后的新fiber链表的第一个fiber。</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token literal-property property">resultingFirstChild</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// resultingFirstChild是新链表的第一个fiber。</span></span>
<span class="line">      <span class="token comment">// previousNewFiber用来将后续的新fiber接到第一个fiber之后</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token literal-property property">previousNewFiber</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// oldFiber节点，新的child节点会和它进行比较</span></span>
<span class="line">      <span class="token keyword">let</span> oldFiber <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 存储固定节点的位置</span></span>
<span class="line">      <span class="token keyword">let</span> lastPlacedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 存储遍历到的新节点的索引</span></span>
<span class="line">      <span class="token keyword">let</span> newIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 记录目前遍历到的oldFiber的下一个节点</span></span>
<span class="line">      <span class="token keyword">let</span> nextOldFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 该轮遍历来处理节点更新，依据节点是否可复用来决定是否中断遍历</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> oldFiber <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> newIdx <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> newIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// newChildren遍历完了，oldFiber链没有遍历完，此时需要中断遍历</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber<span class="token punctuation">.</span>index <span class="token operator">&gt;</span> newIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          nextOldFiber <span class="token operator">=</span> oldFiber<span class="token punctuation">;</span></span>
<span class="line">          oldFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 用nextOldFiber存储当前遍历到的oldFiber的下一个节点</span></span>
<span class="line">          nextOldFiber <span class="token operator">=</span> oldFiber<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 生成新的节点，判断key与tag是否相同就在updateSlot中</span></span>
<span class="line">        <span class="token comment">// 对DOM类型的元素来说，key 和 tag都相同才会复用oldFiber</span></span>
<span class="line">        <span class="token comment">// 并返回出去，否则返回null</span></span>
<span class="line">        <span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">updateSlot</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>newIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// newFiber为 null说明 key 或 tag 不同，节点不可复用，中断遍历</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// oldFiber 为null说明oldFiber此时也遍历完了</span></span>
<span class="line">            <span class="token comment">// 是以下场景，D为新增节点</span></span>
<span class="line">            <span class="token comment">// 旧 A - B - C</span></span>
<span class="line">            <span class="token comment">// 新 A - B - C - D oldFiber = nextOldFiber;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// shouldTrackSideEffects 为true表示是更新过程</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber <span class="token operator">&amp;&amp;</span> newFiber<span class="token punctuation">.</span>alternate <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// newFiber.alternate 等同于 oldFiber.alternate</span></span>
<span class="line">            <span class="token comment">// oldFiber为WIP节点，它的alternate 就是 current节点</span></span>
<span class="line">            <span class="token comment">// oldFiber存在，并且经过更新后的新fiber节点它还没有current节点,</span></span>
<span class="line">            <span class="token comment">// 说明更新后展现在屏幕上不会有current节点，而更新后WIP</span></span>
<span class="line">            <span class="token comment">// 节点会称为current节点，所以需要删除已有的WIP节点</span></span>
<span class="line">            <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 记录固定节点的位置</span></span>
<span class="line">        lastPlacedIndex <span class="token operator">=</span> <span class="token function">placeChild</span><span class="token punctuation">(</span>newFiber<span class="token punctuation">,</span> lastPlacedIndex<span class="token punctuation">,</span> newIdx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 将新fiber连接成以sibling为指针的单向链表</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>previousNewFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          resultingFirstChild <span class="token operator">=</span> newFiber<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          previousNewFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        previousNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 将oldFiber节点指向下一个，与newChildren的遍历同步移动</span></span>
<span class="line">        oldFiber <span class="token operator">=</span> nextOldFiber<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 处理节点删除。新子节点遍历完，说明剩下的oldFiber都是没用的了，可以删除.</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>newIdx <span class="token operator">===</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// newChildren遍历结束，删除掉oldFiber链中的剩下的节点</span></span>
<span class="line">        <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> resultingFirstChild<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 处理新增节点。旧的遍历完了，能复用的都复用了，所以意味着新的都是新插入的了</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> newIdx <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> newIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 基于新生成的ReactElement创建新的Fiber节点</span></span>
<span class="line">          <span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">createChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>newIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token comment">// 记录固定节点的位置lastPlacedIndex</span></span>
<span class="line">          lastPlacedIndex <span class="token operator">=</span> <span class="token function">placeChild</span><span class="token punctuation">(</span>newFiber<span class="token punctuation">,</span> lastPlacedIndex<span class="token punctuation">,</span> newIdx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 将新生成的fiber节点连接成以sibling为指针的单向链表</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>previousNewFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            resultingFirstChild <span class="token operator">=</span> newFiber<span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            previousNewFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          previousNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> resultingFirstChild<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 执行到这是都没遍历完的情况，把剩余的旧子节点放入一个以key为键,值为oldFiber节点的map中</span></span>
<span class="line">      <span class="token comment">// 这样在基于oldFiber节点新建新的fiber节点时，可以通过key快速地找出oldFiber</span></span>
<span class="line">      <span class="token keyword">const</span> existingChildren <span class="token operator">=</span> <span class="token function">mapRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> oldFiber<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 节点移动</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> newIdx <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> newIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 基于map中的oldFiber节点来创建新fiber</span></span>
<span class="line">        <span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">updateFromMap</span><span class="token punctuation">(</span></span>
<span class="line">          existingChildren<span class="token punctuation">,</span></span>
<span class="line">          returnFiber<span class="token punctuation">,</span></span>
<span class="line">          newIdx<span class="token punctuation">,</span></span>
<span class="line">          newChildren<span class="token punctuation">[</span>newIdx<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">          lanes<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>newFiber<span class="token punctuation">.</span>alternate <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token comment">// 因为newChildren中剩余的节点有可能和oldFiber节点一样,只是位置换了，</span></span>
<span class="line">              <span class="token comment">// 但也有可能是是新增的.</span></span>
<span class="line">    </span>
<span class="line">              <span class="token comment">// 如果newFiber的alternate不为空，则说明newFiber不是新增的。</span></span>
<span class="line">              <span class="token comment">// 也就说明着它是基于map中的oldFiber节点新建的,意味着oldFiber已经被使用了,所以需</span></span>
<span class="line">              <span class="token comment">// 要从map中删去oldFiber</span></span>
<span class="line">              existingChildren<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>newFiber<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> newIdx <span class="token operator">:</span> newFiber<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">          <span class="token comment">// 移动节点，多节点diff的核心，这里真正会实现节点的移动</span></span>
<span class="line">          lastPlacedIndex <span class="token operator">=</span> <span class="token function">placeChild</span><span class="token punctuation">(</span>newFiber<span class="token punctuation">,</span> lastPlacedIndex<span class="token punctuation">,</span> newIdx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 将新fiber连接成以sibling为指针的单向链表</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>previousNewFiber <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            resultingFirstChild <span class="token operator">=</span> newFiber<span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            previousNewFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> newFiber<span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          previousNewFiber <span class="token operator">=</span> newFiber<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 此时newChildren遍历完了，该移动的都移动了，那么删除剩下的oldFiber</span></span>
<span class="line">        existingChildren<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> resultingFirstChild<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、为什么使用虚拟-dom" tabindex="-1"><a class="header-anchor" href="#四、为什么使用虚拟-dom"><span>四、为什么使用虚拟 dom？</span></a></h2><p>很多时候手工优化 dom 确实会比 virtual dom 效率高，对于比较简单的 dom 结构用手工优化没有问题，但当页面结构很庞大，结构很复杂时，手工优化会花去大量时间，而且可维护性也不高，不能保证每个人都有手工优化的能力。至此，virtual dom 的解决方案应运而生。</p><p>virtual dom 是“解决过多的操作 dom 影响性能”的一种解决方案。</p><p>virtual dom 很多时候都不是最优的操作，但它具有普适性，在效率、可维护性之间达到平衡。</p><p><strong>virutal dom 的意义：</strong></p><ul><li>1、提供一种简单对象去代替复杂的 dom 对象，从而优化 dom 操作</li><li>2、提供一个中间层，js 去写 ui，ios 安卓之类的负责渲染，就像 reactNative 一样。</li></ul><h2 id="五、diff-算法的复杂度和特点" tabindex="-1"><a class="header-anchor" href="#五、diff-算法的复杂度和特点"><span>五、diff 算法的复杂度和特点？</span></a></h2><p>vue2.x 的 diff 位于 patch.js 文件中，该算法来源于 snabbdom，复杂度为 O(n)。了解 diff 过程可以让我们更高效的使用框架。react 的 diff 其实和 vue 的 diff 大同小异。</p><p>最大特点：比较只会在同层级进行, 不会跨层级比较。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 之前 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 层级<span class="token number">1</span> <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 层级<span class="token number">2</span> <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>b<span class="token operator">&gt;</span> aoy <span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 层级<span class="token number">3</span> <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>diff<span class="token operator">&lt;</span><span class="token operator">/</span>Span<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 之后 <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>             <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 层级<span class="token number">1</span> <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>              <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 层级<span class="token number">2</span> <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>b<span class="token operator">&gt;</span> aoy <span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 层级<span class="token number">3</span> <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>diff<span class="token operator">&lt;</span><span class="token operator">/</span>Span<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比之前和之后：可能期望将<code>&lt;span&gt;</code>直接移动到<code>&lt;p&gt;</code>的后边，这是最优的操作。</p><p>但是实际的 diff 操作是：</p><ul><li>1、移除<code>&lt;p&gt;</code>里的<code>&lt;span&gt;</code>；</li><li>2、在创建一个新的<code>&lt;span&gt;</code>插到<code>&lt;p&gt;</code>的后边。 因为新加的<code>&lt;span&gt;</code>在层级 2，旧的在层级 3，属于不同层级的比较。</li></ul><h2 id="六、vue-的模板文件是如何被编译渲染的" tabindex="-1"><a class="header-anchor" href="#六、vue-的模板文件是如何被编译渲染的"><span>六、vue 的模板文件是如何被编译渲染的？</span></a></h2><p>vue 中也使用 diff 算法，有必要了解一下 Vue 是如何工作的。通过这个问题，我们可以很好的掌握，diff 算法在整个编译过程中，哪个环节，做了哪些操作，然后使用 diff 算法后输出什么？</p><p><img src="`+e+`" alt="img"></p><p>解释：</p><h3 id="_1、mount-函数" tabindex="-1"><a class="header-anchor" href="#_1、mount-函数"><span><strong>1、mount 函数</strong></span></a></h3><p>mount 函数主要是获取 template，然后进入 compileToFunctions 函数。</p><h3 id="_2、compiletofunction-函数" tabindex="-1"><a class="header-anchor" href="#_2、compiletofunction-函数"><span><strong>2、compileToFunction 函数</strong></span></a></h3><p>compileToFunction 函数主要是将 template 编译成 render 函数。首先读取缓存，没有缓存就调用 compile 方法拿到 render 函数的字符串形式，在通过 new Function 的方式生成 render 函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 有缓存的话就直接在缓存里面拿</span></span>
<span class="line">    <span class="token keyword">const</span> key <span class="token operator">=</span> options <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>delimiters <span class="token operator">?</span> <span class="token function">String</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>delimiters<span class="token punctuation">)</span> <span class="token operator">+</span> template <span class="token operator">:</span> template<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// compile 后面会详细讲</span></span>
<span class="line">    res<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token function">makeFunction</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过 new Function 的方式生成 render 函数并缓存</span></span>
<span class="line">    <span class="token keyword">const</span> l <span class="token operator">=</span> compiled<span class="token punctuation">.</span>staticRenderFns<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">    res<span class="token punctuation">.</span>staticRenderFns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      res<span class="token punctuation">.</span>staticRenderFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">makeFunction</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>staticRenderFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// ......</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录至缓存中</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、compile-函数" tabindex="-1"><a class="header-anchor" href="#_3、compile-函数"><span><strong>3、compile 函数</strong></span></a></h3><p>compile 函数将 template 编译成 render 函数的字符串形式。后面我们主要讲解 render</p><p>完成 render 方法生成后，会进入到 mount 进行 DOM 更新。该方法核心逻辑如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 触发 beforeMount 生命周期钩子</span></span>
<span class="line">    <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;beforeMount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 重点：新建一个 Watcher 并赋值给 vm._watcher</span></span>
<span class="line">    vm<span class="token punctuation">.</span>_watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span></span>
<span class="line">      vm<span class="token punctuation">,</span></span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">updateComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      noop<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    hydrating <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// manually mounted instance, call mounted on self</span></span>
<span class="line">    <span class="token comment">// mounted is called for render-created child components in its inserted hook</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$vnode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      vm<span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">&#39;mounted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> vm<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先会 new 一个 watcher 对象（主要是将模板与数据建立联系），在 watcher 对象创建后，</li><li>会运行传入的方法 vm._update(vm._render(), hydrating) 。 其中的 vm._render()主要作用就是运行前面 compiler 生成的 render 方法，并返回一个 vNode 对象。</li><li>vm.update() 则会对比新的 vdom 和当前 vdom，并把差异的部分渲染到真正的 DOM 树上。（watcher 背后的实现原理：vue2.x 的响应式原理）</li></ul><p>上面提到的 compile 就是将 template 编译成 render 函数的字符串形式。核心代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">template</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> CompilerOptions</span><span class="token punctuation">)</span><span class="token operator">:</span> CompiledResult <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token constant">AST</span> <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1. parse</span></span>
<span class="line">      <span class="token function">optimize</span><span class="token punctuation">(</span><span class="token constant">AST</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2.optimize</span></span>
<span class="line">      <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token constant">AST</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3.generate</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token constant">AST</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">render</span><span class="token operator">:</span> code<span class="token punctuation">.</span>render<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">staticRenderFns</span><span class="token operator">:</span> code<span class="token punctuation">.</span>staticRenderFns<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>compile 这个函数主要有三个步骤组成：</p><ul><li>parse，</li><li>optimize</li><li>generate</li></ul><p>分别输出一个包含</p><ul><li>AST 字符串</li><li>staticRenderFns 的对象字符串</li><li>render 函数 的字符串。</li></ul><p>parse 函数：主要功能是<strong>将 template 字符串解析成 AST（抽象语法树）</strong> 。前面定义的 ASTElement 的数据结构，parse 函数就是将 template 里的结构（指令，属性，标签） 转换为 AST 形式存进 ASTElement 中，最后解析生成 AST。</p><p>optimize 函数（src/compiler/optomizer.js）:主要功能是<strong>标记静态节点</strong> 。后面 patch 过程中对比新旧 VNode 树形结构做优化。被标记为 static 的节点在后面的 diff 算法中会被直接忽略，不做详细比较。</p><p>generate 函数（src/compiler/codegen/index.js）:主要功能<strong>根据 AST 结构拼接生成 render 函数的字符串</strong> 。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token constant">AST</span> <span class="token operator">?</span> <span class="token function">genElement</span><span class="token punctuation">(</span><span class="token constant">AST</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;_c(&quot;div&quot;)&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    staticRenderFns <span class="token operator">=</span> prevStaticRenderFns<span class="token punctuation">;</span></span>
<span class="line">    onceCount <span class="token operator">=</span> prevOnceCount<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">with(this){return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token comment">//最外层包一个 with(this) 之后返回</span></span>
<span class="line">      <span class="token literal-property property">staticRenderFns</span><span class="token operator">:</span> currentStaticRenderFns<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 genElement 函数（src/compiler/codgen/index.js）是根据 AST 的属性调用不同的方法生成字符串返回。</p><p><strong>总之：</strong></p><p>就是 compile 函数中三个核心步骤介绍，</p><ul><li>compile 之后我们得到 render 函数的字符串形式，后面通过 new Function 得到真正的渲染函数。</li><li>数据发生变化后，会执行 watcher 中的_update 函数（src/core/instance/lifecycle.js），_update 函数会执行这个渲染函数，输出一个新的 VNode 树形结构的数据。</li><li>然后调用 patch 函数，拿到这个新的 VNode 与旧的 VNode 进行对比，只有发生了变化的节点才会被更新到新的真实 DOM 树上。</li></ul><h3 id="_4、patch-函数" tabindex="-1"><a class="header-anchor" href="#_4、patch-函数"><span><strong>4、patch 函数</strong></span></a></h3><p>patch 函数 就是新旧 VNode 对比的 diff 函数，主要是为了优化 dom，通过算法使操作 dom 的行为降低到最低， diff 算法来源于 snabbdom，是 VDOM 思想的核心。snabbdom 的算法是为了 DOM 操作跨级增删节点较少的这一目标进行优化， 它只会在同层级进行，不会跨层级比较。</p><h3 id="总结一下" tabindex="-1"><a class="header-anchor" href="#总结一下"><span><strong>总结一下</strong></span></a></h3><ul><li>compile 函数主要是将 template 转换为 AST，优化 AST，再将 AST 转换为 render 函数的字符串形式。</li><li>再通过 new Function 得到真正的 render 函数，render 函数与数据通过 Watcher 产生关联。</li><li>在数据反生变化的时候调用 patch 函数，执行 render 函数，生成新的 VNode，与旧的 VNode 进行 diff，最终更新 DOM 树。</li></ul><h2 id="七、vue2-x-vue3-x-react-中的-diff-有区别吗" tabindex="-1"><a class="header-anchor" href="#七、vue2-x-vue3-x-react-中的-diff-有区别吗"><span>七、vue2.x，vue3.x，React 中的 diff 有区别吗？</span></a></h2><p>总的来说：</p><ul><li>vue2.x 的核心 diff 算法采用双端比较的算法，同时从新旧 children 的两端开始进行比较，借助 key 可以复用的节点。</li><li>vue3.x 借鉴了一些别的算法 inferno(<a href="https://link.zhihu.com/?target=https%3A//github.com/infernojs/inferno" target="_blank" rel="noopener noreferrer">https://github.com/infernojs/inferno (opens new window)</a>) 解决：1、处理相同的前置和后置元素的预处理；2、一旦需要进行 DOM 移动，我们首先要做的就是找到 source 的最长递增子序列。</li></ul><p>在创建 VNode 就确定类型，以及在 mount/patch 的过程中采用位运算来判断一个 VNode 的类型，在这个优化的基础上再配合 Diff 算法，性能得到提升。</p><p>可以看一下 vue3.x 的源码： <a href="https://link.zhihu.com/?target=https%3A//github.com/vuejs/vue/blob/8a219e3d4cfc580bbb3420344600801bd9473390/src/core/vdom/patch.js" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/vue/blob/8a219e3d4cfc580bbb3420344600801bd9473390/src/core/vdom/patch.js (opens new window)</a></p><ul><li>react 通过 key 和 tag 来对节点进行取舍，可直接将复杂的比对拦截掉，然后降级成节点的移动和增删这样比较简单的操作。</li></ul><p>对 oldFiber 和新的 ReactElement 节点的比对，将会生成新的 fiber 节点，同时标记上 effectTag，这些 fiber 会被连到 workInProgress 树中，作为新的 WIP 节点。树的结构因此被一点点地确定，而新的 workInProgress 节点也基本定型。在 diff 过后，workInProgress 节点的 beginWork 节点就完成了，接下来会进入 completeWork 阶段。</p><h2 id="八、diff-算法的源头-snabbdom-算法" tabindex="-1"><a class="header-anchor" href="#八、diff-算法的源头-snabbdom-算法"><span><strong>八、diff 算法的源头 snabbdom 算法</strong></span></a></h2><p>snabbdom 算法： <a href="https://link.zhihu.com/?target=https%3A//github.com/snabbdom/snabbdom" target="_blank" rel="noopener noreferrer">https://github.com/snabbdom/snabbdom (opens new window)</a></p><p>定位：一个专注于简单性、模块化、强大功能和性能的虚拟 DOM 库。</p><h3 id="_1、snabbdom-中定义-vnode-的类型" tabindex="-1"><a class="header-anchor" href="#_1、snabbdom-中定义-vnode-的类型"><span><strong>1、snabbdom 中定义 Vnode 的类型</strong></span></a></h3><p>snabbdom 中定义 Vnode 的类型(<a href="https://link.zhihu.com/?target=https%3A//github.com/snabbdom/snabbdom/blob/27e9c4d5dca62b6dabf9ac23efb95f1b6045b2df/src/vnode.ts%23L12" target="_blank" rel="noopener noreferrer">https://github.com/snabbdom/snabbdom/blob/27e9c4d5dca62b6dabf9ac23efb95f1b6045b2df/src/vnode.ts#L12 (opens new window)</a>)</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VNode</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">sel</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// selector的缩写</span></span>
<span class="line">      <span class="token literal-property property">data</span><span class="token operator">:</span> VNodeData <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 下面VNodeData接口的内容</span></span>
<span class="line">      <span class="token literal-property property">children</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>VNode <span class="token operator">|</span> string<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 子节点</span></span>
<span class="line">      <span class="token literal-property property">elm</span><span class="token operator">:</span> Node <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// element的缩写，存储了真实的HTMLElement</span></span>
<span class="line">      <span class="token literal-property property">text</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 如果是文本节点，则存储text</span></span>
<span class="line">      <span class="token literal-property property">key</span><span class="token operator">:</span> Key <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 节点的key，在做列表时很有用</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">VNodeData</span> <span class="token punctuation">{</span></span>
<span class="line">      props<span class="token operator">?</span><span class="token operator">:</span> Props<span class="token punctuation">;</span></span>
<span class="line">      attrs<span class="token operator">?</span><span class="token operator">:</span> Attrs<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">class</span><span class="token operator">?</span><span class="token operator">:</span> Classes<span class="token punctuation">;</span></span>
<span class="line">      style<span class="token operator">?</span><span class="token operator">:</span> VNodeStyle<span class="token punctuation">;</span></span>
<span class="line">      dataset<span class="token operator">?</span><span class="token operator">:</span> Dataset<span class="token punctuation">;</span></span>
<span class="line">      on<span class="token operator">?</span><span class="token operator">:</span> On<span class="token punctuation">;</span></span>
<span class="line">      attachData<span class="token operator">?</span><span class="token operator">:</span> AttachData<span class="token punctuation">;</span></span>
<span class="line">      hook<span class="token operator">?</span><span class="token operator">:</span> Hooks<span class="token punctuation">;</span></span>
<span class="line">      key<span class="token operator">?</span><span class="token operator">:</span> Key<span class="token punctuation">;</span></span>
<span class="line">      ns<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span> <span class="token comment">// for SVGs</span></span>
<span class="line">      fn<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> VNode<span class="token punctuation">;</span> <span class="token comment">// for thunks</span></span>
<span class="line">      args<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// for thunks</span></span>
<span class="line">      is<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span> <span class="token comment">// for custom elements v1</span></span>
<span class="line">      <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span> <span class="token comment">// for any other 3rd party module</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、init-函数分析" tabindex="-1"><a class="header-anchor" href="#_2、init-函数分析"><span><strong>2、init 函数分析</strong></span></a></h3><p>init 函数的地址：</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/snabbdom/snabbdom/blob/27e9c4d5dca62b6dabf9ac23efb95f1b6045b2df/src/init.ts%23L63" target="_blank" rel="noopener noreferrer">https://github.com/snabbdom/snabbdom/blob/27e9c4d5dca62b6dabf9ac23efb95f1b6045b2df/src/init.ts#L63 (opens new window)</a></p><p>init() 函数接收一个模块数组 modules 和可选的 domApi 对象作为参数，返回一个函数，即 patch() 函数。</p><p>domApi 对象的接口包含了很多 DOM 操作的方法。</p><h3 id="_3、patch-函数分析" tabindex="-1"><a class="header-anchor" href="#_3、patch-函数分析"><span><strong>3、patch 函数分析</strong></span></a></h3><p>源码：</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/snabbdom/snabbdom/blob/27e9c4d5dca62b6dabf9ac23efb95f1b6045b2df/src/init.ts%23L367" target="_blank" rel="noopener noreferrer">https://github.com/snabbdom/snabbdom/blob/27e9c4d5dca62b6dabf9ac23efb95f1b6045b2df/src/init.ts#L367 (opens new window)</a></p><ul><li>init() 函数返回了一个 patch() 函数</li><li>patch() 函数接收两个 VNode 对象作为参数，并返回一个新 VNode。</li></ul><h3 id="_4、h-函数分析" tabindex="-1"><a class="header-anchor" href="#_4、h-函数分析"><span><strong>4、h 函数分析</strong></span></a></h3><p>源码：</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/snabbdom/snabbdom/blob/27e9c4d5dca62b6dabf9ac23efb95f1b6045b2df/src/h.ts%23L33" target="_blank" rel="noopener noreferrer">https://github.com/snabbdom/snabbdom/blob/27e9c4d5dca62b6dabf9ac23efb95f1b6045b2df/src/h.ts#L33 (opens new window)</a></p><p>h() 函数接收多种参数，其中必须有一个 sel 参数，作用是将节点内容挂载到该容器中，并返回一个新 VNode。</p><h2 id="九、diff-算法与-snabbdom-算法的差异地方" tabindex="-1"><a class="header-anchor" href="#九、diff-算法与-snabbdom-算法的差异地方"><span>九、diff 算法与 snabbdom 算法的差异地方？</span></a></h2><p>在 vue2.x 不是完全 snabbdom 算法，而是基于 vue 的场景进行了一些修改和优化，主要体现在判断 key 和 diff 部分。</p><p>1、在 snabbdom 中 通过 key 和 sel 就判断是否为同一节点，那么在 vue 中，增加了一些判断 在满足 key 相等的同时会判断，tag 名称是否一致，是否为注释节点，是否为异步节点，或者为 input 时候类型是否相同等。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/vuejs/vue/blob/8a219e3d4cfc580bbb3420344600801bd9473390/src/core/vdom/patch.js%23L35" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/vue/blob/8a219e3d4cfc580bbb3420344600801bd9473390/src/core/vdom/patch.js#L35 (opens new window)</a></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">a</span> 被对比节点</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">b</span>  对比节点</span>
<span class="line">     * 对比两个节点是否相同</span>
<span class="line">     * 需要组成的条件：key相同，tag相同，是否都为注释节点，是否同事定义了data，如果是input标签，那么type必须相同</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        a<span class="token punctuation">.</span>key <span class="token operator">===</span> b<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>tag <span class="token operator">===</span> b<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span></span>
<span class="line">          a<span class="token punctuation">.</span>isComment <span class="token operator">===</span> b<span class="token punctuation">.</span>isComment <span class="token operator">&amp;&amp;</span></span>
<span class="line">          <span class="token function">isDef</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">isDef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">          <span class="token function">sameInputType</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">          <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>isAsyncPlaceholder<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">            a<span class="token punctuation">.</span>asyncFactory <span class="token operator">===</span> b<span class="token punctuation">.</span>asyncFactory <span class="token operator">&amp;&amp;</span></span>
<span class="line">            <span class="token function">isUndef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>asyncFactory<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、diff 差异，patchVnode 是对比模版变化的函数，可能会用到 diff 也可能直接更新。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/vuejs/vue/blob/8a219e3d4cfc580bbb3420344600801bd9473390/src/core/vdom/patch.js%23L404" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/vue/blob/8a219e3d4cfc580bbb3420344600801bd9473390/src/core/vdom/patch.js#L404 (opens new window)</a></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token parameter">parentElm<span class="token punctuation">,</span></span>
<span class="line">      oldCh<span class="token punctuation">,</span></span>
<span class="line">      newCh<span class="token punctuation">,</span></span>
<span class="line">      insertedVnodeQueue<span class="token punctuation">,</span></span>
<span class="line">      removeOnly</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> newStartIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> oldEndIdx <span class="token operator">=</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> newEndIdx <span class="token operator">=</span> newCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> oldKeyToIdx<span class="token punctuation">,</span> idxInOld<span class="token punctuation">,</span> vnodeToMove<span class="token punctuation">,</span> refElm<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> canMove <span class="token operator">=</span> <span class="token operator">!</span>removeOnly<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&quot;production&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">checkDuplicateKeys</span><span class="token punctuation">(</span>newCh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Vnode has been moved left</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patchVnode</span><span class="token punctuation">(</span></span>
<span class="line">            oldStartVnode<span class="token punctuation">,</span></span>
<span class="line">            newStartVnode<span class="token punctuation">,</span></span>
<span class="line">            insertedVnodeQueue<span class="token punctuation">,</span></span>
<span class="line">            newCh<span class="token punctuation">,</span></span>
<span class="line">            newStartIdx</span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">patchVnode</span><span class="token punctuation">(</span></span>
<span class="line">            oldEndVnode<span class="token punctuation">,</span></span>
<span class="line">            newEndVnode<span class="token punctuation">,</span></span>
<span class="line">            insertedVnodeQueue<span class="token punctuation">,</span></span>
<span class="line">            newCh<span class="token punctuation">,</span></span>
<span class="line">            newEndIdx</span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// Vnode moved right</span></span>
<span class="line">          <span class="token function">patchVnode</span><span class="token punctuation">(</span></span>
<span class="line">            oldStartVnode<span class="token punctuation">,</span></span>
<span class="line">            newEndVnode<span class="token punctuation">,</span></span>
<span class="line">            insertedVnodeQueue<span class="token punctuation">,</span></span>
<span class="line">            newCh<span class="token punctuation">,</span></span>
<span class="line">            newEndIdx</span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          canMove <span class="token operator">&amp;&amp;</span></span>
<span class="line">            nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span></span>
<span class="line">              parentElm<span class="token punctuation">,</span></span>
<span class="line">              oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span></span>
<span class="line">              nodeOps<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// Vnode moved left</span></span>
<span class="line">          <span class="token function">patchVnode</span><span class="token punctuation">(</span></span>
<span class="line">            oldEndVnode<span class="token punctuation">,</span></span>
<span class="line">            newStartVnode<span class="token punctuation">,</span></span>
<span class="line">            insertedVnodeQueue<span class="token punctuation">,</span></span>
<span class="line">            newCh<span class="token punctuation">,</span></span>
<span class="line">            newStartIdx</span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          canMove <span class="token operator">&amp;&amp;</span></span>
<span class="line">            nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldKeyToIdx<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            oldKeyToIdx <span class="token operator">=</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          idxInOld <span class="token operator">=</span> <span class="token function">isDef</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">?</span> oldKeyToIdx<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span></span>
<span class="line">            <span class="token operator">:</span> <span class="token function">findIdxInOld</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>idxInOld<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// New element</span></span>
<span class="line">            <span class="token function">createElm</span><span class="token punctuation">(</span></span>
<span class="line">              newStartVnode<span class="token punctuation">,</span></span>
<span class="line">              insertedVnodeQueue<span class="token punctuation">,</span></span>
<span class="line">              parentElm<span class="token punctuation">,</span></span>
<span class="line">              oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span></span>
<span class="line">              <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">              newCh<span class="token punctuation">,</span></span>
<span class="line">              newStartIdx</span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// vnodeToMove将要移动的节点</span></span>
<span class="line">            vnodeToMove <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>vnodeToMove<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">patchVnode</span><span class="token punctuation">(</span></span>
<span class="line">                vnodeToMove<span class="token punctuation">,</span></span>
<span class="line">                newStartVnode<span class="token punctuation">,</span></span>
<span class="line">                insertedVnodeQueue<span class="token punctuation">,</span></span>
<span class="line">                newCh<span class="token punctuation">,</span></span>
<span class="line">                newStartIdx</span>
<span class="line">              <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">              oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">              canMove <span class="token operator">&amp;&amp;</span></span>
<span class="line">                nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnodeToMove<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token comment">// same key but different element. treat as new element</span></span>
<span class="line">              <span class="token function">createElm</span><span class="token punctuation">(</span></span>
<span class="line">                newStartVnode<span class="token punctuation">,</span></span>
<span class="line">                insertedVnodeQueue<span class="token punctuation">,</span></span>
<span class="line">                parentElm<span class="token punctuation">,</span></span>
<span class="line">                oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span></span>
<span class="line">                <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">                newCh<span class="token punctuation">,</span></span>
<span class="line">                newStartIdx</span>
<span class="line">              <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token comment">// vnodeToMove将要移动的节点</span></span>
<span class="line">          newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 旧节点完成，新的没完成</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&gt;</span> oldEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        refElm <span class="token operator">=</span> <span class="token function">isUndef</span><span class="token punctuation">(</span>newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">addVnodes</span><span class="token punctuation">(</span></span>
<span class="line">          parentElm<span class="token punctuation">,</span></span>
<span class="line">          refElm<span class="token punctuation">,</span></span>
<span class="line">          newCh<span class="token punctuation">,</span></span>
<span class="line">          newStartIdx<span class="token punctuation">,</span></span>
<span class="line">          newEndIdx<span class="token punctuation">,</span></span>
<span class="line">          insertedVnodeQueue</span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 新的完成，老的没完成</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIdx <span class="token operator">&gt;</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">removeVnodes</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阅读全文</p>`,111),l=[o];function c(i,u){return a(),s("div",null,l)}const d=n(t,[["render",c],["__file","Vue-diff算法深入.html.vue"]]),k=JSON.parse('{"path":"/Vue-diff%E7%AE%97%E6%B3%95%E6%B7%B1%E5%85%A5.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/vue/16-diff%E7%AE%97%E6%B3%95%E6%B7%B1%E5%85%A5.html 一、前言 有同学问：能否详细说一下 diff 算法。 简单说：diff 算法是一种优化手段，将前后两个模块进行差异化比较，修补(更新)差异的过程...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/Vue-diff%E7%AE%97%E6%B3%95%E6%B7%B1%E5%85%A5.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/vue/16-diff%E7%AE%97%E6%B3%95%E6%B7%B1%E5%85%A5.html 一、前言 有同学问：能否详细说一下 diff 算法。 简单说：diff 算法是一种优化手段，将前后两个模块进行差异化比较，修补(更新)差异的过程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/pic4_zhimg_com_80_v2_4a8793499b4d1a5395f2b5f7d0584a4b_1440w.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-05T18:27:39.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-05T18:27:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/pic4_zhimg_com_80_v2_4a8793499b4d1a5395f2b5f7d0584a4b_1440w.jpg\\"],\\"dateModified\\":\\"2024-06-05T18:27:39.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、前言","slug":"一、前言","link":"#一、前言","children":[]},{"level":2,"title":"二、为什么要说这个 diff 算法？","slug":"二、为什么要说这个-diff-算法","link":"#二、为什么要说这个-diff-算法","children":[]},{"level":2,"title":"三、虚拟 dom 的 diff 算法","slug":"三、虚拟-dom-的-diff-算法","link":"#三、虚拟-dom-的-diff-算法","children":[{"level":3,"title":"3.1 vue 中 diff 算法","slug":"_3-1-vue-中-diff-算法","link":"#_3-1-vue-中-diff-算法","children":[]},{"level":3,"title":"3.2 React diff 算法","slug":"_3-2-react-diff-算法","link":"#_3-2-react-diff-算法","children":[]}]},{"level":2,"title":"四、为什么使用虚拟 dom？","slug":"四、为什么使用虚拟-dom","link":"#四、为什么使用虚拟-dom","children":[]},{"level":2,"title":"五、diff 算法的复杂度和特点？","slug":"五、diff-算法的复杂度和特点","link":"#五、diff-算法的复杂度和特点","children":[]},{"level":2,"title":"六、vue 的模板文件是如何被编译渲染的？","slug":"六、vue-的模板文件是如何被编译渲染的","link":"#六、vue-的模板文件是如何被编译渲染的","children":[{"level":3,"title":"1、mount 函数","slug":"_1、mount-函数","link":"#_1、mount-函数","children":[]},{"level":3,"title":"2、compileToFunction 函数","slug":"_2、compiletofunction-函数","link":"#_2、compiletofunction-函数","children":[]},{"level":3,"title":"3、compile 函数","slug":"_3、compile-函数","link":"#_3、compile-函数","children":[]},{"level":3,"title":"4、patch 函数","slug":"_4、patch-函数","link":"#_4、patch-函数","children":[]},{"level":3,"title":"总结一下","slug":"总结一下","link":"#总结一下","children":[]}]},{"level":2,"title":"七、vue2.x，vue3.x，React 中的 diff 有区别吗？","slug":"七、vue2-x-vue3-x-react-中的-diff-有区别吗","link":"#七、vue2-x-vue3-x-react-中的-diff-有区别吗","children":[]},{"level":2,"title":"八、diff 算法的源头 snabbdom 算法","slug":"八、diff-算法的源头-snabbdom-算法","link":"#八、diff-算法的源头-snabbdom-算法","children":[{"level":3,"title":"1、snabbdom 中定义 Vnode 的类型","slug":"_1、snabbdom-中定义-vnode-的类型","link":"#_1、snabbdom-中定义-vnode-的类型","children":[]},{"level":3,"title":"2、init 函数分析","slug":"_2、init-函数分析","link":"#_2、init-函数分析","children":[]},{"level":3,"title":"3、patch 函数分析","slug":"_3、patch-函数分析","link":"#_3、patch-函数分析","children":[]},{"level":3,"title":"4、h 函数分析","slug":"_4、h-函数分析","link":"#_4、h-函数分析","children":[]}]},{"level":2,"title":"九、diff 算法与 snabbdom 算法的差异地方？","slug":"九、diff-算法与-snabbdom-算法的差异地方","link":"#九、diff-算法与-snabbdom-算法的差异地方","children":[]}],"git":{"updatedTime":1717612059000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":2}]},"autoDesc":true,"filePathRelative":"Vue-diff算法深入.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/vue/16-diff%E7%AE%97%E6%B3%95%E6%B7%B1%E5%85%A5.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/vue/16-diff%E7%AE%97%E6%B3%95%E6%B7%B1%E5%85%A5.html</a></p>\\n<h2>一、前言</h2>\\n<p>有同学问：能否详细说一下 diff 算法。</p>"}');export{d as comp,k as data};
