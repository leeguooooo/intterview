import{_ as n,c as s,o as a,a as e}from"./app-TapK6V6W.js";const t="/images/s_poetries_work_uploads_2022_12_9df13e6c236538bd.png",p="/images/s_poetries_work_uploads_2022_12_50910ca45a7ce35a.png",o="/images/s_poetries_work_gitee_2019_10_429.png",c="/images/s_poetries_work_gitee_2019_10_430.png",l={},i=e(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/react/01-React%20router%E5%8E%9F%E7%90%86.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/react/01-React%20router%E5%8E%9F%E7%90%86.html</a></p><h2 id="一、react-router基础之history" tabindex="-1"><a class="header-anchor" href="#一、react-router基础之history"><span>一、React Router基础之history</span></a></h2><h3 id="_1-1-history介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-history介绍"><span>1.1 History介绍</span></a></h3><blockquote><p><code>history</code>是一个独立的第三方js库，可以用来兼容在不同浏览器、不同环境下对历史记录的管理，拥有统一的<code>API</code>。具体来说里面的<code>history</code>分为三类</p></blockquote><ul><li>老浏览器的<code>history</code>: 主要通过<code>hash</code>来实现，对应<code>createHashHistory</code></li><li>高版本浏览器: 通过<code>html5</code>里面的<code>history</code>，对应<code>createBrowserHistory</code></li><li><code>node</code>环境下: 主要存储在<code>memeory</code>里面，对应<code>createMemoryHistory</code></li></ul><blockquote><p>上面针对不同的环境提供了三个<code>API</code>，但是三个<code>API</code>有一些共性的操作，将其抽象了一个公共的文件<code>createHistory</code></p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 内部的抽象实现</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">createHistory</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        listenBefore<span class="token punctuation">,</span> <span class="token comment">// 内部的hook机制，可以在location发生变化前执行某些行为，AOP的实现</span></span>
<span class="line">        listen<span class="token punctuation">,</span> <span class="token comment">// location发生改变时触发回调</span></span>
<span class="line">        transitionTo<span class="token punctuation">,</span> <span class="token comment">// 执行location的改变</span></span>
<span class="line">        push<span class="token punctuation">,</span> <span class="token comment">// 改变location</span></span>
<span class="line">        replace<span class="token punctuation">,</span></span>
<span class="line">        go<span class="token punctuation">,</span></span>
<span class="line">        goBack<span class="token punctuation">,</span></span>
<span class="line">        goForward<span class="token punctuation">,</span></span>
<span class="line">        createKey<span class="token punctuation">,</span> <span class="token comment">// 创建location的key，用于唯一标示该location，是随机生成的</span></span>
<span class="line">        createPath<span class="token punctuation">,</span></span>
<span class="line">        createHref<span class="token punctuation">,</span></span>
<span class="line">        createLocation<span class="token punctuation">,</span> <span class="token comment">// 创建location</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上述这些方式是<code>history</code>内部最基础的方法，<code>createHashHistory</code>、<code>createBrowserHistory</code>、<code>createMemoryHistory</code>只是覆盖其中的某些方法而已。其中需要注意的是，此时的<code>location</code>跟浏览器原生的<code>location</code>是不相同的，最大的区别就在于里面多了<code>key</code>字段，<code>history</code>内部通过<code>key</code>来进行<code>location</code>的操作</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">createLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        pathname<span class="token punctuation">,</span> <span class="token comment">// url的基本路径</span></span>
<span class="line">        search<span class="token punctuation">,</span> <span class="token comment">// 查询字段</span></span>
<span class="line">        hash<span class="token punctuation">,</span> <span class="token comment">// url中的hash值</span></span>
<span class="line">        state<span class="token punctuation">,</span> <span class="token comment">// url对应的state字段</span></span>
<span class="line">        action<span class="token punctuation">,</span> <span class="token comment">// 分为 push、replace、pop三种</span></span>
<span class="line">        key <span class="token comment">// 生成方法为: Math.random().toString(36).substr(2, length)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-内部解析" tabindex="-1"><a class="header-anchor" href="#_1-2-内部解析"><span>1.2 内部解析</span></a></h3><blockquote><p>三个<code>API</code>的大致的技术实现如下</p></blockquote><ul><li><code>createBrowserHistory</code>: 利用<code>HTML5</code>里面的<code>history</code></li><li><code>createHashHistory</code>: 通过<code>hash</code>来存储在不同状态下的<code>history</code>信息</li><li><code>createMemoryHistory</code>: 在内存中进行历史记录的存储\`</li></ul><h4 id="_1-2-1-执行url前进" tabindex="-1"><a class="header-anchor" href="#_1-2-1-执行url前进"><span>1.2.1 执行URL前进</span></a></h4><ul><li><code>createBrowserHistory</code>: <code>pushState</code>、<code>replaceState</code></li><li><code>createHashHistory</code>: <code>location.hash=*** location.replace()</code></li><li><code>createMemoryHistory</code>: 在内存中进行历史记录的存储</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 伪代码</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// createBrowserHistory(HTML5)中的前进实现</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">finishTransition</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">const</span> historyState <span class="token operator">=</span> <span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>action <span class="token operator">===</span> <span class="token string">&#39;PUSH&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>historyState<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>historyState<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// createHashHistory的内部实现</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">finishTransition</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>action <span class="token operator">===</span> <span class="token string">&#39;PUSH&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> path<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span></span>
<span class="line">        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search <span class="token operator">+</span> <span class="token string">&#39;#&#39;</span> <span class="token operator">+</span> path</span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// createMemoryHistory的内部实现</span></span>
<span class="line">    entries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">finishTransition</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      <span class="token keyword">switch</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token string">&#39;PUSH&#39;</span><span class="token operator">:</span></span>
<span class="line">          entries<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token string">&#39;REPLACE&#39;</span><span class="token operator">:</span></span>
<span class="line">          entries<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">=</span> location<span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-2-检测url回退" tabindex="-1"><a class="header-anchor" href="#_1-2-2-检测url回退"><span>1.2.2 检测URL回退</span></a></h4><ul><li><code>createBrowserHistory</code>: <code>popstate</code></li><li><code>createHashHistory</code>: <code>hashchange</code></li><li><code>createMemoryHistory</code>:因为是在内存中操作，跟浏览器没有关系，不涉及<code>UI</code>层面的事情，所以可以直接进行历史信息的回退</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 伪代码</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// createBrowserHistory(HTML5)中的后退检测</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">startPopStateListener</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> transitionTo <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">popStateListener</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span></span>
<span class="line">        <span class="token function">transitionTo</span><span class="token punctuation">(</span> <span class="token function">getCurrentLocation</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">addEventListener</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateListener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">     </span>
<span class="line">    <span class="token comment">// createHashHistory的后退检测</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">startPopStateListener</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> transitionTo <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">hashChangeListener</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span></span>
<span class="line">        <span class="token function">transitionTo</span><span class="token punctuation">(</span> <span class="token function">getCurrentLocation</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">addEventListener</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> hashChangeListener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// createMemoryHistory的内部实现</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token operator">...</span></span>
<span class="line">        current <span class="token operator">+=</span> n<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> currentLocation <span class="token operator">=</span> <span class="token function">getCurrentLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// change action to POP</span></span>
<span class="line">      history<span class="token punctuation">.</span><span class="token function">transitionTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>currentLocation<span class="token punctuation">,</span> <span class="token literal-property property">action</span><span class="token operator">:</span> <span class="token constant">POP</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-3-state的存储" tabindex="-1"><a class="header-anchor" href="#_1-2-3-state的存储"><span>1.2.3 state的存储</span></a></h4><blockquote><p>为了维护<code>state</code>的状态，将其存储在<code>sessionStorage</code>里面:</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// createBrowserHistory/createHashHistory中state的存储</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">saveState</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token function">createKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">readState</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      json <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token function">createKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// createMemoryHistory仅仅在内存中，所以操作比较简单</span></span>
<span class="line">    <span class="token keyword">const</span> storage <span class="token operator">=</span> <span class="token function">createStateStorage</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// storage = {entry.key: entry.state}</span></span>
<span class="line">     </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">saveState</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      storage<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> state</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">readState</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> storage<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-小结" tabindex="-1"><a class="header-anchor" href="#_1-3-小结"><span>1.3 小结</span></a></h3><p><strong>路由原理</strong></p><blockquote><p>前端路由实现起来其实很简单，本质就是监听 <code>URL</code> 的变化，然后匹配路由规则，显示相应的页面，并且无须刷新。目前单页面使用的路由就只有两种实现方式</p></blockquote><ul><li><code>hash</code> 模式</li><li><code>history</code> 模式</li></ul><blockquote><ul><li><code>www.test.com/##/</code> 就是 <code>Hash URL</code>，当 <code>##</code> 后面的哈希值发生变化时，不会向服务器请求数据，可以通过 <code>hashchange</code> 事件来监听到 <code>URL</code> 的变化，从而进行跳转页面。</li><li><code>History</code>模式是 <code>HTML5</code>新推出的功能，比之 <code>Hash URL</code> 更加美观</li></ul></blockquote><h2 id="二、react-router的基本原理" tabindex="-1"><a class="header-anchor" href="#二、react-router的基本原理"><span>二、react-router的基本原理</span></a></h2><blockquote><p>实现<code>URL</code>与<code>UI</code>界面的同步。其中在<code>react-router</code>中，<code>URL</code>对应<code>Location</code>对象，而<code>UI</code>是由<code>react components</code>来决定的，这样就转变成<code>location</code>与<code>components</code>之间的同步问题</p></blockquote><h3 id="_2-1-优点" tabindex="-1"><a class="header-anchor" href="#_2-1-优点"><span>2.1 优点</span></a></h3><ul><li>与<code>React</code>融为一体,专为<code>react</code>量身打造，编码风格与<code>react</code>保持一致，例如路由的配置可以通过<code>component</code>来实现</li><li>不需要手工维护路由<code>state</code>，使代码变得简单</li><li>强大的路由管理机制，体现在如下方面 <ul><li>路由配置: 可以通过组件、配置对象来进行路由的配置</li><li>路由切换: 可以通过<code>&lt;Link&gt;</code> <code>Redirect</code>进行路由的切换</li><li>路由加载: 可以同步记载，也可以异步加载，这样就可以实现按需加载</li></ul></li><li>使用方式: 不仅可以在浏览器端的使用，而且可以在服务器端的使用</li></ul><h3 id="_2-2-react-router具体实现" tabindex="-1"><a class="header-anchor" href="#_2-2-react-router具体实现"><span>2.2 react-router具体实现</span></a></h3><blockquote><p><code>react-router</code>在<code>history</code>库的基础上，实现了<code>URL</code>与<code>UI</code>的同步，分为两个层次来描述具体的实现。</p></blockquote><p><strong>组件层面描述实现过程</strong></p><blockquote><p>在<code>react-router</code>中最主要的<code>component</code>是<code>Router RouterContext Link</code>，<code>history</code>库起到了中间桥梁的作用</p></blockquote><p><img src="`+t+`" alt=""></p><blockquote><p>以<code>browserHistory</code>(一种<code>history</code>类型:一个 <code>history</code> 知道如何去监听浏览器地址栏的变化， 并解析这个 <code>URL</code> 转化为 <code>location</code> 对象)为例 :</p></blockquote><ul><li><code>browserHistory</code>进行路由<code>state</code>管理,主要通过<code>sessionStorage</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">//保存　路由state(router state)</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">saveState</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token function">createKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//读取路由state</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">readState</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span></span>
<span class="line">      json <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token function">createKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>其中<code>saveState</code>函数传进来的<code>state</code>是个<code>json</code>对象，如：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token punctuation">{</span><span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">}</span> <span class="token comment">///假设此时的location为&#39;/about&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>进行路由匹配，最终渲染对应的组件</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> About <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//About 组件</span></span>
<span class="line">    <span class="token keyword">const</span> Inbox <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//Inbox 组件</span></span>
<span class="line">    <span class="token keyword">const</span> Home <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//Home组件</span></span>
<span class="line">     <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> Child</span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>route<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">case</span> <span class="token string">&#39;/about&#39;</span><span class="token operator">:</span> Child <span class="token operator">=</span> About<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">case</span> <span class="token string">&#39;/inbox&#39;</span><span class="token operator">:</span> Child <span class="token operator">=</span> Inbox<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">default</span><span class="token operator">:</span>      Child <span class="token operator">=</span> Home<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>App<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;#/about&quot;</span><span class="token operator">&gt;</span>About<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;#/inbox&quot;</span><span class="token operator">&gt;</span>Inbox<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Child<span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>API层面描述实现过程</strong></p><blockquote><p>为了简单说明，只描述使用<code>browserHistory</code>的实现，<code>hashHistory</code>的实现过程是类似的，就不在说明</p></blockquote><p><img src="`+p+'" alt=""></p><h3 id="_2-3-用户点击了link组件后路由系统中到底发生了哪些变化" tabindex="-1"><a class="header-anchor" href="#_2-3-用户点击了link组件后路由系统中到底发生了哪些变化"><span>2.3 用户点击了Link组件后路由系统中到底发生了哪些变化</span></a></h3><p><img src="'+o+`" alt="img"></p><blockquote><p><code>Link</code> 组件最终会渲染为 <code>HTML</code> 标签 <code>&lt;a&gt;</code>，它的 <code>to</code>、<code>query</code>、<code>hash</code>属性会被组合在一起并渲染为 <code>href</code> 属性。虽然 <code>Link</code> 被渲染为超链接，但在内部实现上使用脚本拦截了浏览器的默认行为，然后调用了<code>history.pushState</code> 方法</p></blockquote><ul><li>系统会将上述 <code>location</code>对象作为参数传入到 <code>TransitionTo</code>方法中，然后调用 <code>window.location.hash</code> 或者<code>window.history.pushState()</code> 修改了应用的 <code>URL</code>，这取决于你创建<code>history</code>对象的方式。同时会触发<code>history.listen</code> 中注册的事件监听器。</li><li>接下来请看路由系统内部是如何修改<code>UI</code> 的。在得到了新的<code>location</code>对象后，系统内部的 <code>matchRoutes</code> 方法会匹配出<code>Route</code> 组件树中与当前<code>location</code>对象匹配的一个子集，并且得到了 <code>nextState</code>，具体的匹配算法不在这里讲解，感兴趣的同学可以点击查看，<code>state</code> 的结构如下</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    nextState <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      location<span class="token punctuation">,</span> <span class="token comment">// 当前的 location 对象</span></span>
<span class="line">      routes<span class="token punctuation">,</span> <span class="token comment">// 与 location 对象匹配的 Route 树的子集，是一个数组</span></span>
<span class="line">      params<span class="token punctuation">,</span> <span class="token comment">// 传入的 param，即 URL 中的参数</span></span>
<span class="line">      components<span class="token punctuation">,</span> <span class="token comment">// routes 中每个元素对应的组件，同样是数组</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 <code>Router</code> 组件的 <code>componentWillMount</code> 生命周期方法中调用了 <code>history.listen(listener)</code> 方法。<code>listener</code> 会在上述 <code>matchRoutes</code> 方法执行成功后执行<code>listener(nextState)</code>，<code>nextState</code>对象每个属性的具体含义已经在上述代码中注释，接下来执行<code>this.setState(nextState)</code> 就可以实现重新渲染 <code>Router</code>组件。举个简单的例子，当 URL（准确的说应该是 <code>location.pathname</code>） 为 <code>/archives/posts</code> 时，应用的匹配结果如下图所示</p></blockquote><p><img src="`+c+'" alt="img"></p><blockquote><p>到这里，系统已经完成了当用户点击一个由 <code>Link</code> 组件渲染出的超链接到页面刷新的全过程</p></blockquote><p>阅读全文</p>',54),r=[i];function u(d,k){return a(),s("div",null,r)}const m=n(l,[["render",u],["__file","React-React router原理.html.vue"]]),h=JSON.parse('{"path":"/React-React%20router%E5%8E%9F%E7%90%86.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/react/01-React%20router%E5%8E%9F%E7%90%86.html 一、React Router基础之history 1.1 History介绍 history是一个独立的第三方js库，可以用来兼容在不同浏览器、不同环境下对...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/React-React%20router%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/react/01-React%20router%E5%8E%9F%E7%90%86.html 一、React Router基础之history 1.1 History介绍 history是一个独立的第三方js库，可以用来兼容在不同浏览器、不同环境下对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_uploads_2022_12_9df13e6c236538bd.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-05T18:27:39.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-05T18:27:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_uploads_2022_12_9df13e6c236538bd.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_uploads_2022_12_50910ca45a7ce35a.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_429.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_430.png\\"],\\"dateModified\\":\\"2024-06-05T18:27:39.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、React Router基础之history","slug":"一、react-router基础之history","link":"#一、react-router基础之history","children":[{"level":3,"title":"1.1 History介绍","slug":"_1-1-history介绍","link":"#_1-1-history介绍","children":[]},{"level":3,"title":"1.2 内部解析","slug":"_1-2-内部解析","link":"#_1-2-内部解析","children":[]},{"level":3,"title":"1.3 小结","slug":"_1-3-小结","link":"#_1-3-小结","children":[]}]},{"level":2,"title":"二、react-router的基本原理","slug":"二、react-router的基本原理","link":"#二、react-router的基本原理","children":[{"level":3,"title":"2.1 优点","slug":"_2-1-优点","link":"#_2-1-优点","children":[]},{"level":3,"title":"2.2 react-router具体实现","slug":"_2-2-react-router具体实现","link":"#_2-2-react-router具体实现","children":[]},{"level":3,"title":"2.3 用户点击了Link组件后路由系统中到底发生了哪些变化","slug":"_2-3-用户点击了link组件后路由系统中到底发生了哪些变化","link":"#_2-3-用户点击了link组件后路由系统中到底发生了哪些变化","children":[]}]}],"git":{"updatedTime":1717612059000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":2}]},"autoDesc":true,"filePathRelative":"React-React router原理.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/react/01-React%20router%E5%8E%9F%E7%90%86.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/react/01-React%20router%E5%8E%9F%E7%90%86.html</a></p>\\n<h2>一、React Router基础之history</h2>\\n<h3>1.1 History介绍</h3>"}');export{m as comp,h as data};
