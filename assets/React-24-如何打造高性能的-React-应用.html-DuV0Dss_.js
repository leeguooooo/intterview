import{_ as s,c as n,o as a,a as e}from"./app-f2Cpj3V4.js";const p="/images/s_poetries_work_images_20210428213034.png",t="/images/s_poetries_work_images_20210428213053.png",o="/images/s_poetries_work_images_20210428213110.png",l="/images/s_poetries_work_images_20210428213135.png",c="/images/s_poetries_work_images_20210428213705.png",i="/images/s_poetries_work_images_20210428214737.png",r="/images/s_poetries_work_images_20210428214749.png",u={},d=e(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/react/24-%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%20React%20%E5%BA%94%E7%94%A8.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/react/24-%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%20React%20%E5%BA%94%E7%94%A8.html</a></p><ul><li>使用 <code>shouldComponentUpdate</code> 规避冗余的更新逻辑</li><li><code>PureComponent + Immutable.js</code></li><li><code>React.memo</code> 与 <code>useMemo</code></li></ul><blockquote><p>注：这 3 个思路同时也是 React 面试中“性能优化”这一环的核心所在</p></blockquote><h2 id="善用-shouldcomponentupdate" tabindex="-1"><a class="header-anchor" href="#善用-shouldcomponentupdate"><span>善用 shouldComponentUpdate</span></a></h2><p><code>shouldComponentUpdate</code> 的调用形式如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><ul><li><code>render</code> 方法由于伴随着对虚拟 <code>DOM</code> 的构建和对比，过程可以说相当耗时。而在 <code>React</code> 当中，很多时候我们会不经意间就频繁地调用了 <code>render</code>。为了避免不必要的 <code>render</code> 操作带来的性能开销，React 提供了 <code>shouldComponentUpdate</code> 这个口子。React 组件会根据 <code>shouldComponentUpdate</code> 的返回值，来决定是否执行该方法之后的生命周期，进而决定是否对组件进行 <code>re-render</code>（重渲染）。</li><li><code>shouldComponentUpdate</code> 的默认值为 <code>true</code>，也就是说 “无条件 re- render”。在实际的开发中，我们往往通过手动往 <code>shouldComponentUpdate</code> 中填充判定逻辑，来实现“有条件的 re- render”。</li></ul></blockquote><p>首先我们来看两个子组件的代码，这里为了尽量简化与数据变更无关的逻辑，ChildA 和 ChildB 都只负责从父组件处读取数据并渲染，它们的编码分别如下所示。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// ChildA.js：</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ChildA</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ChildA 的render方法执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;childA&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">            子组件<span class="token constant">A</span>的内容：</span>
<span class="line">            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// ChildB.js：</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ChildB</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ChildB 的render方法执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;childB&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">            子组件<span class="token constant">B</span>的内容：</span>
<span class="line">            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 在共同的父组件 App.js 中，会将 ChildA 和 ChildB 组合起来，并分别向其中注入数据：</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> ChildA <span class="token keyword">from</span> <span class="token string">&#39;./ChildA&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> ChildB <span class="token keyword">from</span> <span class="token string">&#39;./ChildB&#39;</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">      state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">textA</span><span class="token operator">:</span> <span class="token string">&#39;我是A的文本&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">textB</span><span class="token operator">:</span> <span class="token string">&#39;我是B的文本&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function-variable function">changeA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">textA</span><span class="token operator">:</span> <span class="token string">&#39;A的文本被修改了&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function-variable function">changeB</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">textB</span><span class="token operator">:</span> <span class="token string">&#39;B的文本被修改了&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;container&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeA<span class="token punctuation">}</span><span class="token operator">&gt;</span>点击修改<span class="token constant">A</span>处的文本<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeB<span class="token punctuation">}</span><span class="token operator">&gt;</span>点击修改<span class="token constant">B</span>处的文本<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>ChildA text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>textA<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>ChildB text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>textB<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>App 组件最终渲染到界面上的效果如下图所示，两个子组件在图中分别被不同颜色的标注圈出：</p><p><img src="`+p+'" alt=""></p><p>通过点击左右两个按钮，我们可以分别对 ChildA 和 ChildB 中的文案进行修改。</p><p>由于初次渲染时，两个组件的 render 函数都必然会被触发，因此控制台在挂载完成后的输出内容如下图所示：</p><p><img src="'+t+'" alt=""></p><p>接下来我点击左侧的按钮，尝试对 A 处的文本进行修改。我们可以看到界面上只有 A 处的渲染效果发生了改变，如下图箭头处所示：</p><p><img src="'+o+'" alt=""></p><p>但是如果我们打开控制台，会发现输出的内容如下图所示：</p><p><img src="'+l+`" alt=""></p><p>这样的输出结果告诉我们，在刚刚的点击动作后，不仅 ChildA 的 re-render 被触发了，ChildB 的 re-render 也被触发了。</p><blockquote><p>在 React 中，<code>只要父组件发生了更新，那么所有的子组件都会被无条件更新</code>。这就导致了 ChildB 的 props 尽管没有发生任何变化，它本身也没有任何需要被更新的点，却还是会走一遍更新流程。</p></blockquote><p><strong>注：</strong> <code>同样的情况也适用于组件自身的更新：当组件自身调用了 setState 后，那么不管 setState 前后的状态内容是否真正发生了变化，它都会去走一遍更新流程</code>。</p><p>而在刚刚这个更新流程中，<code>shouldComponentUpdate</code> 函数没有被手动定义，因此它将返回“true”这个默认值。“true”则意味着对更新流程不作任何制止，也即所谓的“无条件 re- render”。在这种情况下，我们就可以考虑使用 <code>shouldComponentUpdate</code> 来对更新过程进行管控，避免没有意义的 re-render 发生。</p><p>现在我们就可以为 ChildB 加装这样一段 <code>shouldComponentUpdate</code> 逻辑：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token parameter">nextProps<span class="token punctuation">,</span> nextState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 判断 text 属性在父组件更新前后有没有发生变化，若没有发生变化，则返回 false</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>text <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 只有在 text 属性值确实发生变化时，才允许更新进行下去</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段逻辑中，我们对 ChildB 中的可变数据，也就是 this.props.text 这个属性进行了判断。</p><p>这样，当父组件 App 组件发生更新、进而试图触发 ChildB 的更新流程时，shouldComponentUpdate 就会充当一个“守门员”的角色：它会检查新下发的 <code>props.text</code> 是否和之前的值一致，如果一致，那么就没有更新的必要，直接返回“false”将整个 ChildB 的更新生命周期中断掉即可。只有当 props.text 确实发生变化时，它才会“准许” re-render 的发生。</p><p>在 <code>shouldComponentUpdate</code> 的加持下，当我们再次点击左侧按钮，试图修改 ChildA 的渲染内容时，控制台的输出就会变成下图这样：</p><p><img src="`+c+`" alt=""></p><p>我们看到，控制台中现在只有 ChildA 的 re-render 提示。ChildB “稳如泰山”，成功躲开了一次多余的渲染。</p><p>使用 <code>shouldComponentUpdate</code> 来调停不必要的更新，避免无意义的 re-render 发生，这是 React 组件中最基本的性能优化手段，也是最重要的手段。许多看似高级的玩法，都是基于 <code>shouldComponentUpdate</code> 衍生出来的。我们接下来要讲的 <code>PureComponent</code>，就是这类玩法中的典型。</p><h2 id="进阶玩法-purecomponent-immutable-js" tabindex="-1"><a class="header-anchor" href="#进阶玩法-purecomponent-immutable-js"><span>进阶玩法：PureComponent + Immutable.js</span></a></h2><p><strong>PureComponent：提前帮你安排好更新判定逻辑</strong></p><blockquote><p><code>shouldComponentUpdate</code> 虽然一定程度上帮我们解决了性能方面的问题，但每次避免 re-render，都要手动实现一次 <code>shouldComponentUpdate</code>，未免太累了。作为一个不喜欢重复劳动的前端开发者来说，在写了不计其数个 <code>shouldComponentUpdate</code> 逻辑之后，难免会怀疑人生</p></blockquote><p><code>React 15.3</code> 很明显听到了开发者的声音，它新增了一个叫 <code>PureComponent</code> 的类，恰到好处地解决了“程序员写 <code>shouldComponentUpdate</code> 写出腱鞘炎”这个问题。</p><blockquote><p><code>PureComponent 与 Component 的区别点</code>，就在于它内置了对 <code>shouldComponentUpdate</code> 的实现：<code>PureComponent</code> 将会在 <code>shouldComponentUpdate</code> 中对组件更新前后的 <code>props 和 state 进行浅比较</code>，并根据浅比较的结果，决定是否需要继续更新流程。</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ChildB</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ChildB 的render方法执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;childB&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">            子组件<span class="token constant">B</span>的内容：</span>
<span class="line">            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时再去修改 ChildA 中的文本，我们会发现 ChildB 同样不受影响</p><blockquote><p>在值类型数据这种场景下，<code>PureComponent</code> 可以说是战无不胜。但是如果数据类型为引用类型，那么这种基于浅比较的判断逻辑就会带来这样两个风险：</p></blockquote><ul><li>若数据内容没变，但是引用变了，那么浅比较仍然会认为“数据发生了变化”，进而触发一次不必要的更新，导致过度渲染；</li><li>若数据内容变了，但是引用没变，那么浅比较则会认为“数据没有发生变化”，进而阻断一次更新，导致不渲染。</li></ul><p>怎么办呢？<code>Immutable.js</code> 来帮忙！</p><p><strong>Immutable：“不可变值”让“变化”无处遁形</strong></p><blockquote><p><code>PureComponent 浅比较带来的问题，本质上是对“变化”的判断不够精准导致的</code>。那有没有一种办法，能够让引用的变化和内容的变化之间，建立一种必然的联系呢？</p></blockquote><p>这就是 <code>Immutable.js</code> 所做的事情。</p><p>Immutable 直译过来是“不可变的”，顾名思义，Immutable.js 是对“不可变值”这一思想的贯彻实践。它在 2014 年被 Facebook 团队推出，Facebook 给它的定位是“实现持久性数据结构的库”。所谓“持久性数据”，指的是这个数据只要被创建出来了，就不能被更改。我们对当前数据的任何修改动作，都会导致一个新的对象的返回。这就将数据内容的变化和数据的引用严格地关联了起来，使得“变化”无处遁形。</p><p>这里我用一个简单的例子，来演示一下 Immutable.js 的效果。请看下面代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 引入 immutable 库里的 Map 对象，它用于创建对象</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> Map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;immutable&#39;</span></span>
<span class="line">    <span class="token comment">// 初始化一个对象 baseMap</span></span>
<span class="line">    <span class="token keyword">const</span> baseMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;po&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">career</span><span class="token operator">:</span> <span class="token string">&#39;fe&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">99</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 使用 immutable 暴露的 Api 来修改 baseMap 的内容</span></span>
<span class="line">    <span class="token keyword">const</span> changedMap <span class="token operator">=</span> baseMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">100</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 我们会发现修改 baseMap 后将会返回一个新的对象，这个对象的引用和 baseMap 是不同的</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;baseMap === changedMap&#39;</span><span class="token punctuation">,</span> baseMap <span class="token operator">===</span> changedMap<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由此可见，<code>PureComonent 和 Immutable.js</code> 真是一对好基友！在实际的开发中，我们也确实经常左手 PureComonent，右手 Immutable.js，研发质量大大地提升呀！</p><blockquote><p>值得注意的是，由于 <code>Immutable.js</code> 存在一定的学习成本，并不是所有场景下都可以作为最优解被团队采纳。因此，一些团队也会基于 <code>PureComonent</code> 和 <code>Immutable.js</code> 去打造将两者结合的公共类，通过改写 setState 来提升研发体验，这也是不错的思路。</p></blockquote><h2 id="函数组件的性能优化-react-memo-和-usememo" tabindex="-1"><a class="header-anchor" href="#函数组件的性能优化-react-memo-和-usememo"><span>函数组件的性能优化：React.memo 和 useMemo</span></a></h2><blockquote><p>以上咱们讨论的都是类组件的优化思路。那么在函数组件中，有没有什么通用的手段可以阻止“过度 re- render”的发生呢？接下来我们就一起认识一下“函数版”的 <code>shouldComponentUpdate/Purecomponent</code> —— <code>React.memo</code>。</p></blockquote><p><strong>React.memo：“函数版”shouldComponentUpdate/PureComponent</strong></p><blockquote><p><code>React.memo</code> 是 React 导出的一个顶层函数，它本质上是一个高阶组件，负责对函数组件进行包装。基本的调用姿势如下面代码所示：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 定义一个函数组件</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">FunctionDemo</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> xxx</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// areEqual 函数是 memo 的第二个入参，我们之前放在 shouldComponentUpdate 里面的逻辑就可以转移至此处</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">areEqual</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">/*</span>
<span class="line">      return true if passing nextProps to render would return</span>
<span class="line">      the same result as passing prevProps to render,</span>
<span class="line">      otherwise return false</span>
<span class="line">      */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 使用 React.memo 来包装函数组件</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>FunctionDemo<span class="token punctuation">,</span> areEqual<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>React.memo</code>会帮我们“记住”函数组件的渲染结果，在组件前后两次 <code>props</code> 对比结果一致的情况下，它会直接复用最近一次渲染的结果。如果我们的组件在相同的 props 下会渲染相同的结果，那么使用 <code>React.memo</code> 来包装它将是个不错的选择。</p></blockquote><p>从示例中我们可以看出，<code>React.memo</code> 接收两个参数，<code>第一个参数是我们需要渲染的目标组件</code>，<code>第二个参数 areEqual 则用来承接 props 的对比逻辑</code>。之前我们在 <code>shouldComponentUpdate</code> 里面做的事情，现在就可以放在 areEqual 里来做。</p><p>比如开篇 Demo 中的 ChildB 组件，就完全可以用 <code>Function Component + React.memo</code> 来改造。改造后的 ChildB 代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 将 ChildB 改写为 function 组件</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">ChildB</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ChildB 的render 逻辑执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;childB&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">          子组件<span class="token constant">B</span>的内容：</span>
<span class="line">          <span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// areEqual 用于对比 props 的变化</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">areEqual</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> nextProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">.</span>text <span class="token operator">===</span> nextProps<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 使用 React.memo 来包装 ChildB</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>ChildB<span class="token punctuation">,</span> areEqual<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>改造后的组件在效果上就等价于 <code>shouldComponentUpdate</code> 加持后的类组件 <code>ChildB</code></p></blockquote><p>这里的 <code>areEqual 函数是一个可选参数</code>，当我们不传入 <code>areEqual</code> 时，<code>React.memo</code> 也可以工作，此时它的作用就类似于 <code>PureComponent——React.memo</code> 会自动为你的组件执行 <code>props 的浅比较逻辑</code>。</p><blockquote><p>和 <code>shouldComponentUpdate</code> 不同的是，<code>React.memo</code> 只负责对比 <code>props</code>，而不会去感知组件内部状态（<code>state</code>）的变化</p></blockquote><p><strong>useMemo：更加“精细”的 memo</strong></p><blockquote><p>通过上面的分析我们知道，<code>React.memo</code> 可以实现类似于 <code>shouldComponentUpdate</code> 或者 <code>PureComponent</code> 的效果，对组件级别的 re-render 进行管控。但是有时候，我们希望复用的并不是整个组件，而是组件中的某一个或几个部分。这种更加“精细化”的管控，就需要 <code>useMemo</code> 来帮忙了。</p></blockquote><p><strong>简而言之</strong> ，<code>React.memo 控制是否需要重渲染一个组件</code>，而 <code>useMemo 控制的则是是否需要重复执行某一段逻辑</code></p><p><code>useMemo</code> 的使用方式如下面代码所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>我们可以把目标逻辑作为第一个参数传入，把逻辑的依赖项数组作为第二个参数传入。这样只有当依赖项数组中的某个依赖发生变化时，<code>useMemo</code> 才会重新执行第一个入参中的目标逻辑</p></blockquote><p>这里我仍然以开篇的示例为例，现在我尝试向 ChildB 中传入两个属性：text 和 count，它们分别是一段文本和一个数字。当我点击右边的按钮时，只有 count 数字会发生变化。改造后的 App 组件代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span></span>
<span class="line">      state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">textA</span><span class="token operator">:</span> <span class="token string">&#39;我是A的文本&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">stateB</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;我是B的文本&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">10</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function-variable function">changeA</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">textA</span><span class="token operator">:</span> <span class="token string">&#39;A的文本被修改了&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function-variable function">changeB</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">stateB</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>stateB<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">100</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;container&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeA<span class="token punctuation">}</span><span class="token operator">&gt;</span>点击修改<span class="token constant">A</span>处的文本<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeB<span class="token punctuation">}</span><span class="token operator">&gt;</span>点击修改<span class="token constant">B</span>处的文本<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>ChildA text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>textA<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>ChildB <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>stateB<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ChildB 中，使用 <code>useMemo</code> 来加持 <code>text 和 count</code> 各自的渲染逻辑。改造后的 ChildB 代码如下所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> React<span class="token punctuation">,</span><span class="token punctuation">{</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ChildB</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>text<span class="token punctuation">,</span> count<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;ChildB 的render 逻辑执行了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// text 文本的渲染逻辑</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token function-variable function">renderText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;renderText 执行了&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span></span>
<span class="line">        子组件<span class="token constant">B</span>的文本内容：</span>
<span class="line">          <span class="token punctuation">{</span>text<span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// count 数字的渲染逻辑</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token function-variable function">renderCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;renderCount 执行了&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span></span>
<span class="line">          子组件<span class="token constant">B</span>的数字内容：</span>
<span class="line">            <span class="token punctuation">{</span>count<span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment">// 使用 useMemo 加持两段渲染逻辑</span></span>
<span class="line">      <span class="token keyword">const</span> textContent <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">renderText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>text<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">const</span> countContent <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">renderCount</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;childB&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>textContent<span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">{</span>countContent<span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染 App 组件，我们可以看到初次渲染时，renderText 和 renderCount 都执行了，控制台输出如下图所示：</p><p><img src="`+i+'" alt=""></p><p>点击右边按钮，对 count 进行修改，修改后的界面会发生如下的变化：</p><p><img src="'+r+'" alt=""></p><p>可以看出，由于 <code>count</code> 发生了变化，因此 <code>useMemo</code> 针对 <code>renderCount</code> 的逻辑进行了重计算。而 <code>text</code> 没有发生变化，因此 <code>renderText</code> 的逻辑压根没有执行。</p><p>使用 <code>useMemo</code>，我们可以对函数组件的执行逻辑进行更加细粒度的管控（尤其是定向规避掉一些高开销的计算），同时也弥补了 <code>React.memo</code> 无法感知函数内部状态的遗憾，这对我们整体的性能提升是大有裨益的。</p><p>阅读全文</p>',79),k=[d];function m(v,b){return a(),n("div",null,k)}const h=s(u,[["render",m],["__file","React-24-如何打造高性能的-React-应用.html.vue"]]),y=JSON.parse('{"path":"/React-24-%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84-React-%E5%BA%94%E7%94%A8.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/react/24-%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%20React%20%E5%BA%94%E7%94%A8.html 使用 should...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/React-24-%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84-React-%E5%BA%94%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/react/24-%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%20React%20%E5%BA%94%E7%94%A8.html 使用 should..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_images_20210428213034.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428213034.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428213053.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428213110.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428213135.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428213705.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428214737.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210428214749.png\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"善用 shouldComponentUpdate","slug":"善用-shouldcomponentupdate","link":"#善用-shouldcomponentupdate","children":[]},{"level":2,"title":"进阶玩法：PureComponent + Immutable.js","slug":"进阶玩法-purecomponent-immutable-js","link":"#进阶玩法-purecomponent-immutable-js","children":[]},{"level":2,"title":"函数组件的性能优化：React.memo 和 useMemo","slug":"函数组件的性能优化-react-memo-和-usememo","link":"#函数组件的性能优化-react-memo-和-usememo","children":[]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"React-24-如何打造高性能的-React-应用.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/react/24-%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%20React%20%E5%BA%94%E7%94%A8.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/react/24-%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%20React%20%E5%BA%94%E7%94%A8.html</a></p>"}');export{h as comp,y as data};
