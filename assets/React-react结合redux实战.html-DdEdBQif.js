import{_ as s,c as n,o as a,a as e}from"./app-DPCMlS-8.js";const p={},t=e(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/react/09-react%E7%BB%93%E5%90%88redux%E5%AE%9E%E6%88%98.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/react/09-react%E7%BB%93%E5%90%88redux%E5%AE%9E%E6%88%98.html</a></p><blockquote><p>以<code>TODO</code>为例分析，实际开发中并不是那么简单，下面的原型只是开发中的一个原型，这个简单的例子，有助于掌握数据处理传递的原则。</p></blockquote><h2 id="一、定义constants" tabindex="-1"><a class="header-anchor" href="#一、定义constants"><span>一、定义constants</span></a></h2><blockquote><p>这一步不是必须的</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 常量统一保存，便于管理</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">ADD_TODO</span> <span class="token operator">=</span> <span class="token string">&#39;ADD_TODO&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">TOGGLE_TODO</span> <span class="token operator">=</span> <span class="token string">&#39;TOGGLE_TODO&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SET_VISIBILITY</span> <span class="token operator">=</span> <span class="token string">&#39;SET_VISIBILITY&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//controll todo wheher show or hide</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SHOW_ALL</span> <span class="token operator">=</span> <span class="token string">&#39;SHOW_ALL&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SHOW_ACTIVE</span> <span class="token operator">=</span> <span class="token string">&#39;SHOW_ACTIVE&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SHOW_COMPLETED</span> <span class="token operator">=</span> <span class="token string">&#39;SHOW_COMPLETED&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、定义actioncreator" tabindex="-1"><a class="header-anchor" href="#二、定义actioncreator"><span>二、定义actionCreator</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 定义action creator</span>
<span class="line">     */</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionType <span class="token keyword">from</span> <span class="token string">&#39;../constant/index&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">let</span> nextTodo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span>actionType<span class="token punctuation">.</span><span class="token constant">ADD_TODO</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">id</span><span class="token operator">:</span>nextTodo<span class="token operator">++</span><span class="token punctuation">,</span></span>
<span class="line">      text</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">toggleTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span>actionType<span class="token punctuation">.</span><span class="token constant">TOGGLE_TODO</span><span class="token punctuation">,</span></span>
<span class="line">      id</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setVisibilityFilter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">filter</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">type</span><span class="token operator">:</span>actionType<span class="token punctuation">.</span><span class="token constant">SET_VISIBILITY</span><span class="token punctuation">,</span></span>
<span class="line">        filter</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、定义reducer" tabindex="-1"><a class="header-anchor" href="#三、定义reducer"><span>三、定义reducer</span></a></h2><p><strong>拆分reducer</strong></p><ul><li><code>SetVisibility.js</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 处理TODO可见与不可见的reducer</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionType <span class="token keyword">from</span> <span class="token string">&#39;../constant/index&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 初始状态是自己设置的 后面的状态会转化</span></span>
<span class="line">    <span class="token comment">// 接收当前状态(设置默认的过滤SHOW_ALL，如设置某些选项卡的active一样)，和action返回新的state</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> visibilityFilter <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token operator">=</span><span class="token string">&#39;SHOW_ALL&#39;</span><span class="token punctuation">,</span>action<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> actionType<span class="token punctuation">.</span><span class="token constant">SET_VISIBILITY</span><span class="token operator">:</span></span>
<span class="line">          <span class="token keyword">return</span> action<span class="token punctuation">.</span>filter<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">          <span class="token keyword">return</span> state<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>addTodo.js</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 定义处理action的reducers</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionType <span class="token keyword">from</span> <span class="token string">&#39;../constant/index&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//传入当前的状态空数、action</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">todos</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>action</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 匹配用户触发的actionType</span></span>
<span class="line">        <span class="token keyword">case</span> actionType<span class="token punctuation">.</span><span class="token constant">ADD_TODO</span><span class="token operator">:</span></span>
<span class="line">        <span class="token comment">// 合并上一次的状态和当前的状态 返回todos数组</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token operator">...</span>state<span class="token punctuation">,</span><span class="token comment">//把数组展开合并</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">              <span class="token literal-property property">id</span><span class="token operator">:</span>action<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">              <span class="token literal-property property">text</span><span class="token operator">:</span>action<span class="token punctuation">.</span>text<span class="token punctuation">,</span></span>
<span class="line">              <span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token comment">//用户控制TODO是否处于点击完成的状态 默认false 没点击</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">]</span></span>
<span class="line">          <span class="token comment">// TODO列表来回切换 遍历add_todo返回的数组 通过completed来判断</span></span>
<span class="line">        <span class="token keyword">case</span> actionType<span class="token punctuation">.</span><span class="token constant">TOGGLE_TODO</span><span class="token operator">:</span></span>
<span class="line">          <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id<span class="token operator">===</span>action<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">{</span><span class="token operator">...</span>todo<span class="token punctuation">,</span><span class="token literal-property property">completed</span><span class="token operator">:</span><span class="token operator">!</span>todo<span class="token punctuation">.</span>completed<span class="token punctuation">}</span><span class="token operator">:</span>todo<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">          <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token comment">//匹配不到返回state</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>合并reducer</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 合并reducers</span>
<span class="line">     */</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>todos<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./addTodo&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>visibilityFilter<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./SetVisibility&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      todos<span class="token punctuation">,</span> <span class="token comment">//这些键其实就是被拆分的状态，后面在容器组件中需要通过connect链接</span></span>
<span class="line">      visibilityFilter</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、定义store" tabindex="-1"><a class="header-anchor" href="#四、定义store"><span>四、定义store</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> applyMiddleware<span class="token punctuation">,</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&#39;../reducers/index&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> logger <span class="token keyword">from</span> <span class="token string">&#39;redux-logger&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 创建store 用来存储状态</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span></span>
<span class="line">      reducer<span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span> <span class="token comment">//处理日志中间件</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、结合react-redux" tabindex="-1"><a class="header-anchor" href="#五、结合react-redux"><span>五、结合react-redux</span></a></h2><blockquote><p>这里忽略展示组件，完成源码看文章结尾</p></blockquote><ul><li>首先我们在<code>container</code>组件中处理好之前分解合并的那些<code>reducer</code>的键，然后在通过<code>connect</code>链接，传递给展示组件的属性使用</li></ul><p><strong>容器组件处理</strong></p><blockquote><p>react-todos/src/container/FilterLink.js</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 处理数组过滤</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&#39;../components/Link&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> setVisibilityFilter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../actions/index&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 这里的ownProps指的是 FilterLink</span></span>
<span class="line">    <span class="token comment">// 这里的state其实就是之前分解的todos，visibilityFilter</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> ownProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">active</span><span class="token operator">:</span>ownProps<span class="token punctuation">.</span>filter <span class="token operator">===</span> state<span class="token punctuation">.</span>visibilityFilter</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     如果mapDispatchToProps是一个函数，会得到dispatch和ownProps（容器组件的props对象）两个参数。</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch<span class="token punctuation">,</span> ownProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 这里处理对应的事件，传递给展示组件的属性</span></span>
<span class="line">      <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setVisibilityFilter</span><span class="token punctuation">(</span>ownProps<span class="token punctuation">.</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span></span>
<span class="line">      mapStateToProps<span class="token punctuation">,</span></span>
<span class="line">      mapDispatchToProps</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>分析 <ul><li>这里通过<code>connect</code>组件把之前<code>reducer</code>处理的那些状态链接</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      todos<span class="token punctuation">,</span> <span class="token comment">//这些键其实就是被拆分的状态，后面在容器组件中需要通过connect链接</span></span>
<span class="line">      visibilityFilter</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>react-todos/src/container/VisibilityTodoList.js</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 处理可见于不可见组件的逻辑</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> TodoList <span class="token keyword">from</span> <span class="token string">&#39;../components/TodoList&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>toggleTodo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../actions/index&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionType <span class="token keyword">from</span> <span class="token string">&#39;../constant/index&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>toggleTodo<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// todos是返回的数组，filter是过滤的选项如SHOW_ALL SHOW_ACTIVE.</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">getVisibilityTodos</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">todos<span class="token punctuation">,</span>filter</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">switch</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> actionType<span class="token punctuation">.</span><span class="token constant">SHOW_ALL</span><span class="token operator">:</span></span>
<span class="line">          <span class="token keyword">return</span> todos<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> actionType<span class="token punctuation">.</span><span class="token constant">SHOW_ACTIVE</span><span class="token operator">:</span></span>
<span class="line">          <span class="token keyword">return</span> todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">t</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> actionType<span class="token punctuation">.</span><span class="token constant">SHOW_COMPLETED</span><span class="token operator">:</span></span>
<span class="line">          <span class="token keyword">return</span> todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">t</span> <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>completed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;未知的&#39;</span><span class="token operator">+</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 把状态转化为展示组件的属性转递过去</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">state</span> 也就是</span>
<span class="line">     * export default CombineReducers(<span class="token punctuation">{</span></span>
<span class="line">      Todos,</span>
<span class="line">      SetVisibility</span>
<span class="line">      *<span class="token punctuation">}</span>);</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">ownProps</span> 返回的容器组件本身的参数 如&lt;Filter name=&quot;poetries&quot;&gt;此时的ownProps就是name了</span>
<span class="line">     */</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token function">getVisibilityTodos</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">,</span>state<span class="token punctuation">.</span>visibilityFilter<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">count</span><span class="token operator">:</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span>length</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 如果mapDispatchToProps是一个对象，它的每个键名也是对应 UI 组件的同名参数，键值应该是一个函数，会被当作 Action creator ，返回的 Action 会由 Redux 自动发出</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">onTodoClick</span><span class="token operator">:</span> toggleTodo</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span></span>
<span class="line">      mapStateToProps<span class="token punctuation">,</span></span>
<span class="line">      mapDispatchToProps</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">(</span>TodoList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>react-todos/src/container/addTodos.js</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Addtodo的处逻辑</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>addTodo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../actions/index&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> AddTask <span class="token keyword">from</span> <span class="token string">&#39;../components/addTodo&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-redux&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> ownProps</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">      </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">addTodo</span><span class="token operator">:</span>addTodo</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span></span>
<span class="line">      mapStateToProps<span class="token punctuation">,</span></span>
<span class="line">      mapDispatchToProps</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">(</span>AddTask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>到此分析完毕，展示组件就不分析了，展示组件本身是没有数据的，需要container处理传递</p></blockquote><p><strong>完整的源码</strong></p><blockquote><p>https://github.com/poetries/react-todos</p></blockquote><p>阅读全文</p>`,33),l=[t];function o(c,i){return a(),n("div",null,l)}const u=s(p,[["render",o],["__file","React-react结合redux实战.html.vue"]]),d=JSON.parse('{"path":"/React-react%E7%BB%93%E5%90%88redux%E5%AE%9E%E6%88%98.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/react/09-react%E7%BB%93%E5%90%88redux%E5%AE%9E%E6%88%98.html 以TODO为例分析，实际开发中并不是那么简单，下面的原型只是开发中的一个原型，这个简单的例子，有助于掌握数据处理传递的原则。 一...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/React-react%E7%BB%93%E5%90%88redux%E5%AE%9E%E6%88%98.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/react/09-react%E7%BB%93%E5%90%88redux%E5%AE%9E%E6%88%98.html 以TODO为例分析，实际开发中并不是那么简单，下面的原型只是开发中的一个原型，这个简单的例子，有助于掌握数据处理传递的原则。 一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、定义constants","slug":"一、定义constants","link":"#一、定义constants","children":[]},{"level":2,"title":"二、定义actionCreator","slug":"二、定义actioncreator","link":"#二、定义actioncreator","children":[]},{"level":2,"title":"三、定义reducer","slug":"三、定义reducer","link":"#三、定义reducer","children":[]},{"level":2,"title":"四、定义store","slug":"四、定义store","link":"#四、定义store","children":[]},{"level":2,"title":"五、结合react-redux","slug":"五、结合react-redux","link":"#五、结合react-redux","children":[]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"React-react结合redux实战.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/react/09-react%E7%BB%93%E5%90%88redux%E5%AE%9E%E6%88%98.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/react/09-react%E7%BB%93%E5%90%88redux%E5%AE%9E%E6%88%98.html</a></p>\\n<blockquote>\\n<p>以<code>TODO</code>为例分析，实际开发中并不是那么简单，下面的原型只是开发中的一个原型，这个简单的例子，有助于掌握数据处理传递的原则。</p>\\n</blockquote>"}');export{u as comp,d as data};
