import{_ as n}from"./error-BYO_3BXn.js";import{_ as s,c as a,o as p,a as e}from"./app-DVMZDNEl.js";const t="/images/s_poetries_work_images_20210504203949.png",o="/images/s_poetries_work_images_202203211401980.png",c="/images/s_poetries_work_images_202203211401466.png",l="/images/s_poetries_work_images_20210504204037.png",i="/images/s_poetries_work_images_202203211402827.png",r="/images/s_poetries_work_images_202203211402516.png",u="/images/s_poetries_work_images_202203211402367.png",k="/images/s_poetries_work_images_202203211402146.png",d="/images/s_poetries_work_images_202203211402099.png",m="/images/s_poetries_work_images_202203211402455.png",v="/images/s_poetries_work_images_202203211402510.png",g="/images/s_poetries_work_images_202203211403570.png",b="/images/s_poetries_work_images_202203211403268.png",h="/images/s_poetries_work_images_202203211403738.png",f="/images/s_poetries_work_images_202203211403397.png",y="/images/s_poetries_work_images_202203211403428.png",w="/images/s_poetries_work_images_202203211403851.png",_="/images/s_poetries_work_images_202203211403763.png",x="/images/s_poetries_work_images_202203211403735.png",j="/images/s_poetries_work_images_202203211403294.png",C="/images/s_poetries_work_images_202203211403098.png",R="/images/s_poetries_work_images_202203211404678.png",S="/images/s_poetries_work_images_202203211404500.png",E="/images/s_poetries_work_images_202203211404332.png",M="/images/s_poetries_work_images_202203211404594.png",P="/images/s_poetries_work_images_202203211404673.png",A="/images/s_poetries_work_images_202203211404922.png",D="/images/s_poetries_work_images_202203211404848.png",N="/images/s_poetries_work_images_202203211405130.png",T="/images/s_poetries_work_images_202203211405780.png",I={},q=e('<p>原文链接: <a href="https://interview.poetries.top/principle-docs/react/26-React%E5%85%A8%E9%83%A8api%E8%A7%A3%E8%AF%BB.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/react/26-React%E5%85%A8%E9%83%A8api%E8%A7%A3%E8%AF%BB.html</a></p><h2 id="组件类" tabindex="-1"><a class="header-anchor" href="#组件类"><span>组件类</span></a></h2><p>组件类，详细分的话有三种类，第一类说白了就是我平时用于继承的基类组件<code>Component</code>,<code>PureComponent</code>,还有就是<code>react</code>提供的内置的组件，比如<code>Fragment</code>,<code>StrictMode</code>,另一部分就是高阶组件<code>forwardRef</code>,<code>memo</code>等。</p><p><img src="'+t+`" alt=""></p><h3 id="component" tabindex="-1"><a class="header-anchor" href="#component"><span>Component</span></a></h3><p><code>Component</code>是<code>class</code>组件的根基。\b类组件一切始于<code>Component</code>。对于<code>React.Component</code>使用，我们没有什么好讲的。我们这里重点研究一下<code>react</code>对<code>Component</code>做了些什么。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    react<span class="token operator">/</span>src<span class="token operator">/</span>ReactBaseClasses<span class="token punctuation">.</span>js</span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context<span class="token punctuation">,</span> updater</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token operator">=</span> emptyObject<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>updater <span class="token operator">=</span> updater <span class="token operator">||</span> ReactNoopUpdateQueue<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是<code>Component</code>函数，其中<code>updater</code>对象上保存着更新组件的方法。</p><p><strong>我们声明的类组件是什么时候以何种形式被实例化的呢？</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    react<span class="token operator">-</span>reconciler<span class="token operator">/</span>src<span class="token operator">/</span>ReactFiberClassComponent<span class="token punctuation">.</span>js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>constructClassInstance</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">constructClassInstance</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token parameter">workInProgress<span class="token punctuation">,</span></span>
<span class="line">        ctor<span class="token punctuation">,</span></span>
<span class="line">        props</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        instance<span class="token punctuation">.</span>updater <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            isMounted<span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">/* setState 触发这里面的逻辑 */</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">enqueueReplaceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">enqueueForceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">/* forceUpdate 触发这里的逻辑 */</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于<code>Component</code>， <code>react</code> 处理逻辑还是很简单的，实例化我们类组件，然后赋值<code>updater</code>对象，负责组件的更新。然后在组件各个阶段，执行类组件的<code>render</code>函数，和对应的生命周期函数就可以了。</p><h3 id="purecomponent" tabindex="-1"><a class="header-anchor" href="#purecomponent"><span>PureComponent</span></a></h3><p><code>PureComponent</code>和 <code>Component</code>用法，差不多一样，唯一不同的是，纯组件<code>PureComponent</code>会浅比较，<code>props</code>和<code>state</code>是否相同，来决定是否重新渲染组件。所以一般用于<strong>性能调优</strong> ，减少<strong>render</strong> 次数。</p><p>什么叫做<strong>浅比较</strong> ，我这里举个列子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span></span>
<span class="line">               <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">                  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;alien&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">28</span></span>
<span class="line">               <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function-variable function">handerClick</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</span>
<span class="line">            data<span class="token punctuation">.</span>age<span class="token operator">++</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;box&quot;</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;show&quot;</span> <span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> 你的姓名是<span class="token operator">:</span> <span class="token punctuation">{</span> data<span class="token punctuation">.</span>name <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> 年龄： <span class="token punctuation">{</span> data<span class="token punctuation">.</span>age  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handerClick <span class="token punctuation">}</span> <span class="token operator">&gt;</span>age<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+'" alt=""></p><p><img src="'+n+`" alt="pureComponent.gif"><br><p>出错的图片链接: <a href="!%5B%5D(https://s.poetries.work/images/202203211401980.png)" target="_blank">!%5B%5D(https://s.poetries.work/images/202203211401980.png)</a></p></p><p><strong>点击按钮，没有任何反应</strong> ，因为<code>PureComponent</code>会比较两次<code>data</code>对象，都指向同一个<code>data</code>,没有发生改变，所以不更新视图。</p><p>解决这个问题很简单，只需要在<code>handerClick</code>事件中这么写：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token operator">...</span>data<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>浅拷贝</strong> 就能根本解决问题。</p><h3 id="memo" tabindex="-1"><a class="header-anchor" href="#memo"><span>memo</span></a></h3><p><code>React.memo</code>和<code>PureComponent</code>作用类似，可以用作性能优化，<code>React.memo</code> 是高阶组件，函数组件和类组件都可以使用， 和区别<code>PureComponent</code>是 <code>React.memo</code>只能对<code>props</code>的情况确定是否渲染，而<code>PureComponent</code>是针对<code>props</code>和<code>state</code>。</p><p><code>React.memo</code> 接受两个参数，第一个参数原始组件本身，第二个参数，可以根据一次更新中<code>props</code>是否相同决定原始组件是否重新渲染。是一个返回布尔值，<code>true</code> 证明组件无须重新渲染，<code>false</code>证明组件需要重新渲染，这个和类组件中的<code>shouldComponentUpdate()</code>正好相反 。</p><p><strong>React.memo: 第二个参数 返回<code>true</code> 组件不渲染 ， 返回 <code>false</code> 组件重新渲染。</strong><strong>shouldComponentUpdate: 返回<code>true</code> 组件渲染 ， 返回 <code>false</code> 组件不渲染。</strong></p><p>接下来我们做一个场景，控制组件在仅此一个<code>props</code>数字变量，一定范围渲染。</p><p>例子🌰：</p><p>控制 <code>props</code> 中的 <code>number</code> ：</p><ul><li>1 只有 <code>number</code> 更改，组件渲染。</li><li>2 只有 <code>number</code> 小于 5 ，组件渲染。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">TextMemo</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;子组件渲染&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">controlIsRender</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>number <span class="token operator">===</span> next<span class="token punctuation">.</span>number  <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// number 不改变 ，不渲染组件</span></span>
<span class="line">           <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>number <span class="token operator">!==</span> next<span class="token punctuation">.</span>number <span class="token operator">&amp;&amp;</span> next<span class="token punctuation">.</span>number <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// number 改变 ，但值大于5 ， 不渲染组件</span></span>
<span class="line">           <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 否则渲染组件</span></span>
<span class="line">           <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">       <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> NewTexMemo <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span>TextMemo<span class="token punctuation">,</span>controlIsRender<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token literal-property property">number</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token literal-property property">num</span><span class="token operator">:</span><span class="token number">1</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> num <span class="token punctuation">,</span> number <span class="token punctuation">}</span>  <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                    改变num：当前值 <span class="token punctuation">{</span> num <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">num</span><span class="token operator">:</span>num <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">&gt;</span>num<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">num</span><span class="token operator">:</span>num <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">&gt;</span>num<span class="token operator">--</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                    改变number： 当前值 <span class="token punctuation">{</span> number <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span>number <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">&gt;</span> number <span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span>number <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">&gt;</span> number <span class="token operator">--</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>NewTexMemo num<span class="token operator">=</span><span class="token punctuation">{</span> num <span class="token punctuation">}</span> number<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果：</strong></p><p><img src="`+c+`" alt=""></p><p>完美达到了效果，<code>React.memo</code>一定程度上，可以等价于组件外部使用<code>shouldComponentUpdate</code> ，用于拦截新老<code>props</code>，确定组件是否更新。</p><h3 id="forwardref" tabindex="-1"><a class="header-anchor" href="#forwardref"><span>forwardRef</span></a></h3><p>官网对<code>forwardRef</code>的概念和用法很笼统，也没有给定一个具体的案例。很多同学不知道 <code>forwardRef</code>具体怎么用，下面我结合具体例子给大家讲解<code>forwardRef</code>应用场景。</p><p><strong>1 转发引入Ref</strong></p><p>这个场景实际很简单，比如父组件想获取孙组件，某一个<code>dom</code>元素。这种隔代<code>ref</code>获取引用，就需要<code>forwardRef</code>来助力。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">Son</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> grandRef <span class="token punctuation">}</span> <span class="token operator">=</span> props</span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> i am alien <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>span ref<span class="token operator">=</span><span class="token punctuation">{</span>grandRef<span class="token punctuation">}</span> <span class="token operator">&gt;</span>这个是想要获取元素<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>Son grandRef<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>grandRef<span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> NewFather <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>ref</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token operator">&lt;</span>Father grandRef<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">GrandFather</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        node <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>NewFather ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong></p><p><img src="`+l+`" alt=""></p><p><code>react</code>不允许<code>ref</code>通过<code>props</code>传递，因为组件上已经有 <code>ref</code> 这个属性,在组件调和过程中，已经被特殊处理，<code>forwardRef</code>出现就是解决这个问题，把<code>ref</code>转发到自定义的<code>forwardRef</code>定义的属性上，让<code>ref</code>，可以通过<code>props</code>传递。</p><p><strong>2 高阶组件转发Ref</strong></p><p>一文吃透<code>hoc</code>文章中讲到，由于属性代理的<code>hoc</code>，被包裹一层，所以如果是类组件，是通过<code>ref</code>拿不到原始组件的实例的，不过我们可以通过<code>forWardRef</code>转发<code>ref</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token constant">HOC</span><span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">class</span> <span class="token class-name">Wrap</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">         <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> forwardedRef <span class="token punctuation">,</span><span class="token operator">...</span>otherprops  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props</span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component ref<span class="token operator">=</span><span class="token punctuation">{</span>forwardedRef<span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">...</span>otherprops<span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span>  React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>ref</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Wrap forwardedRef<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> HocIndex <span class="token operator">=</span>  <span class="token constant">HOC</span><span class="token punctuation">(</span>Index<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">         <span class="token comment">/* 就可以跨层级，捕获到 Index 组件的实例了 */</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>current<span class="token punctuation">.</span>componentDidMount<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>HocIndex ref<span class="token operator">=</span><span class="token punctuation">{</span>node<span class="token punctuation">}</span>  <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，解决了高阶组件引入<code>Ref</code>的问题。</p><h3 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy"><span>lazy</span></a></h3><blockquote><p>React.lazy 和 Suspense 技术还不支持服务端渲染。如果你想要在使用服务端渲染的应用中使用，我们推荐 Loadable Components 这个库</p></blockquote><p><code>React.lazy</code>和<code>Suspense</code>配合一起用，能够有动态加载组件的效果。<code>React.lazy</code> 接受一个函数，这个函数需要动态调用 <code>import()</code>。它必须返回一个 <code>Promise</code> ，该 <code>Promise</code> 需要 <code>resolve</code> 一个 <code>default export</code> 的 <code>React</code> 组件。</p><p>我们模拟一个动态加载的场景。</p><p><strong>父组件</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">import</span> Test <span class="token keyword">from</span> <span class="token string">&#39;./comTest&#39;</span></span>
<span class="line">    <span class="token keyword">const</span> LazyComponent <span class="token operator">=</span>  React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                  <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;context_box&quot;</span>  style<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span> <span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span class="token operator">&gt;</span></span>
<span class="line">               <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;icon&quot;</span> <span class="token operator">&gt;</span><span class="token operator">&lt;</span>SyncOutlined  spin  <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">                   <span class="token operator">&lt;</span>LazyComponent <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">               <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Suspense<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们用<code>setTimeout</code>来模拟<code>import</code>异步引入效果。</p><p><strong>Test</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;--componentDidMount--&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>alien<span class="token punctuation">}</span>  className<span class="token operator">=</span><span class="token string">&quot;alien&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong></p><p><img src="`+i+`" alt=""></p><h3 id="suspense" tabindex="-1"><a class="header-anchor" href="#suspense"><span>Suspense</span></a></h3><p>何为<code>Suspense</code>, <code>Suspense</code> 让组件“等待”某个异步操作，直到该异步操作结束即可渲染。</p><p>用于数据获取的 <code>Suspense</code> 是一个新特性，你可以使用 <code>&lt;Suspense&gt;</code> 以声明的方式来“等待”任何内容，包括数据。本文重点介绍它在数据获取的用例，它也可以用于等待图像、脚本或其他异步的操作。</p><p>上面讲到高阶组件<code>lazy</code>时候，已经用 <code>lazy</code> + <code>Suspense</code>模式，构建了异步渲染组件。我们看一下官网文档中的案例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> ProfilePage <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./ProfilePage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 懒加载</span></span>
<span class="line">    <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>Spinner <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span>ProfilePage <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fragment" tabindex="-1"><a class="header-anchor" href="#fragment"><span>Fragment</span></a></h3><p><code>react</code>不允许一个组件返回多个节点元素，比如说如下情况</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍎🍎🍎 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">               <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍌🍌🍌 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">               <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍇🍇🍇 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想解决这个情况，很简单，只需要在外层套一个容器元素。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">               <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍎🍎🍎 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">               <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍌🍌🍌 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">               <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍇🍇🍇 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我们不期望，增加额外的<code>dom</code>节点，所以<code>react</code>提供<code>Fragment</code>碎片概念，能够让一个组件返回多个元素。 所以我们可以这么写</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍎🍎🍎 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍌🍌🍌 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍇🍇🍇 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以简写成：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍎🍎🍎 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍌🍌🍌 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span> 🍇🍇🍇 <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和<code>Fragment</code>区别是，<code>Fragment</code>可以支持<code>key</code>属性。<code>&lt;&gt;&lt;/&gt;</code>不支持<code>key</code>属性。</p><p><strong>温馨提示</strong> 。我们通过<code>map</code>遍历后的元素，<code>react</code>底层会处理，默认在外部嵌套一个<code>&lt;Fragment&gt;</code>。</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token punctuation">{</span></span>
<span class="line">       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token operator">&lt;</span>span key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span> <span class="token operator">&gt;</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>react</code>底层处理之后，等价于：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="profiler" tabindex="-1"><a class="header-anchor" href="#profiler"><span>Profiler</span></a></h3><p><code>Profiler</code>这个<code>api</code>一般用于开发阶段，性能检测，检测一次<code>react</code>组件渲染用时，性能开销。</p><p><code>Profiler</code> 需要两个参数：</p><p>第一个参数：是 <code>id</code>，用于表识唯一性的<code>Profiler</code>。</p><p>第二个参数：<code>onRender</code>回调函数，用于渲染完成，接受渲染参数。</p><p><strong>实践：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">index</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token operator">&lt;</span>div <span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div <span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>Profiler id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span> onRender<span class="token operator">=</span><span class="token punctuation">{</span> callback <span class="token punctuation">}</span>  <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Router  <span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>Meuns<span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>KeepaliveRouterSwitch withoutRoute <span class="token operator">&gt;</span></span>
<span class="line">                  <span class="token punctuation">{</span> <span class="token function">renderRoutes</span><span class="token punctuation">(</span>menusList<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">              <span class="token operator">&lt;</span><span class="token operator">/</span>KeepaliveRouterSwitch<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>Profiler<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果</strong></p><p><img src="`+r+`" alt=""></p><p>onRender</p><ul><li>0 -id: <code>root</code> -&gt; <code>Profiler</code> 树的 <code>id</code> 。</li><li>1 -phase: <code>mount</code> -&gt; <code>mount</code> 挂载 ， <code>update</code> 渲染了。</li><li>2 -actualDuration: <code>6.685000262223184</code> -&gt; 更新 <code>committed</code> 花费的渲染时间。</li><li>3 -baseDuration: <code>4.430000321008265</code> -&gt; 渲染整颗子树需要的时间</li><li>4 -startTime : <code>689.7299999836832</code> -&gt; 本次更新开始渲染的时间</li><li>5 -commitTime : <code>698.5799999674782</code> -&gt; 本次更新committed 的时间</li><li>6 -interactions: <code>set{}</code> -&gt; 本次更新的 <code>interactions</code> 的集合</li></ul><blockquote><p>尽管 Profiler 是一个轻量级组件，我们依然应该在需要时才去使用它。对一个应用来说，每添加一些都会给 CPU 和内存带来一些负担。</p></blockquote><h3 id="strictmode" tabindex="-1"><a class="header-anchor" href="#strictmode"><span>StrictMode</span></a></h3><p><code>StrictMode</code>见名知意，严格模式，用于检测<code>react</code>项目中的潜在的问题，。与 <code>Fragment</code> 一样， <code>StrictMode</code> 不会渲染任何可见的 <code>UI</code> 。它为其后代元素触发额外的检查和警告。</p><blockquote><p>严格模式检查仅在开发模式下运行；它们不会影响生产构建。</p></blockquote><p><code>StrictMode</code>目前有助于：</p><ul><li>①识别不安全的生命周期。</li><li>②关于使用过时字符串 <code>ref API</code> 的警告</li><li>③关于使用废弃的 <code>findDOMNode</code> 方法的警告</li><li>④检测意外的副作用</li><li>⑤检测过时的 <code>context API</code></li></ul><p><strong>实践:识别不安全的生命周期</strong></p><p>对于不安全的生命周期，指的是<code>UNSAFE_componentWillMount</code>，<code>UNSAFE_componentWillReceiveProps</code> , <code>UNSAFE_componentWillUpdate</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    外层开启严格模式：</span>
<span class="line">    <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>Router  <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Meuns<span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>KeepaliveRouterSwitch withoutRoute <span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span> <span class="token function">renderRoutes</span><span class="token punctuation">(</span>menusList<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>KeepaliveRouterSwitch<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>StrictMode<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">    <span class="token literal-property property">我们在内层组件中，使用不安全的生命周期</span><span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">UNSAFE_componentWillReceiveProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;box&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    效果：</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+'" alt=""></p><h2 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类"><span>工具类</span></a></h2><p>接下来我们一起来探究一下<code>react</code>工具类函数的用法。</p><p><img src="'+k+`" alt=""></p><h3 id="createelement" tabindex="-1"><a class="header-anchor" href="#createelement"><span>createElement</span></a></h3><p>一提到<code>createElement</code>，就不由得和<code>JSX</code>联系一起。我们写的<code>jsx</code>，最终会被 <code>babel</code>，用<code>createElement</code>编译成<code>react</code>元素形式。我写一个组件，我们看一下会被编译成什么样子，</p><p>如果我们在<code>render</code>里面这么写：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;box&quot;</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;item&quot;</span>  <span class="token operator">&gt;</span>生命周期<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Text  mes<span class="token operator">=</span><span class="token string">&quot;hello,world&quot;</span>  <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&gt;</span> Flagment <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span> <span class="token comment">/*  */</span> <span class="token punctuation">}</span></span>
<span class="line">            text文本</span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会被编译成这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&quot;box&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&quot;item&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;\\u751F\\u547D\\u5468\\u671F&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Text<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">mes</span><span class="token operator">:</span> <span class="token string">&quot;hello,world&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span>Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot; Flagment &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;text\\u6587\\u672C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然我们可以不用<code>jsx</code>模式，而是直接通过<code>createElement</code>进行开发。</p><p><strong><code>createElement</code>模型:</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span></span>
<span class="line">      type<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">[</span><span class="token operator">...</span>children<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createElement</code>参数：</p><p>**第一个参数:**如果是组件类型，会传入组件，如果是<code>dom</code>元素类型，传入<code>div</code>或者<code>span</code>之类的字符串。</p><p><strong>第二个参数:</strong> :第二个参数为一个对象，在<code>dom</code>类型中为<strong>属性</strong> ，在<code>组件</code>类型中为<strong>props</strong> 。</p><p><strong>其他参数:</strong> ，依次为<code>children</code>，根据顺序排列。</p><p><strong>createElement做了些什么？</strong></p><p>经过<code>createElement</code>处理，最终会形成 <code>$$typeof = Symbol(react.element)</code>对象。对象上保存了该<code>react.element</code>的信息。</p><h3 id="cloneelement" tabindex="-1"><a class="header-anchor" href="#cloneelement"><span>cloneElement</span></a></h3><p>可能有的同学还傻傻的分不清楚<code>cloneElement</code>和<code>createElement</code>区别和作用。</p><p><code>createElement</code>把我们写的<code>jsx</code>，变成<code>element</code>对象; 而<code>cloneElement</code>的作用是以 <code>element</code> 元素为样板克隆并返回新的 <code>React</code> 元素。返回元素的 <code>props</code> 是将新的 <code>props</code> 与原始元素的 <code>props</code> 浅层合并后的结果。</p><p>那么<code>cloneElement</code>感觉在我们实际业务组件中，可能没什么用，但是在<strong>一些开源项目，或者是公共插槽组件中</strong> 用处还是蛮大的，比如说，我们可以在组件中，劫持<code>children element</code>，然后通过<code>cloneElement</code>克隆<code>element</code>，混入<code>props</code>。经典的案例就是 <code>react- router</code>中的<code>Swtich</code>组件，通过这种方式，来匹配唯一的 <code>Route</code>并加以渲染。</p><p>我们设置一个场景，在组件中，去劫持<code>children</code>，然后给<code>children</code>赋能一些额外的<code>props</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">FatherComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> newChildren <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> <span class="token punctuation">{</span> newChildren <span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">SonComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;box&quot;</span> <span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>FatherComponent<span class="token operator">&gt;</span></span>
<span class="line">                    <span class="token operator">&lt;</span>SonComponent name<span class="token operator">=</span><span class="token string">&quot;alien&quot;</span>  <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>FatherComponent<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>打印：</strong></p><p><img src="`+d+`" alt=""></p><p>完美达到了效果！</p><h3 id="createcontext" tabindex="-1"><a class="header-anchor" href="#createcontext"><span>createContext</span></a></h3><p><code>createContext</code>用于创建一个<code>Context</code>对象，<code>createContext</code>对象中，包括用于传递 <code>Context</code> 对象值 <code>value</code>的<code>Provider</code>，和接受<code>value</code>变化订阅的<code>Consumer</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>createContext</code>接受一个参数<code>defaultValue</code>，如果<code>Consumer</code>上一级一直没有<code>Provider</code>,则会应用<code>defaultValue</code>作为<code>value</code>。<strong>只有</strong> 当组件所处的树中没有匹配到 <code>Provider</code> 时，其 <code>defaultValue</code> 参数才会生效。</p><p>我们来模拟一个 <code>Context.Provider</code>和<code>Context.Consumer</code>的例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">ComponentB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* 用 Consumer 订阅， 来自 Provider 中 value 的改变  */</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>MyContext<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>ComponentA  <span class="token punctuation">{</span><span class="token operator">...</span>value<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>MyContext<span class="token punctuation">.</span>Consumer<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">ComponentA</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">,</span> mes <span class="token punctuation">}</span> <span class="token operator">=</span> props</span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> 姓名： <span class="token punctuation">{</span> name <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> 想对大家说： <span class="token punctuation">{</span> mes <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">             <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">[</span> value <span class="token punctuation">,</span> <span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;alien&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">mes</span><span class="token operator">:</span><span class="token string">&#39;let us learn React &#39;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>MyContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span>  <span class="token operator">&gt;</span></span>
<span class="line">              <span class="token operator">&lt;</span>ComponentB <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>MyContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>打印结果：</strong></p><p><img src="`+m+`" alt=""></p><p><code>Provider</code>和<code>Consumer</code>的良好的特性，可以做数据的<strong>存</strong> 和<strong>取</strong> ，<code>Consumer</code>一方面传递<code>value</code>,另一方面可以订阅<code>value</code>的改变。</p><p><code>Provider</code>还有一个特性可以层层传递<code>value</code>，这种特性在<code>react-redux</code>中表现的淋漓尽致。</p><h3 id="createfactory" tabindex="-1"><a class="header-anchor" href="#createfactory"><span>createFactory</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    React<span class="token punctuation">.</span><span class="token function">createFactory</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>返回用于生成指定类型 React 元素的函数。类型参数既可以是标签名字符串（像是 &#39;<code>div</code>&#39; 或 &#39;<code>span</code>&#39;），也可以是 React 组件 类型 （ <code>class</code> 组件或函数组件），或是 <code>React fragment</code> 类型。</p><p>使用：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">     <span class="token keyword">const</span> Text <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>Text<span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong></p><p><img src="`+v+`" alt=""></p><p>报出警告，这个<code>api</code>将要被废弃，我们这里就不多讲了，如果想要达到同样的效果，请用<code>React.createElement</code></p><h3 id="createref" tabindex="-1"><a class="header-anchor" href="#createref"><span>createRef</span></a></h3><p><code>createRef</code>可以创建一个 <code>ref</code> 元素，附加在<code>react</code>元素上。</p><p><strong>用法：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">}</span> <span class="token operator">&gt;</span> my name is alien <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>个人觉得<code>createRef</code>这个方法，很鸡肋，我们完全可以<code>class</code>类组件中这么写，来捕获<code>ref</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        node <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token punctuation">}</span> <span class="token operator">&gt;</span> my name is alien <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在<code>function</code>组件中这么写：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> node <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>current<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>node<span class="token punctuation">}</span> <span class="token operator">&gt;</span>  my name is alien <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isvalidelement" tabindex="-1"><a class="header-anchor" href="#isvalidelement"><span>isValidElement</span></a></h3><p>这个方法可以用来检测是否为<code>react element</code>元素,接受待验证对象，返回<code>true</code>或者<code>false</code>。这个api可能对于业务组件的开发，作用不大，因为对于组件内部状态，都是已知的，我们根本就不需要去验证，是否是<code>react element</code> 元素。 但是，对于一起公共组件或是开源库，<code>isValidElement</code>就很有作用了。</p><p><strong>实践</strong></p><p>我们做一个场景，验证容器组件的所有子组件，过滤到非<code>react element</code>类型。</p><p>没有用<code>isValidElement</code>验证之前：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">Text</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">WarpComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>Text<span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span> my name is alien <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                Let&#39;s learn react together<span class="token operator">!</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>过滤之前的效果</strong></p><p><img src="`+g+`" alt=""></p><p><strong>我们用<code>isValidElement</code>进行<code>react element</code>验证:</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">WarpComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>newChidren <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> React<span class="token punctuation">.</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newChidren</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>过滤之后效果</strong></p><p><img src="`+b+`" alt=""></p><p>过滤掉了非<code>react element</code> 的 <code>Let&#39;s learn react together!</code>。</p><h3 id="children-map" tabindex="-1"><a class="header-anchor" href="#children-map"><span>Children.map</span></a></h3><p>接下来的五个<code>api</code>都是和<code>react.Chidren</code>相关的，我们来分别介绍一下，我们先来看看官网的描述，<code>React.Children</code> 提供了用于处理 <code>this.props.children</code> 不透明数据结构的实用方法。</p><p>有的同学会问遍历 <code>children</code>用数组方法,<code>map</code> ，<code>forEach</code> 不就可以了吗？ 请我们注意一下<code>不透明数据结构</code>,什么叫做不透明结构?</p><p><strong>我们先看一下透明的结构：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">Text</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">WarpComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> props<span class="token punctuation">.</span>children</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>Text<span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>Text<span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>Text<span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>打印</strong></p><p><img src="`+h+`" alt=""></p><p>但是我们把<code>Index</code>结构改变一下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token operator">&lt;</span>Text<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>打印</strong></p><p><img src="`+f+`" alt=""></p><p>这个数据结构，我们不能正常的遍历了，即使遍历也不能遍历，每一个子元素。此时就需要 <code>react.Chidren</code> 来帮忙了。</p><p>但是我们把<code>WarpComponent</code>组件用<code>react.Chidren</code>处理<code>children</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">WarpComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> newChildren <span class="token operator">=</span> React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>item<span class="token punctuation">)</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> newChildren</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时就能正常遍历了，达到了预期效果。</p><p><img src="`+y+`" alt=""></p><p><strong>注意</strong> 如果 <code>children</code> 是一个 <code>Fragment</code> 对象，它将被视为单一子节点的情况处理，而不会被遍历。</p><h3 id="children-foreach" tabindex="-1"><a class="header-anchor" href="#children-foreach"><span>Children.forEach</span></a></h3><p><code>Children.forEach</code>和<code>Children.map</code> 用法类似，<code>Children.map</code>可以返回新的数组，<code>Children.forEach</code>仅停留在遍历阶段。</p><p>我们将上面的<code>WarpComponent</code>方法，用<code>Children.forEach</code>改一下。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">WarpComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> props<span class="token punctuation">.</span>children</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="children-count" tabindex="-1"><a class="header-anchor" href="#children-count"><span>Children.count</span></a></h3><p><code>children</code> 中的组件总数量，等同于通过 <code>map</code> 或 <code>forEach</code> 调用回调函数的次数。对于更复杂的结果，<code>Children.count</code>可以返回同一级别子组件的数量。</p><p>我们还是把上述例子进行改造：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">WarpComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> childrenCount <span class="token operator">=</span>  React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>childrenCount<span class="token punctuation">,</span><span class="token string">&#39;childrenCount&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> props<span class="token punctuation">.</span>children</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index1</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token operator">&lt;</span>Text key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token operator">+</span>index1<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果:</strong></p><p><img src="`+w+`" alt=""></p><h3 id="children-toarray" tabindex="-1"><a class="header-anchor" href="#children-toarray"><span>Children.toArray</span></a></h3><p><code>Children.toArray</code>返回，<code>props.children</code>扁平化后结果。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">WarpComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> newChidrenArray <span class="token operator">=</span>  React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newChidrenArray<span class="token punctuation">,</span><span class="token string">&#39;newChidrenArray&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> newChidrenArray</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index1</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token operator">&lt;</span>Text key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token operator">+</span>index1<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果：</strong></p><p><img src="`+_+`" alt=""></p><p><strong>newChidrenArray</strong> ,就是扁平化的数组结构。<code>React.Children.toArray()</code> 在拉平展开子节点列表时，更改 <code>key</code> 值以保留嵌套数组的语义。也就是说， <code>toArray</code> 会为返回数组中的每个 <code>key</code> 添加前缀，以使得每个元素 <code>key</code> 的范围都限定在此函数入参数组的对象内。</p><h3 id="children-only" tabindex="-1"><a class="header-anchor" href="#children-only"><span>Children.only</span></a></h3><p>验证 <code>children</code> 是否只有一个子节点（一个 <code>React</code> 元素），如果有则返回它，否则此方法会抛出错误。</p><p><strong>不唯一</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">WarpComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> props<span class="token punctuation">.</span>children</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token operator">&lt;</span>Text key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong></p><p><img src="`+x+`" alt=""></p><p><strong>唯一</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">WarpComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> props<span class="token punctuation">.</span>children</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">               <span class="token operator">&lt;</span>Text<span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>WarpComponent<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong></p><p><img src="`+j+'" alt=""></p><p><code>React.Children.only()</code> 不接受 <code>React.Children.map()</code> 的返回值，因为它是一个数组而并不是 <code>React</code> 元素。</p><h2 id="react-hooks" tabindex="-1"><a class="header-anchor" href="#react-hooks"><span>react-hooks</span></a></h2><p>对于<code>react-hooks</code>,我已经写了三部曲，介绍了<code>react-hooks</code>使用，自定义<code>hooks</code>，以及<code>react- hooks</code>原理，感兴趣的同学可以去看看，文章末尾有链接，对于常用的<code>api</code>，我这里参考了<code>react- hooks</code>如何使用那篇文章。并做了相应精简化和一些内容的补充。</p><p><img src="'+C+`" alt=""></p><h3 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate"><span>useState</span></a></h3><p><code>useState</code>可以弥补函数组件没有<code>state</code>的缺陷。<code>useState</code>可以接受一个初识值，也可以是一个函数<code>action</code>，<code>action</code>返回值作为新的<code>state</code>。返回一个数组，第一个值为<code>state</code>读取值，第二个值为改变<code>state</code>的<code>dispatchAction</code>函数。</p><p>我们看一个例子：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">DemoState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">/* number为此时state读取值 ，setNumber为派发更新的函数 */</span></span>
<span class="line">       <span class="token keyword">let</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">/* 0为初始值 */</span></span>
<span class="line">       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">           </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> number <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">           </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token function">setNumber</span><span class="token punctuation">(</span>number<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">/* 写法一 */</span></span>
<span class="line">             <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token operator">=&gt;</span>number <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token comment">/* 写法二 */</span></span>
<span class="line">             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token comment">/* 这里的number是不能够即时改变的  */</span></span>
<span class="line">           <span class="token punctuation">}</span> <span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">num++</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect"><span>useEffect</span></a></h3><p><code>useEffect</code>可以弥补函数组件没有生命周期的缺点。我们可以在<code>useEffect</code>第一个参数回调函数中，做一些请求数据，事件监听等操作，第二个参数作为<code>dep</code>依赖项，当依赖项发生变化，重新执行第一个函数。</p><p><strong>useEffect可以用作数据交互。</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line">    <span class="token comment">/* 模拟数据交互 */</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">               <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                   <span class="token literal-property property">name</span><span class="token operator">:</span>a<span class="token punctuation">,</span></span>
<span class="line">                   <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span></span>
<span class="line">               <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">DemoEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> a <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">[</span> userMessage <span class="token punctuation">,</span> setUserMessage <span class="token punctuation">]</span> <span class="token operator">:</span>any<span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> div<span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">/* 模拟事件监听处理函数 */</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token function-variable function">handleResize</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">/* useEffect使用 ，这里如果不加限制 ，会是函数重复执行，陷入死循环*/</span></span>
<span class="line">        <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">/* 请求数据 */</span></span>
<span class="line">           <span class="token function">getUserInfo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">               <span class="token function">setUserMessage</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></span>
<span class="line">           <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">           <span class="token comment">/* 操作dom  */</span></span>
<span class="line">           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token comment">/* div */</span></span>
<span class="line">           <span class="token comment">/* 事件监听等 */</span></span>
<span class="line">            window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> handleResize<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">/* 只有当props-&gt;a和state-&gt;number改变的时候 ,useEffect副作用函数重新执行 ，如果此时数组为空[]，证明函数只有在初始化的时候执行一次相当于componentDidMount */</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span> a <span class="token punctuation">,</span>number <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>div<span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> userMessage<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> userMessage<span class="token punctuation">.</span>age <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> number <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>useEffect可以用作事件监听，还有一些基于<code>dom</code>的操作。</strong>,别忘了在<code>useEffect</code>第一个参数回调函数，返一个函数用于清除事件监听等操作。</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">DemoEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> a <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* 模拟事件监听处理函数 */</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token function-variable function">handleResize</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">           <span class="token comment">/* 定时器 延时器等 */</span></span>
<span class="line">           <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">           <span class="token comment">/* 事件监听 */</span></span>
<span class="line">           window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> handleResize<span class="token punctuation">)</span></span>
<span class="line">           <span class="token comment">/* 此函数用于清除副作用 */</span></span>
<span class="line">           <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">               <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></span>
<span class="line">               window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> handleResize<span class="token punctuation">)</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usememo" tabindex="-1"><a class="header-anchor" href="#usememo"><span>useMemo</span></a></h3><p><code>useMemo</code>接受两个参数，第一个参数是一个函数，返回值用于产生<strong>保存值</strong> 。 第二个参数是一个数组，作为<code>dep</code>依赖项，数组里面的依赖项发生变化，重新执行第一个函数，产生<strong>新的值</strong> 。</p><p>应用场景： <strong>1 缓存一些值，避免重新执行上下文</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token doc-comment comment">/** ....大量的逻辑运算 **/</span></span>
<span class="line">       <span class="token keyword">return</span> number</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span> props<span class="token punctuation">.</span>number <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 只有 props.number 改变的时候，重新计算number的值。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2 减少不必要的<code>dom</code>循环</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">/* 用 useMemo包裹的list可以限定当且仅当list改变的时候才更新此list，这样就可以避免selectList重新循环 */</span></span>
<span class="line">     <span class="token punctuation">{</span><span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span></span>
<span class="line">              selectList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">                  <span class="token operator">&lt;</span>span</span>
<span class="line">                      className<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>listSpan<span class="token punctuation">}</span></span>
<span class="line">                      key<span class="token operator">=</span><span class="token punctuation">{</span>v<span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">                      <span class="token punctuation">{</span>i<span class="token punctuation">.</span>patentName<span class="token punctuation">}</span></span>
<span class="line">                  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>selectList<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3 减少子组件渲染</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">/* 只有当props中，list列表改变的时候，子组件才渲染 */</span></span>
<span class="line">    <span class="token keyword">const</span>  goodListChild <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>GoodList list<span class="token operator">=</span><span class="token punctuation">{</span> props<span class="token punctuation">.</span>list <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token punctuation">,</span><span class="token punctuation">[</span> props<span class="token punctuation">.</span>list <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback"><span>useCallback</span></a></h3><p><code>useMemo</code> 和 <code>useCallback</code> 接收的参数都是一样，都是在其依赖项发生变化后才执行，都是返回缓存的值，区别在于 <code>useMemo</code> 返回的是函数运行的结果， <code>useCallback</code> 返回的是函数。 返回的<code>callback</code>可以作为<code>props</code>回调函数传递给子组件。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">/* 用react.memo */</span></span>
<span class="line">    <span class="token keyword">const</span> DemoChildren <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">/* 只有初始化的时候打印了 子组件更新 */</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;子组件更新&#39;</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">           props<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">&#39;子组件&#39;</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">DemoUseCallback</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id <span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">/* 此时usecallback的第一参数 (sonName)=&gt;{ console.log(sonName) }</span>
<span class="line">         经过处理赋值给 getInfo */</span></span>
<span class="line">        <span class="token keyword">const</span> getInfo  <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sonName</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sonName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span><span class="token comment">/* 点击按钮触发父组件更新 ，但是子组件没有更新 */</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">setNumber</span><span class="token punctuation">(</span>number<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">&gt;</span>增加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>DemoChildren getInfo<span class="token operator">=</span><span class="token punctuation">{</span>getInfo<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useref" tabindex="-1"><a class="header-anchor" href="#useref"><span>useRef</span></a></h3><p><code>useRef</code>的作用：</p><ul><li>一 是可以用来获取<code>dom</code>元素，或者<code>class</code>组件实例 。</li><li>二 <code>react-hooks原理</code>文章中讲过，创建<code>useRef</code>时候，会创建一个原始对象，只要函数组件不被销毁，原始对象就会一直存在，那么我们可以利用这个特性，来通过<code>useRef</code>保存一些数据。</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">DemoUseRef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> dom<span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token function-variable function">handerSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">/*  &lt;div &gt;表单组件&lt;/div&gt;  dom 节点 */</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>current<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token punctuation">{</span><span class="token comment">/* ref 标记当前dom节点 */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>dom<span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">表单组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">handerSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uselayouteffect" tabindex="-1"><a class="header-anchor" href="#uselayouteffect"><span>useLayoutEffect</span></a></h3><p><strong><code>useEffect</code>执行顺序:</strong> 组件更新挂载完成 -&gt; 浏览器 <code>dom</code> 绘制完成 -&gt; 执行 <code>useEffect</code> 回调。 <strong><code>useLayoutEffect</code> 执行顺序:</strong> 组件更新挂载完成 -&gt; 执行 <code>useLayoutEffect</code> 回调-&gt; 浏览器<code>dom</code>绘制完成。</p><p>所以说 <code>useLayoutEffect</code> 代码可能会阻塞浏览器的绘制 。我们写的 <code>effect</code>和 <code>useLayoutEffect</code>，<code>react</code>在底层会被分别打上<code>PassiveEffect</code>，<code>HookLayout</code>，在<code>commit</code>阶段区分出，在什么时机执行。</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">DemoUseLayoutEffect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">/*我们需要在dom绘制之前，移动dom到制定位置*/</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> x <span class="token punctuation">,</span>y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getPositon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/* 获取要移动的 x,y坐标 */</span></span>
<span class="line">            <span class="token function">animate</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>current<span class="token punctuation">,</span><span class="token punctuation">{</span> x<span class="token punctuation">,</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> target <span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>animate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usereducer" tabindex="-1"><a class="header-anchor" href="#usereducer"><span>useReducer</span></a></h3><p>在<code>react-hooks</code>原理那篇文章中讲解到，<code>useState</code>底层就是一个简单版的<code>useReducer</code></p><p><code>useReducer</code> 接受的第一个参数是一个函数，我们可以认为它就是一个 <code>reducer</code> , <code>reducer</code> 的参数就是常规 <code>reducer</code> 里面的 <code>state</code> 和 <code>action</code> ,返回改变后的 <code>state</code> , <code>useReducer</code> 第二个参数为 <code>state</code> 的初始值 返回一个数组，数组的第一项就是更新之后 <code>state</code> 的值 ，第二个参数是派发更新的 <code>dispatch</code> 函数。</p><p>我们来看一下<code>useReducer</code>如何使用：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">DemoUseReducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* number为更新后的state值,  dispatchNumbner 为当前的派发函数 */</span></span>
<span class="line">       <span class="token keyword">const</span> <span class="token punctuation">[</span> number <span class="token punctuation">,</span> dispatchNumbner <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>action</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">const</span> <span class="token punctuation">{</span> payload <span class="token punctuation">,</span> name  <span class="token punctuation">}</span> <span class="token operator">=</span> action</span>
<span class="line">           <span class="token comment">/* return的值为新的state */</span></span>
<span class="line">           <span class="token keyword">switch</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">               <span class="token keyword">case</span> <span class="token string">&#39;add&#39;</span><span class="token operator">:</span></span>
<span class="line">                   <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">               <span class="token keyword">case</span> <span class="token string">&#39;sub&#39;</span><span class="token operator">:</span></span>
<span class="line">                   <span class="token keyword">return</span> state <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">               <span class="token keyword">case</span> <span class="token string">&#39;reset&#39;</span><span class="token operator">:</span></span>
<span class="line">                 <span class="token keyword">return</span> payload</span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">           <span class="token keyword">return</span> state</span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">          当前值：<span class="token punctuation">{</span> number <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">{</span> <span class="token comment">/* 派发更新 */</span> <span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">dispatchNumbner</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;add&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span>增加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">dispatchNumbner</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;sub&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span>减少<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">dispatchNumbner</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;reset&#39;</span> <span class="token punctuation">,</span><span class="token literal-property property">payload</span><span class="token operator">:</span><span class="token number">666</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span>赋值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span> <span class="token comment">/* 把dispatch 和 state 传递给子组件  */</span> <span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span>MyChildren  dispatch<span class="token operator">=</span><span class="token punctuation">{</span> dispatchNumbner <span class="token punctuation">}</span> State<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> number <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usecontext" tabindex="-1"><a class="header-anchor" href="#usecontext"><span>useContext</span></a></h3><p>我们可以使用 <code>useContext</code> ，来获取父级组件传递过来的 <code>context</code> 值，这个当前值就是最近的父级组件 <code>Provider</code> 设置的 <code>value</code> <code>值，useContext</code> 参数一般是由 <code>createContext</code> 方式引入 ,也可以父级上下文 <code>context</code> 传递 ( 参数为 <code>context</code> )。<code>useContext</code> 可以代替 <code>context.Consumer</code> 来获取 <code>Provider</code> 中保存的 <code>value</code> 值</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line">    <span class="token comment">/* 用useContext方式 */</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">DemoContext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token literal-property property">value</span><span class="token operator">:</span>any <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">/* my name is alien */</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> my name is </span><span class="token punctuation">{</span> value<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">/* 用Context.Consumer 方式 */</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">DemoContext1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Context.Consumer</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">             </span><span class="token punctuation">{</span><span class="token comment">/*  my name is alien  */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">            </span><span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> my name is </span><span class="token punctuation">{</span> value<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Context.Consumer</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Context.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;alien&#39;</span> <span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DemoContext</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DemoContext1</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Context.Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="useimperativehandle" tabindex="-1"><a class="header-anchor" href="#useimperativehandle"><span>useImperativeHandle</span></a></h3><p><code>useImperativeHandle</code> 可以配合 <code>forwardRef</code>自定义暴露给父组件的实例值。这个很有用，我们知道，对于子组件，如果是<code>class</code>类组件，我们可以通过<code>ref</code>获取类组件的实例，但是在子组件是函数组件的情况，如果我们不能直接通过<code>ref</code>的，那么此时<code>useImperativeHandle</code>和 <code>forwardRef</code>配合就能达到效果。</p><p><code>useImperativeHandle</code>接受三个参数：</p><ul><li>第一个参数ref: 接受 <code>forWardRef</code> 传递过来的 <code>ref</code>。</li><li>第二个参数 <code>createHandle</code> ：处理函数，返回值作为暴露给父组件的<code>ref</code>对象。</li><li>第三个参数 <code>deps</code>:依赖项 <code>deps</code>，依赖项更改形成新的<code>ref</code>对象。</li></ul><p><strong>我们来模拟给场景，用<code>useImperativeHandle</code>，使得父组件能让子组件中的<code>input</code>自动赋值并聚焦。</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">Son</span> <span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>ref</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">[</span> inputValue <span class="token punctuation">,</span> setInputValue <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">const</span> handleRefs <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">               <span class="token comment">/* 声明方法用于聚焦input框 */</span></span>
<span class="line">               <span class="token function">onFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                  inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">               <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">               <span class="token comment">/* 声明方法用于改变input的值 */</span></span>
<span class="line">               <span class="token function">onChangeValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                   <span class="token function">setInputValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span></span>
<span class="line">               <span class="token punctuation">}</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">           <span class="token keyword">return</span> handleRefs</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>input</span>
<span class="line">                placeholder<span class="token operator">=</span><span class="token string">&quot;请输入内容&quot;</span></span>
<span class="line">                ref<span class="token operator">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span>
<span class="line">                value<span class="token operator">=</span><span class="token punctuation">{</span>inputValue<span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> ForwarSon <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>Son<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        cur <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token function">handerClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">const</span> <span class="token punctuation">{</span> onFocus <span class="token punctuation">,</span> onChangeValue <span class="token punctuation">}</span> <span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>cur</span>
<span class="line">           <span class="token function">onFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">           <span class="token function">onChangeValue</span><span class="token punctuation">(</span><span class="token string">&#39;let us learn React!&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>ForwarSon ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token parameter">cur</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> cur<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handerClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span>操控子组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果:</strong></p><p><img src="`+R+`" alt=""></p><h3 id="usedebugvalue" tabindex="-1"><a class="header-anchor" href="#usedebugvalue"><span>useDebugValue</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    useDebugValue<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> 可用于在 </span><span class="token template-punctuation string">\`</span></span>React<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> 开发者工具中显示自定义 </span><span class="token template-punctuation string">\`</span></span>hook<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> 的标签。这个</span><span class="token template-punctuation string">\`</span></span>hooks<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">目的就是检查自定义</span><span class="token template-punctuation string">\`</span></span>hooks</span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span><span class="token parameter">friendID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// ...</span></span>
<span class="line">      <span class="token comment">// 在开发者工具中的这个 Hook 旁边显示标签</span></span>
<span class="line">      <span class="token comment">// e.g. &quot;FriendStatus: Online&quot;</span></span>
<span class="line">      <span class="token function">useDebugValue</span><span class="token punctuation">(</span>isOnline <span class="token operator">?</span> <span class="token string">&#39;Online&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Offline&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">return</span> isOnline<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们不推荐你向每个自定义 Hook 添加 debug 值。当它作为共享库的一部分时才最有价值。在某些情况下，格式化值的显示可能是一项开销很大的操作。除非需要检查 Hook，否则没有必要这么做。因此，useDebugValue 接受一个格式化函数作为可选的第二个参数。该函数只有在 Hook 被检查时才会被调用。它接受 debug 值作为参数，并且会返回一个格式化的显示值。</p></blockquote><h3 id="usetransition" tabindex="-1"><a class="header-anchor" href="#usetransition"><span>useTransition</span></a></h3><p><code>useTransition</code>允许延时由<code>state</code>改变而带来的视图渲染。避免不必要的渲染。它还允许组件将速度较慢的数据获取更新推迟到随后渲染，以便能够立即渲染更重要的更新。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> <span class="token constant">TIMEOUT_MS</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeoutMs</span><span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>startTransition<span class="token punctuation">,</span> isPending<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token constant">TIMEOUT_MS</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>useTransition</code> 接受一个对象， <code>timeoutMs</code>代码需要延时的时间。</li><li>返回一个数组。<strong>第一个参数：</strong> 是一个接受回调的函数。我们用它来告诉 <code>React</code> 需要推迟的 <code>state</code> 。 <strong>第二个参数：</strong> 一个布尔值。表示是否正在等待，过度状态的完成(延时<code>state</code>的更新)。</li></ul><p>下面我们引入官网的列子，来了解<code>useTransition</code>的使用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> <span class="token constant">SUSPENSE_CONFIG</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeoutMs</span><span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">[</span>resource<span class="token punctuation">,</span> setResource<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialResource<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">[</span>startTransition<span class="token punctuation">,</span> isPending<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useTransition</span><span class="token punctuation">(</span><span class="token constant">SUSPENSE_CONFIG</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>button</span>
<span class="line">            disabled<span class="token operator">=</span><span class="token punctuation">{</span>isPending<span class="token punctuation">}</span></span>
<span class="line">            onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">startTransition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> nextUserId <span class="token operator">=</span> <span class="token function">getNextId</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">setResource</span><span class="token punctuation">(</span><span class="token function">fetchProfileData</span><span class="token punctuation">(</span>nextUserId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&gt;</span></span>
<span class="line">            Next</span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token punctuation">{</span>isPending <span class="token operator">?</span> <span class="token string">&quot; 加载中...&quot;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token operator">&lt;</span>Suspense fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>Spinner <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>ProfilePage resource<span class="token operator">=</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们使用 <code>startTransition</code> 包装了我们的数据获取。这使我们可以立即开始获取用户资料的数据，同时推迟下一个用户资料页面以及其关联的 <code>Spinner</code> 的渲染 2 秒钟（ <code>timeoutMs</code> 中显示的时间）。</p><p>这个<code>api</code>目前处于实验阶段，没有被完全开放出来。</p><h2 id="react-dom" tabindex="-1"><a class="header-anchor" href="#react-dom"><span>react-dom</span></a></h2><p>接下来，我们来一起研究<code>react-dom</code>中比较重要的<code>api</code>。</p><p><img src="`+S+`" alt=""></p><h3 id="render" tabindex="-1"><a class="header-anchor" href="#render"><span>render</span></a></h3><p><code>render</code> 是我们最常用的<code>react-dom</code>的 <code>api</code>，用于渲染一个<code>react</code>元素，一般<code>react</code>项目我们都用它，渲染根部容器<code>app</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> container<span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>使用</strong></p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line">    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span> App <span class="token operator">/</span> <span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ReactDOM.render</code>会控制<code>container</code>容器节点里的内容，但是不会修改容器节点本身。</p><h3 id="hydrate" tabindex="-1"><a class="header-anchor" href="#hydrate"><span>hydrate</span></a></h3><p>服务端渲染用<code>hydrate</code>。用法与 <code>render()</code> 相同，但它用于在 <code>ReactDOMServer</code> 渲染的容器中对 <code>HTML</code> 的内容进行 <code>hydrate</code> 操作。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    ReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> container<span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="createportal" tabindex="-1"><a class="header-anchor" href="#createportal"><span>createPortal</span></a></h3><p><code>Portal</code> 提供了一种将子节点渲染到存在于父组件以外的 <code>DOM</code> 节点的优秀的方案。<code>createPortal</code> 可以把当前组件或 <code>element</code> 元素的子节点，渲染到组件之外的其他地方。</p><p>那么具体应用到什么场景呢？</p><p>比如一些全局的弹窗组件<code>model</code>,<code>&lt;Model/&gt;</code>组件一般都写在我们的组件内部，倒是真正挂载的<code>dom</code>，都是在外层容器，比如<code>body</code>上。此时就很适合<code>createPortal</code>API。</p><p><code>createPortal</code>接受两个参数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> container<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第一个： <code>child</code> 是任何可渲染的 <code>React</code> 子元素 第二个： <code>container</code>是一个 <code>DOM</code> 元素。</p><p>接下来我们实践一下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">WrapComponent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> domRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">[</span> PortalComponent<span class="token punctuation">,</span> setPortalComponent <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setPortalComponent</span><span class="token punctuation">(</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span>domRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;container&quot;</span> ref<span class="token operator">=</span><span class="token punctuation">{</span> domRef <span class="token punctuation">}</span> <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span> PortalComponent <span class="token punctuation">}</span></span>
<span class="line">         <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">                 <span class="token operator">&lt;</span>WrapComponent<span class="token operator">&gt;</span></span>
<span class="line">                   <span class="token operator">&lt;</span>div  <span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span><span class="token operator">/</span>WrapComponent<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong></p><p><img src="`+E+`" alt=""></p><p>我们可以看到，我们<code>children</code>实际在<code>container</code> 之外挂载的，但是已经被<code>createPortal</code>渲染到<code>container</code>中。</p><h3 id="unstable-batchedupdates" tabindex="-1"><a class="header-anchor" href="#unstable-batchedupdates"><span>unstable_batchedUpdates</span></a></h3><p>在<code>react- legacy</code>模式下，对于事件，<code>react</code>事件有批量更新来处理功能,但是这一些非常规的事件中，批量更新功能会被打破。所以我们可以用<code>react- dom</code>中提供的<code>unstable_batchedUpdates</code> 来进行批量更新。</p><p><strong>一次点击实现的批量更新</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">           <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span></span>
<span class="line">               <span class="token literal-property property">numer</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function-variable function">handerClick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">numer</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">numer</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">numer</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div  style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handerClick <span class="token punctuation">}</span> <span class="token operator">&gt;</span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong></p><p><img src="`+M+`" alt=""></p><p>渲染次数一次。</p><p><strong>批量更新条件被打破</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">     <span class="token function-variable function">handerClick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">numer</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">numer</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">numer</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong></p><p><img src="`+P+`" alt=""></p><p>渲染次数三次。</p><p><strong>unstable_batchedUpdate助力</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">     <span class="token function-variable function">handerClick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">                ReactDOM<span class="token punctuation">.</span><span class="token function">unstable_batchedUpdates</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">numer</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">numer</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">numer</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numer<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染次数一次,完美解决批量更新问题。</p><h3 id="flushsync" tabindex="-1"><a class="header-anchor" href="#flushsync"><span>flushSync</span></a></h3><p><code>flushSync</code> 可以将回调函数中的更新任务，放在一个较高的优先级中。我们知道<code>react</code>设定了很多不同优先级的更新任务。如果一次更新任务在<code>flushSync</code>回调函数内部，那么将获得一个较高优先级的更新。比如</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    ReactDOM<span class="token punctuation">.</span><span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* 此次更新将设置一个较高优先级的更新 */</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;alien&#39;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让大家理解<code>flushSync</code>，我这里做一个<code>demo</code>奉上，</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">/* flushSync */</span></span>
<span class="line">    <span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        state<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function-variable function">handerClick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            ReactDOM<span class="token punctuation">.</span><span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">3</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">4</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> number <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state</span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token comment">// 打印什么？？</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span> number <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handerClick<span class="token punctuation">}</span> <span class="token operator">&gt;</span>测试flushSync<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先不看答案，点击一下按钮，打印什么呢？</p><p><strong>我们来点击一下看看</strong></p><p><img src="`+A+`" alt=""></p><p>打印 0 3 4 1 ，相信不难理解为什么这么打印了。</p><ul><li>首先 <code>flushSync</code> <code>this.setState({ number: 3 })</code>设定了一个高优先级的更新，所以3 先被打印</li><li>2 4 被批量更新为 4</li></ul><p>相信这个<code>demo</code>让我们更深入了解了<code>flushSync</code>。</p><h3 id="finddomnode" tabindex="-1"><a class="header-anchor" href="#finddomnode"><span>findDOMNode</span></a></h3><p><code>findDOMNode</code>用于访问组件<code>DOM</code>元素节点，<code>react</code>推荐使用<code>ref</code>模式，不期望使用<code>findDOMNode</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    ReactDOM<span class="token punctuation">.</span><span class="token function">findDOMNode</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意的是：</p><ul><li>1 <code>findDOMNode</code>只能用在已经挂载的组件上。</li><li>2 如果组件渲染内容为 <code>null</code> 或者是 <code>false</code>，那么 <code>findDOMNode</code>返回值也是 <code>null</code>。</li><li>3 <code>findDOMNode</code> 不能用于函数组件。</li></ul><p>接下来让我们看一下，<code>findDOMNode</code>具体怎么使用的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function-variable function">handerFindDom</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ReactDOM<span class="token punctuation">.</span><span class="token function">findDOMNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;100px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handerFindDom <span class="token punctuation">}</span> <span class="token operator">&gt;</span>获取容器dom<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果：</strong></p><p><img src="`+D+`" alt=""></p><p>我们完全可以将外层容器用<code>ref</code>来标记，获取捕获原生的<code>dom</code>节点。</p><h3 id="unmountcomponentatnode" tabindex="-1"><a class="header-anchor" href="#unmountcomponentatnode"><span>unmountComponentAtNode</span></a></h3><p>从 <code>DOM</code> 中卸载组件，会将其事件处理器和 <code>state</code> 一并清除。 如果指定容器上没有对应已挂载的组件，这个函数什么也不会做。如果组件被移除将会返回 <code>true</code> ，如果没有组件可被移除将会返回 <code>false</code> 。</p><p>我们来简单举例看看<code>unmountComponentAtNode</code>如何使用？</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span>world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Index</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span></span>
<span class="line">        node <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">           <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">           <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span></span>
<span class="line">               <span class="token literal-property property">numer</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">           <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">/*  组件初始化的时候，创建一个 container 容器 */</span></span>
<span class="line">            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Text<span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function-variable function">handerClick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">           <span class="token comment">/* 点击卸载容器 */</span></span>
<span class="line">           <span class="token keyword">const</span> state <span class="token operator">=</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">)</span></span>
<span class="line">           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div  style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span><span class="token string">&#39;50px&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&gt;</span></span>
<span class="line">                 <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span> <span class="token parameter">node</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node  <span class="token punctuation">}</span>  <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handerClick <span class="token punctuation">}</span> <span class="token operator">&gt;</span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong></p><p><img src="`+N+'" alt=""><img src="'+T+'" alt=""></p><p>阅读全文</p>',335),F=[q];function O(W,U){return p(),a("div",null,F)}const B=s(I,[["render",O],["__file","React-26-React全部api解读.html.vue"]]),V=JSON.parse('{"path":"/React-26-React%E5%85%A8%E9%83%A8api%E8%A7%A3%E8%AF%BB.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/react/26-React%E5%85%A8%E9%83%A8api%E8%A7%A3%E8%AF%BB.html 组件类 组件类，详细分的话有三种类，第一类说白了就是我平时用于继承的基类组件Component,PureComponent,还有就是...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/React-26-React%E5%85%A8%E9%83%A8api%E8%A7%A3%E8%AF%BB.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/react/26-React%E5%85%A8%E9%83%A8api%E8%A7%A3%E8%AF%BB.html 组件类 组件类，详细分的话有三种类，第一类说白了就是我平时用于继承的基类组件Component,PureComponent,还有就是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_images_20210504203949.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210504203949.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211401980.png\\",\\"https://interview.leeguoo.com/images/error.webp\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211401466.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210504204037.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211402827.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211402516.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211402367.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211402146.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211402099.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211402455.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211402510.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211403570.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211403268.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211403738.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211403397.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211403428.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211403851.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211403763.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211403735.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211403294.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211403098.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211404678.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211404500.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211404332.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211404594.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211404673.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211404922.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211404848.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211405130.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_202203211405780.png\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"组件类","slug":"组件类","link":"#组件类","children":[{"level":3,"title":"Component","slug":"component","link":"#component","children":[]},{"level":3,"title":"PureComponent","slug":"purecomponent","link":"#purecomponent","children":[]},{"level":3,"title":"memo","slug":"memo","link":"#memo","children":[]},{"level":3,"title":"forwardRef","slug":"forwardref","link":"#forwardref","children":[]},{"level":3,"title":"lazy","slug":"lazy","link":"#lazy","children":[]},{"level":3,"title":"Suspense","slug":"suspense","link":"#suspense","children":[]},{"level":3,"title":"Fragment","slug":"fragment","link":"#fragment","children":[]},{"level":3,"title":"Profiler","slug":"profiler","link":"#profiler","children":[]},{"level":3,"title":"StrictMode","slug":"strictmode","link":"#strictmode","children":[]}]},{"level":2,"title":"工具类","slug":"工具类","link":"#工具类","children":[{"level":3,"title":"createElement","slug":"createelement","link":"#createelement","children":[]},{"level":3,"title":"cloneElement","slug":"cloneelement","link":"#cloneelement","children":[]},{"level":3,"title":"createContext","slug":"createcontext","link":"#createcontext","children":[]},{"level":3,"title":"createFactory","slug":"createfactory","link":"#createfactory","children":[]},{"level":3,"title":"createRef","slug":"createref","link":"#createref","children":[]},{"level":3,"title":"isValidElement","slug":"isvalidelement","link":"#isvalidelement","children":[]},{"level":3,"title":"Children.map","slug":"children-map","link":"#children-map","children":[]},{"level":3,"title":"Children.forEach","slug":"children-foreach","link":"#children-foreach","children":[]},{"level":3,"title":"Children.count","slug":"children-count","link":"#children-count","children":[]},{"level":3,"title":"Children.toArray","slug":"children-toarray","link":"#children-toarray","children":[]},{"level":3,"title":"Children.only","slug":"children-only","link":"#children-only","children":[]}]},{"level":2,"title":"react-hooks","slug":"react-hooks","link":"#react-hooks","children":[{"level":3,"title":"useState","slug":"usestate","link":"#usestate","children":[]},{"level":3,"title":"useEffect","slug":"useeffect","link":"#useeffect","children":[]},{"level":3,"title":"useMemo","slug":"usememo","link":"#usememo","children":[]},{"level":3,"title":"useCallback","slug":"usecallback","link":"#usecallback","children":[]},{"level":3,"title":"useRef","slug":"useref","link":"#useref","children":[]},{"level":3,"title":"useLayoutEffect","slug":"uselayouteffect","link":"#uselayouteffect","children":[]},{"level":3,"title":"useReducer","slug":"usereducer","link":"#usereducer","children":[]},{"level":3,"title":"useContext","slug":"usecontext","link":"#usecontext","children":[]},{"level":3,"title":"useImperativeHandle","slug":"useimperativehandle","link":"#useimperativehandle","children":[]},{"level":3,"title":"useDebugValue","slug":"usedebugvalue","link":"#usedebugvalue","children":[]},{"level":3,"title":"useTransition","slug":"usetransition","link":"#usetransition","children":[]}]},{"level":2,"title":"react-dom","slug":"react-dom","link":"#react-dom","children":[{"level":3,"title":"render","slug":"render","link":"#render","children":[]},{"level":3,"title":"hydrate","slug":"hydrate","link":"#hydrate","children":[]},{"level":3,"title":"createPortal","slug":"createportal","link":"#createportal","children":[]},{"level":3,"title":"unstable_batchedUpdates","slug":"unstable-batchedupdates","link":"#unstable-batchedupdates","children":[]},{"level":3,"title":"flushSync","slug":"flushsync","link":"#flushsync","children":[]},{"level":3,"title":"findDOMNode","slug":"finddomnode","link":"#finddomnode","children":[]},{"level":3,"title":"unmountComponentAtNode","slug":"unmountcomponentatnode","link":"#unmountcomponentatnode","children":[]}]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"React-26-React全部api解读.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/react/26-React%E5%85%A8%E9%83%A8api%E8%A7%A3%E8%AF%BB.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/react/26-React%E5%85%A8%E9%83%A8api%E8%A7%A3%E8%AF%BB.html</a></p>\\n<h2>组件类</h2>\\n<p>组件类，详细分的话有三种类，第一类说白了就是我平时用于继承的基类组件<code>Component</code>,<code>PureComponent</code>,还有就是<code>react</code>提供的内置的组件，比如<code>Fragment</code>,<code>StrictMode</code>,另一部分就是高阶组件<code>forwardRef</code>,<code>memo</code>等。</p>"}');export{B as comp,V as data};
