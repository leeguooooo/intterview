import{_ as n,a as e,b as s,c as a}from"./s_poetries_work_images_20210503170616-B9-KiNzQ.js";import{_ as o,c as t,o as c,a as p}from"./app-f2Cpj3V4.js";const i="/images/s_poetries_work_images_20210503170727.png",l="/images/s_poetries_work_images_20210503170748.png",r="/images/s_poetries_work_images_20210503170806.png",d="/images/s_poetries_work_images_20210503170828.png",u="/images/s_poetries_work_images_20210503170845.png",m="/images/s_poetries_work_images_20210503170900.png",k="/images/user_images_githubusercontent_com_8554143_33877626_ed17f3c6_df63_11e7_8bae_40b9512c2645.gif",v={},g=p('<p>原文链接: <a href="https://interview.poetries.top/principle-docs/comprehensive/09-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%B9%8BPerformance.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/comprehensive/09-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%B9%8BPerformance.html</a></p><blockquote><p><code>Performance</code>是一个做前端性能监控离不开的<code>API</code>，最好在页面完全加载完成之后再使用，因为很多值必须在页面完全加载之后才能得到。最简单的办法是在<code>window.onload</code>事件中读取各种数据。</p></blockquote><h2 id="一、回顾页面加载过程" tabindex="-1"><a class="header-anchor" href="#一、回顾页面加载过程"><span>一、回顾页面加载过程</span></a></h2><blockquote><p>要学习这套<code>API</code>的使用，先简单介绍下前端的基础知识</p></blockquote><h3 id="_1-1-页面加载" tabindex="-1"><a class="header-anchor" href="#_1-1-页面加载"><span>1.1 页面加载</span></a></h3><blockquote><p>一个页面的请求到响应再到显示出来，需要经过下面一些重要过程，当我们在浏览器输入一个<code>URL</code>或者说点击一个<code>URL</code>开始，会出现如下流程</p></blockquote><ul><li>页面准备</li><li>重定向：在<code>header</code>定义了重定向才会有这个过程，如果没有重定向，不会产生这个过程。</li><li><code>app cache</code>：会先检查这个域名是否有缓存，如果有缓存就不需要DNS解析域名。这里的<code>app</code>是值应用程序<code>application</code>，不指手机<code>app</code>。</li><li><code>DNS</code>解析：把域名解析成<code>IP</code>，如果直接用<code>ip</code>地址访问，不产生这个过程。</li><li><code>TCP</code>连接：<code>http</code>协议是经过<code>TCP</code>来传输的，所以产生一个<code>http</code>请求就会有<code>TCP connect</code>，但是依赖于长连接，不会产生这个过程。</li><li><code>request header</code>：请求头信息。</li><li><code>request body</code>：请求体信息，比如<code>get</code>请求是没有请求体信息的，所以没有这个过程，这就是为什么把头跟体分开写的原因。</li><li><code>response header</code>：响应头信息。</li><li><code>response body</code>：响应体信息。</li><li>解析<code>HTML</code>结构</li><li>加载外部脚本和样式表文件：正常来说<code>JS</code>、<code>css</code>都是外部加载的，当然有不正常的人啊，比如我。</li><li>解析并执行脚本代码</li><li>构建与解析<code>HTML DOM</code>树：这个过程可以去了解下<code>DOM</code>树是怎样的就明白啦。</li><li>加载外部图片</li><li>页面加载完成，显示出来啦</li></ul><h3 id="_1-2-重定向分析" tabindex="-1"><a class="header-anchor" href="#_1-2-重定向分析"><span>1.2 重定向分析</span></a></h3><ul><li><code>app cach</code></li><li><code>DNS</code>解析</li><li><code>TCP</code>连接</li><li><code>request header</code></li><li>重定向</li><li><code>app cach</code></li><li><code>DNS</code>解析</li><li><code>TCP</code>连接</li><li><code>request header</code></li></ul><h2 id="二、performance" tabindex="-1"><a class="header-anchor" href="#二、performance"><span>二、performance</span></a></h2><h3 id="_2-1-performance-timing" tabindex="-1"><a class="header-anchor" href="#_2-1-performance-timing"><span>2.1 performance.timing</span></a></h3><blockquote><p>这个API能帮我们得到整个页面请求的时间，如下图，在<code>Chrome</code>的<code>Console</code>是可以直接运行的</p></blockquote><p><img src="'+n+'" alt=""></p><p>先解释下这些时间都是代表什么</p><p><strong>timing 对象里边的数据比较多，梳理如下几个关键性的节点</strong></p><ul><li><code>fetchStart</code>：发起获取当前文档的时间点，我的理解是浏览器收到发起页面请求的时间点；</li><li><code>domainLookupStart</code>：返回浏览器开始<code>DNS</code>查询的时间，如果此请求没有<code>DNS</code>查询过程，如长连接、资源<code>cache</code>、甚至是本地资源等，那么就返回<code>fetchStart</code>的值；</li><li><code>domainLookupEnd</code>：返回浏览器结束<code>DNS</code>查询的时间，如果没有<code>DNS</code>查询过程，同上；</li><li><code>connectStart</code>：浏览器向服务器请求文档，开始建立连接的时间，如果此连接是一个长连接，或者无需与服务器连接（命中缓存），则返回<code>domainLookupEnd</code>的值；</li><li><code>connectEnd</code>：浏览器向服务器请求文档，建立连接成功的时间；</li><li><code>requestStart</code>：开始请求文档的时间（注意没有<code>requestEnd</code>）;</li><li><code>responseStart</code>：浏览器开始接收第一个字节数据的时间，数据可能来自于服务器、缓存、或本地资源；</li><li><code>unloadEventStart</code>：卸载上一个文档开始的时间；</li><li><code>unloadEventEnd</code>：卸载上一个文档结束的时间；</li><li><code>domLoading</code>：浏览器把<code>document.readyState</code>设置为<code>“loading”</code>的时间点，开始构建<code>dom</code>树的时间点；</li><li><code>responseEnd</code>：浏览器接收最后一个字节数据的时间，或连接被关闭的时间；</li><li><code>domInteractive</code>：浏览器把<code>document.readyState设</code>置为<code>“interactive”</code>的时间点，<code>DOM</code>树创建结束；</li><li><code>domContentLoadedEventStart</code>：文档发生<code>DOMContentLoaded</code>事件的时间；</li><li><code>domContentLoadedEventEnd</code>：文档的<code>DOMContentLoaded</code>事件结束的时间；</li><li><code>domComplete</code>：浏览器把<code>document.readyState</code>设置为<code>“complete”</code>的时间点；</li><li><code>loadEventStart</code>：文档触发<code>load</code>事件的时间；</li><li><code>loadEventEnd</code>：文档出发<code>load</code>事件结束后的时间</li></ul><blockquote><p>再来一张图，表示各阶段的开始与结束对应的时间</p></blockquote><p><img src="'+e+'" alt=""></p><blockquote><p>从以上的分析，我们就可以得到一些时间的计算</p></blockquote><ul><li>准备新页面耗时：<code>fetchStart - navigationStart</code></li><li>重定向时间：<code>redirectEnd - redirectStart</code></li><li><code>App Cache</code>时间：<code>domainLookupStart - fetchStart</code></li><li><code>DNS</code>解析时间：<code>domainLookupEnd -domainLookupStart</code></li><li><code>TCP</code>连接时间：<code>connectEnd - connectStart</code></li><li><code>request</code>时间：<code>responseEnd - requestStart</code>这个计算是代表请求响应加起来的时间</li><li>请求完毕到<code>DOM</code>树加载：<code>domInteractive -responseEnd</code></li><li>构建与解析<code>DOM</code>树，加载资源时间：<code>domCompleter -domInteractive</code></li><li><code>load</code>时间：<code>loadEventEnd - loadEventStart</code></li><li>整个页面加载时间：<code>loadEventEnd -navigationStart</code></li><li>白屏时间：<code>responseStart-navigationStart</code></li></ul><h3 id="_2-2-performance-getentries" tabindex="-1"><a class="header-anchor" href="#_2-2-performance-getentries"><span>2.2 performance.getEntries()</span></a></h3><blockquote><p>这个API能帮我们获得资源的请求时间，包括JS、CSS、图片等</p></blockquote><p><img src="'+s+'" alt=""></p><blockquote><p>如上图可以看到这个API请求返回的是一个数组，这个数组包括整个页面所有的资源加载，上图打开了一个其中一个资源，可以看到如下信息</p></blockquote><ul><li><code>entryType</code>：类型为<code>resource</code></li><li><code>name</code>：资源的<code>url</code></li><li><code>initiatorType</code>：资源是<code>link</code></li><li>资源时间：<code>duration</code>的值，是<code>responseEnd - startTime</code>得到的</li></ul><h3 id="_2-3-performance-memory" tabindex="-1"><a class="header-anchor" href="#_2-3-performance-memory"><span>2.3 performance.memory</span></a></h3><blockquote><p>这个API主要是得到浏览器内存情况</p></blockquote><ul><li><code>jsHeapSizeLimit</code>：内存大小限制</li><li><code>totalJSHeapSize</code>：可使用的内容</li><li><code>userdJSHeapSize</code>：已使用的内容</li></ul><blockquote><p><code>userdJSHeapSize</code>表示所有被使用的JS堆栈内存，<code>totalJSHeapSize</code>可使用的JS堆栈内存，如果<code>userdJSHeapSize</code>的值大于<code>totalJSHeapSize</code>，就可能出现内存泄漏</p></blockquote><p><img src="'+a+'" alt=""></p><h2 id="三、动画帧率fps" tabindex="-1"><a class="header-anchor" href="#三、动画帧率fps"><span>三、动画帧率FPS</span></a></h2><h3 id="_3-1-流畅动画的标准" tabindex="-1"><a class="header-anchor" href="#_3-1-流畅动画的标准"><span>3.1 流畅动画的标准</span></a></h3><blockquote><p><code>FPS</code> 表示的是每秒钟画面更新次数。我们平时所看到的连续画面都是由一幅幅静止画面组成的，每幅画面称为一帧，<code>FPS</code> 是描述“帧”变化速度的物理量</p></blockquote><ul><li>理论上说，<code>FPS</code> 越高，动画会越流畅，目前大多数设备的屏幕刷新率为 <code>60</code> 次/秒，所以通常来讲 <code>FPS</code> 为 <code>60 frame/s</code> 时动画效果最好，也就是每帧的消耗时间为 <code>16.6</code>7ms</li></ul><p><strong>不同帧率的体验</strong></p><ul><li>帧率能够达到 <code>50 ～ 60 FPS</code> 的动画将会相当流畅，让人倍感舒适；</li><li>帧率在 <code>30 ～ 50 FPS</code> 之间的动画，因各人敏感程度不同，舒适度因人而异；</li><li>帧率在 <code>30 FPS</code> 以下的动画，让人感觉到明显的卡顿和不适感；</li><li>帧率波动很大的动画，亦会使人感觉到卡顿</li></ul><h3 id="_3-2-获取我们页面动画当前的-fps-值" tabindex="-1"><a class="header-anchor" href="#_3-2-获取我们页面动画当前的-fps-值"><span>3.2 获取我们页面动画当前的 FPS 值</span></a></h3><blockquote><p>那么我们该如何准确的获取我们页面动画当前的 FPS 值呢？</p></blockquote><h4 id="_3-2-1-方法一-借助-chrome-开发者工具" tabindex="-1"><a class="header-anchor" href="#_3-2-1-方法一-借助-chrome-开发者工具"><span>3.2.1 方法一 借助 Chrome 开发者工具</span></a></h4><blockquote><p><code>Chrome</code> 提供给开发者的功能十分强大，在开发者工具中，我们进行如下选择调出 <code>FPS meter</code> 选项：</p></blockquote><p><img src="'+i+'" alt=""></p><blockquote><p>通过这个按钮，可以开启页面实时 <code>Frame Rate</code> (帧率) 观测及页面 <code>GPU</code> 使用率</p></blockquote><p><strong>但是这个方法缺点太多了</strong></p><ul><li>这个只能一次观测一到几个页面，而且需要人工实时观测</li><li>数据只能是主观感受，并没有一个十分精确的数据不断上报或者被收集</li><li>因此，我们需要更加智能的方法。</li></ul><h4 id="_3-2-2-方法二-借助-frame-timing-api" tabindex="-1"><a class="header-anchor" href="#_3-2-2-方法二-借助-frame-timing-api"><span>3.2.2 方法二 借助 Frame Timing API</span></a></h4><blockquote><p>Blink 内核早期架构</p></blockquote><ul><li>以 <code>Chrome</code> 浏览器内核 <code>Blink</code> 渲染页面为例。对早期的 <code>Chrome</code> 浏览器而言，每个页面 <code>Tab</code> 对应一个独立的 <code>renderer</code> 进程，<code>Renderer</code>进程中包含了主线程和合成线程。早期 <code>Chrome</code> 内核架构</li></ul><p><img src="'+l+'" alt=""></p><p><strong>其中，主线程主要负责</strong> ：</p><ul><li><code>Javascript</code> 的计算与执行</li><li><code>CSS</code> 样式计算</li><li><code>Layout</code> 计算</li><li>将页面元素绘制成位图（<code>paint</code>），也就是光栅化（<code>Raster</code>）</li><li>将位图给合成线程</li></ul><p><strong>合成线程则主要负责</strong> ：</p><ul><li>将位图(<code>GraphicsLayer</code> 层)以纹理(<code>texture</code>)的形式上传给 <code>GPU</code></li><li>计算页面的可见部分和即将可见部分（滚动）</li><li><code>CSS</code> 动画处理</li><li>通知 GPU 绘制位图到屏幕上</li></ul><blockquote><p>其实知道了这两个线程之后，下一个概念是厘清 <code>CSS</code> 动画与 <code>JS</code> 动画的细微区别（当然它们都是 Web 动画）</p></blockquote><p><strong>JS 动画与 CSS 动画的细微区别</strong></p><ul><li>对于 <code>JS</code>动画而言，它们运行时的帧率即是主线程和合成线程加起来消耗的时间。对于流畅动画而言，我们希望它们每一帧的耗时保持在 <code>16.67ms</code> 之内;</li><li>而对于 <code>CSS</code> 动画而言，由于其流程不受主线程的影响，所以希望能得到合成线程的消耗的时间，而合成线程的绘制频率也反映了滚动和 CSS 动画的流程性。</li></ul><blockquote><p>上面主要想得出的一个结论是。如果我们能够知道主线程和合成线程每一帧消耗的时间，那么我们就能大致得出对应的 Web 动画的帧率。那么上面说到的 <code>Frame Timing API</code> 是否可以帮助我们拿到这个时间点呢</p></blockquote><p><strong>什么是 Frame Timing API ？</strong></p><blockquote><p><code>Frame Timing API</code> 是 <code>Web Performance Timing API</code> 标准中的其中一位成员。<code>Web Performance Timing API</code> 是 W3C 推出的一套性能 API 标准，用于帮助开发者对网站各方面的性能进行精确的分析与控制，提升 Web 网站性能</p></blockquote><p>它包含许多子类 API，完成不同的功能，大致如下</p><p><img src="'+r+'" alt=""></p><p>怎么使用呢？以 <code>Navigation Timing</code>, <code>Performance Timeline</code>, <code>Resource Timing</code> 为例子，对于兼容它的浏览器，它以只读属性的形式对外暴露挂载在 <code>window.performance</code> 上。</p><p>我们再来回顾这张图</p><p><img src="'+d+`" alt=""></p><blockquote><p>通过这张图以及上面的 <code>window.performance.timing</code>，我们就可以轻松的统计出页面每个重要节点的耗时，这就是 <code>Web Performance Timing API</code> 的强大之处，感兴趣的可以详细去研究研究，使用在页面统计上</p></blockquote><p><strong>Frame Timing API 示意</strong></p><blockquote><p>终于可以回归正题，借助 <code>Web Performance Timing API</code> 中的<code>Frame Timing API</code>，可以轻松的拿到每一帧中，主线程以及合成线程的时间。或者更加容易，直接拿到每一帧的耗时</p></blockquote><p>获取 <code>Render</code> 主线程和合成线程的记录，每条记录包含的信息基本如下</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> rendererEvents <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&quot;renderer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> compositeThreadEvents <span class="token operator">=</span> window<span class="token punctuation">.</span>performance<span class="token punctuation">.</span><span class="token function">getEntriesByType</span><span class="token punctuation">(</span><span class="token string">&quot;composite&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者是：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    ar observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> perfEntries <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> perfEntries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;frame: &quot;</span><span class="token punctuation">,</span> perfEntries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     </span>
<span class="line">    <span class="token comment">// subscribe to Frame Timing</span></span>
<span class="line">    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">entryTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;frame&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每条记录包含的信息基本如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">sourceFrameNumber</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">startTime</span><span class="token operator">:</span> <span class="token number">1342.549374253</span></span>
<span class="line">      <span class="token literal-property property">cpuTime</span><span class="token operator">:</span> <span class="token number">6.454313323</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>每个记录都包括唯一的 <code>Frame Number</code>、<code>Frame</code> 开始时间以及 <code>cpuTime</code> 时间。通过计算每一条记录的 <code>startTime</code> ，我们就可以算出每两帧间的间隔，从而得到动画的帧率是否能够达到 <code>60 FPS</code></p></blockquote><p><strong>看看 Web Performance Timing API 整体的兼容性</strong></p><p><img src="`+u+`" alt=""></p><blockquote><p><code>Frame Timing API</code> 虽好，但是，现在 <code>Frame Timing API</code> 的兼容性不算很友好，额，不友好到什么程度呢。还没有任何浏览器支持，处于实验性阶段，属于面向未来编程</p></blockquote><h4 id="_3-2-3-方法三-借助-requestanimationframe-api" tabindex="-1"><a class="header-anchor" href="#_3-2-3-方法三-借助-requestanimationframe-api"><span>3.2.3 方法三 借助 requestAnimationFrame API</span></a></h4><blockquote><p>从上面的介绍，我们得知，如果我们可以到得到每一帧中的固定一个时间点，那么两者相减，也能够近似得到一帧所消耗的时间</p></blockquote><p>这次，我们借助兼容性不错的 <code>requestAnimationFrame API</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 语法</span></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>requestAnimationFrame</code> 大家应该都不陌生，方法告诉浏览器您希望执行动画并请求浏览器调用指定的函数在下一次重绘之前更新动画。</li><li>当你准备好更新屏幕画面时你就应用此方法。这会要求你的动画函数在浏览器下次重绘前执行。回调的次数常是每秒 <code>60</code> 次，大多数浏览器通常匹配 <code>W3C</code> 所建议的刷新率</li></ul><p><strong>使用 requestAnimationFrame 计算 FPS 原理</strong></p><blockquote><p>原理是，正常而言 <code>requestAnimationFrame</code> 这个方法在一秒内会执行 <code>60</code> 次，也就是不掉帧的情况下。假设动画在时间 <code>A</code> 开始执行，在时间 <code>B</code> 结束，耗时 <code>x ms</code>。而中间 <code>requestAnimationFrame</code> 一共执行了 <code>n</code> 次，则此段动画的帧率大致为：<code>n / (B - A)</code></p></blockquote><p>核心代码如下，能近似计算每秒页面帧率，以及我们额外记录一个 <code>allFrameCount</code>，用于记录 <code>rAF</code> 的执行次数，用于计算每次动画的帧率 ：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> <span class="token function-variable function">rAF</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">            window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span></span>
<span class="line">            window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span></span>
<span class="line">            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">    <span class="token keyword">var</span> frame <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> allFrameCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> lastTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> lastFameTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">    <span class="token keyword">var</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastFameTime<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> fps <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">/</span> fs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">        lastFameTime <span class="token operator">=</span> now<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 不置 0，在动画的开头及结尾记录此值的差值算出 FPS</span></span>
<span class="line">        allFrameCount<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        frame<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&gt;</span> <span class="token number">1000</span> <span class="token operator">+</span> lastTime<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">var</span> fps <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span>frame <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> lastTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 1S内 FPS：</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> fps<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            frame <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            lastTime <span class="token operator">=</span> now<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">        <span class="token function">rAF</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">     </span>
<span class="line">    <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>寻找一个有动画不断运行的页面进行测试，可以看到代码运行如下：</p><p><img src="`+m+'" alt=""></p><ul><li>使用了我之前制作的一个页面进行了测试，使用<code>Chrome</code> 同时调出页面的 <code>FPS meter</code>，对比两边的实时 <code>FPS</code> 值，基本吻合。</li><li>测试页面，<code>Solar System</code>。你可以将上面的代码贴到这个页面的 <code>console</code> 中，测试一下数据</li></ul><p><img src="'+k+'" alt="img"></p><ul><li>对比右上角的 <code>Frame Rate</code>，帧率基本一致。在大部分情况下，这种方法可以很好的得出 Web 动画的帧率。</li><li>如果我们需要统计某个特定动画过程的帧率，只需要在动画开始和结尾两处分别记录 <code>allFrameCount</code> 这个数值大小，再除以中间消耗的时间，也可以得出特定动画过程的 <code>FPS</code> 值。</li><li>值得注意的是，这个方法计算的结果和真实的帧率肯定是存在误差的，因为它是将每两次主线程执行 <code>javascript</code> 的时间间隔当成一帧，而非上面说的主线程加合成线程所消耗的时间为一帧。但是对于现阶段而言，算是一种可取的方法</li></ul><p>阅读全文</p>',91),h=[g];function b(_,f){return c(),t("div",null,h)}const E=o(v,[["render",b],["__file","综合-09-前端性能之Performance.html.vue"]]),P=JSON.parse('{"path":"/%E7%BB%BC%E5%90%88-09-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%B9%8BPerformance.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/comprehensive/09-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%B9%8BPerformance.html Performance是一个做前端性能监控离不开的API，最好在页面完全加载完成之后再使用，...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/%E7%BB%BC%E5%90%88-09-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%B9%8BPerformance.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/comprehensive/09-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%B9%8BPerformance.html Performance是一个做前端性能监控离不开的API，最好在页面完全加载完成之后再使用，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170506.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170506.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170539.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170603.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170616.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170727.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170748.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170806.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170828.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170845.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503170900.png\\",\\"https://interview.leeguoo.com/images/user_images_githubusercontent_com_8554143_33877626_ed17f3c6_df63_11e7_8bae_40b9512c2645.gif\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、回顾页面加载过程","slug":"一、回顾页面加载过程","link":"#一、回顾页面加载过程","children":[{"level":3,"title":"1.1 页面加载","slug":"_1-1-页面加载","link":"#_1-1-页面加载","children":[]},{"level":3,"title":"1.2 重定向分析","slug":"_1-2-重定向分析","link":"#_1-2-重定向分析","children":[]}]},{"level":2,"title":"二、performance","slug":"二、performance","link":"#二、performance","children":[{"level":3,"title":"2.1 performance.timing","slug":"_2-1-performance-timing","link":"#_2-1-performance-timing","children":[]},{"level":3,"title":"2.2 performance.getEntries()","slug":"_2-2-performance-getentries","link":"#_2-2-performance-getentries","children":[]},{"level":3,"title":"2.3 performance.memory","slug":"_2-3-performance-memory","link":"#_2-3-performance-memory","children":[]}]},{"level":2,"title":"三、动画帧率FPS","slug":"三、动画帧率fps","link":"#三、动画帧率fps","children":[{"level":3,"title":"3.1 流畅动画的标准","slug":"_3-1-流畅动画的标准","link":"#_3-1-流畅动画的标准","children":[]},{"level":3,"title":"3.2 获取我们页面动画当前的 FPS 值","slug":"_3-2-获取我们页面动画当前的-fps-值","link":"#_3-2-获取我们页面动画当前的-fps-值","children":[]}]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"综合-09-前端性能之Performance.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/comprehensive/09-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%B9%8BPerformance.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/comprehensive/09-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%B9%8BPerformance.html</a></p>"}');export{E as comp,P as data};
