import{_ as n,c as s,o as a,a as e}from"./app-DjymQ69Z.js";const p={},t=e(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/react/06-Redux%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/react/06-Redux%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html</a></p><h2 id="一、index-js" tabindex="-1"><a class="header-anchor" href="#一、index-js"><span>一、index.js</span></a></h2><blockquote><p>https://github.com/reactjs/redux/blob/master/src/index.js</p></blockquote><ul><li>暴露了几个核心<code>API</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> createStore <span class="token keyword">from</span> <span class="token string">&#39;./createStore&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> combineReducers <span class="token keyword">from</span> <span class="token string">&#39;./utils/combineReducers&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> bindActionCreators <span class="token keyword">from</span> <span class="token string">&#39;./utils/bindActionCreators&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> applyMiddleware <span class="token keyword">from</span> <span class="token string">&#39;./utils/applyMiddleware&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> compose <span class="token keyword">from</span> <span class="token string">&#39;./utils/compose&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token punctuation">{</span></span>
<span class="line">      createStore<span class="token punctuation">,</span></span>
<span class="line">      combineReducers<span class="token punctuation">,</span></span>
<span class="line">      bindActionCreators<span class="token punctuation">,</span></span>
<span class="line">      applyMiddleware<span class="token punctuation">,</span></span>
<span class="line">      compose</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、createstore-js" tabindex="-1"><a class="header-anchor" href="#二、createstore-js"><span>二、createStore.js</span></a></h2><blockquote><p>https://github.com/reactjs/redux/blob/master/src/createStore.js</p></blockquote><ul><li><code>redux.createStore(reducer, initialState)</code> 传入了<code>reducer</code>、<code>initialState</code>，并返回一个<code>store</code>对象</li><li><code>store</code>对象对外暴露了<code>dispatch</code>、<code>getStat</code>e、<code>subscribe</code>方法</li><li><code>store</code>对象通过<code>getState()</code> 获取内部状态</li><li><code>initialState</code>为 <code>store</code> 的初始状态，如果不传则为undefined</li><li><code>store</code>对象通过<code>reducer</code>来修改内部状态</li><li><code>store</code>对象创建的时候，内部会主动调用<code>dispatch({ type: ActionTypes.INIT })</code>;来对内部状态进行初始化。通过断点或者日志打印就可以看到，<code>store</code>对象创建的同时，<code>reducer</code>就会被调用进行初始化</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> isPlainObject <span class="token keyword">from</span> <span class="token string">&#39;./utils/isPlainObject&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * These are private action types reserved by Redux.</span>
<span class="line">     * For any unknown actions, you must return the current state.</span>
<span class="line">     * If the current state is undefined, you must return the initial state.</span>
<span class="line">     * Do not reference these action types directly in your code.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token comment">// 初始化的时候(redux.createStore(reducer, initialState)时),传的action.type 就是这货啦</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">var</span> ActionTypes <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token constant">INIT</span><span class="token operator">:</span> <span class="token string">&#39;@@redux/INIT&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Creates a Redux store that holds the state tree.</span>
<span class="line">     * The only way to change the data in the store is to call \`dispatch()\` on it.</span>
<span class="line">     *</span>
<span class="line">     * There should only be a single store in your app. To specify how different</span>
<span class="line">     * parts of the state tree respond to actions, you may combine several reducers</span>
<span class="line">     * into a single reducer function by using \`combineReducers\`.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">reducer</span> A function that returns the next state tree, given</span>
<span class="line">     * the current state tree and the action to handle.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>any<span class="token punctuation">}</span></span> <span class="token optional-parameter"><span class="token punctuation">[</span><span class="token parameter">initialState</span><span class="token punctuation">]</span></span> The initial state. You may optionally specify it</span>
<span class="line">     * to hydrate the state from the server in universal apps, or to restore a</span>
<span class="line">     * previously serialized user session.</span>
<span class="line">     * If you use \`combineReducers\` to produce the root reducer function, this must be</span>
<span class="line">     * an object with the same shape as \`combineReducers\` keys.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Store<span class="token punctuation">}</span></span> A Redux store that lets you read the state, dispatch actions</span>
<span class="line">     * and subscribe to changes.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> reducer <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Expected the reducer to be a function.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">var</span> currentReducer <span class="token operator">=</span> reducer<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">var</span> currentState <span class="token operator">=</span> initialState<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">var</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">var</span> isDispatching <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token doc-comment comment">/**</span>
<span class="line">       * Reads the state tree managed by the store.</span>
<span class="line">       *</span>
<span class="line">       * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>any<span class="token punctuation">}</span></span> The current state tree of your application.</span>
<span class="line">       */</span></span>
<span class="line">      <span class="token comment">// 这个方法没什么好讲的,返回当前的state</span></span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> currentState<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token doc-comment comment">/**</span>
<span class="line">       * Adds a change listener. It will be called any time an action is dispatched,</span>
<span class="line">       * and some part of the state tree may potentially have changed. You may then</span>
<span class="line">       * call \`getState()\` to read the current state tree inside the callback.</span>
<span class="line">       *</span>
<span class="line">       * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">listener</span> A callback to be invoked on every dispatch.</span>
<span class="line">       * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> A function to remove this change listener.</span>
<span class="line">       */</span></span>
<span class="line">      <span class="token comment">// 很常见的监听函数添加方式,当store.dispatch 的时候被调用</span></span>
<span class="line">      <span class="token comment">// store.subscribe(listener) 返回一个方法(unscribe),可以用来取消监听</span></span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> isSubscribed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSubscribed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">          isSubscribed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">var</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token doc-comment comment">/**</span>
<span class="line">       * Dispatches an action. It is the only way to trigger a state change.</span>
<span class="line">       *</span>
<span class="line">       * The \`reducer\` function, used to create the store, will be called with the</span>
<span class="line">       * current state tree and the given \`action\`. Its return value will</span>
<span class="line">       * be considered the **next** state of the tree, and the change listeners</span>
<span class="line">       * will be notified.</span>
<span class="line">       *</span>
<span class="line">       * The base implementation only supports plain object actions. If you want to</span>
<span class="line">       * dispatch a Promise, an Observable, a thunk, or something else, you need to</span>
<span class="line">       * wrap your store creating function into the corresponding middleware. For</span>
<span class="line">       * example, see the documentation for the \`redux-thunk\` package. Even the</span>
<span class="line">       * middleware will eventually dispatch plain object actions using this method.</span>
<span class="line">       *</span>
<span class="line">       * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">action</span> A plain object representing “what changed”. It is</span>
<span class="line">       * a good idea to keep actions serializable so you can record and replay user</span>
<span class="line">       * sessions, or use the time travelling \`redux-devtools\`. An action must have</span>
<span class="line">       * a \`type\` property which may not be \`undefined\`. It is a good idea to use</span>
<span class="line">       * string constants for action types.</span>
<span class="line">       *</span>
<span class="line">       * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> For convenience, the same action object you dispatched.</span>
<span class="line">       *</span>
<span class="line">       * Note that, if you use a custom middleware, it may wrap \`dispatch()\` to</span>
<span class="line">       * return something else (for example, a Promise you can await).</span>
<span class="line">       */</span></span>
<span class="line">      <span class="token comment">// 以下情况会报错</span></span>
<span class="line">      <span class="token comment">// 1. 传入的action不是一个对象</span></span>
<span class="line">      <span class="token comment">// 2. 传入的action是个对象,但是action.type 是undefined</span></span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&#39;Actions must be plain objects. &#39;</span> <span class="token operator">+</span></span>
<span class="line">            <span class="token string">&#39;Use custom middleware for async actions.&#39;</span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token string">&#39;Actions may not have an undefined &quot;type&quot; property. &#39;</span> <span class="token operator">+</span></span>
<span class="line">            <span class="token string">&#39;Have you misspelled a constant?&#39;</span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDispatching<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Reducers may not dispatch actions.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">          isDispatching <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 就是这一句啦, 将 currentState 设置为 reducer(currentState, action) 返回的值</span></span>
<span class="line">          currentState <span class="token operator">=</span> <span class="token function">currentReducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">          isDispatching <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 如果有监听函数,就顺序调用</span></span>
<span class="line">        listeners<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">listener</span> <span class="token operator">=&gt;</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 最后,返回传入的action</span></span>
<span class="line">        <span class="token keyword">return</span> action<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token doc-comment comment">/**</span>
<span class="line">       * Replaces the reducer currently used by the store to calculate the state.</span>
<span class="line">       *</span>
<span class="line">       * You might need this if your app implements code splitting and you want to</span>
<span class="line">       * load some of the reducers dynamically. You might also need this if you</span>
<span class="line">       * implement a hot reloading mechanism for Redux.</span>
<span class="line">       *</span>
<span class="line">       * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">nextReducer</span> The reducer for the store to use instead.</span>
<span class="line">       * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span></span>
<span class="line">       */</span></span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">replaceReducer</span><span class="token punctuation">(</span><span class="token parameter">nextReducer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        currentReducer <span class="token operator">=</span> nextReducer<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> ActionTypes<span class="token punctuation">.</span><span class="token constant">INIT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// When a store is created, an &quot;INIT&quot; action is dispatched so that every</span></span>
<span class="line">      <span class="token comment">// reducer returns their initial state. This effectively populates</span></span>
<span class="line">      <span class="token comment">// the initial state tree.</span></span>
<span class="line">      <span class="token comment">//</span></span>
<span class="line">      <span class="token comment">// redux.createStore(reducer, initialState) 的时候, 内部会 自己调用 dispatch({ type: ActionTypes.INIT });</span></span>
<span class="line">      <span class="token comment">// 来完成state的初始化</span></span>
<span class="line">      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> ActionTypes<span class="token punctuation">.</span><span class="token constant">INIT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 返回的就是这个东东了,只有四个方法</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        dispatch<span class="token punctuation">,</span></span>
<span class="line">        subscribe<span class="token punctuation">,</span></span>
<span class="line">        getState<span class="token punctuation">,</span></span>
<span class="line">        replaceReducer</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、combinereducers-js" tabindex="-1"><a class="header-anchor" href="#三、combinereducers-js"><span>三、combineReducers.js</span></a></h2><blockquote><p>https://github.com/reactjs/redux/blob/master/src/combineReducers.js</p></blockquote><ul><li><code>redux.combineReducers(reducerMap)</code> 的作用在于合并多个<code>reducer</code>函数，并返回一个新的<code>reducer</code>函数。因此可以看到，<code>combineReducers</code> 返回了一个函数，并且该函数的参数同样是<code>state</code>、<code>reducer</code></li><li>最终 <code>store.getState()</code>返回的<code>state</code>，大概会是这么个样子<code>{todos: xx, filter: xx}</code>。简单的说，<code>state</code>被拆分成了两份，<code>TodoReducer</code>的返回值赋值给了<code>state.todos</code>，<code>FilterReducer</code>的返回值赋值给了<code>state.filter</code></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">TodoReducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">FilterReducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> finalReducers <span class="token operator">=</span> redux<span class="token punctuation">.</span><span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">todos</span><span class="token operator">:</span> TodoReducer<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">filter</span><span class="token operator">:</span> FilterReducer</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>combineReducers(reducerMap)</code> 传入一个对象，并返回一个全新的<code>reducer</code>。调用方式跟跟普通的<code>reducer</code>一样，也是传入<code>state</code>、<code>action</code></li><li>通过<code>combineReducers</code>，对 <code>store</code> 的状态<code>state</code>进行拆分</li><li><code>reducerMap的key</code>，就是 <code>state</code> 的<code>key</code>，而 调用对应的<code>reducer</code>返回的值，则是这个<code>key</code>对应的值。如上面的例子，<code>state.todos == TodoReducer(state, action)</code></li><li><code>redux.createStore(finalReducers, initialState)</code> 调用时，同样会对 <code>state</code>进行初始化。这个初始化跟通过普通的<code>reducer</code>进行初始化没多大区别。举例来说，如果 <code>initialState.todos = undefined</code>，那么 <code>TodoReducer(state, action)</code>初始传入的<code>state</code>就是<code>undefined</code>；如果<code>initialState.todos = []</code>，那么 <code>TodoReducer(state, action)</code>初始传入的<code>state</code>就是<code>[]</code></li><li><code>store.dispatch(action)</code>，<code>finalReducers</code> 里面，会遍历整个<code>reducerMap</code>，依次调用每个<code>reducer</code>，并将每个<code>reducer</code>返回的子<code>state</code>赋给<code>state</code>对应的<code>key</code>。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> ActionTypes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../createStore&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> isPlainObject <span class="token keyword">from</span> <span class="token string">&#39;../utils/isPlainObject&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> mapValues <span class="token keyword">from</span> <span class="token string">&#39;../utils/mapValues&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> pick <span class="token keyword">from</span> <span class="token string">&#39;../utils/pick&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">/* eslint-disable no-console */</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getUndefinedStateErrorMessage</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">var</span> actionType <span class="token operator">=</span> action <span class="token operator">&amp;&amp;</span> action<span class="token punctuation">.</span>type<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">var</span> actionName <span class="token operator">=</span> actionType <span class="token operator">&amp;&amp;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>actionType<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">||</span> <span class="token string">&#39;an action&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Reducer &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; returned undefined handling </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>actionName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">To ignore an action, you must explicitly return the previous state.</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">getUnexpectedStateKeyWarningMessage</span><span class="token punctuation">(</span><span class="token parameter">inputState<span class="token punctuation">,</span> outputState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">var</span> reducerKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>outputState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">var</span> argumentName <span class="token operator">=</span> action <span class="token operator">&amp;&amp;</span> action<span class="token punctuation">.</span>type <span class="token operator">===</span> ActionTypes<span class="token punctuation">.</span><span class="token constant">INIT</span> <span class="token operator">?</span></span>
<span class="line">        <span class="token string-property property">&#39;initialState argument passed to createStore&#39;</span> <span class="token operator">:</span></span>
<span class="line">        <span class="token string">&#39;previous state received by the reducer&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>reducerKeys<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token string">&#39;Store does not have a valid reducer. Make sure the argument passed &#39;</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token string">&#39;to combineReducers is an object whose values are reducers.&#39;</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>inputState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>argumentName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has unexpected type of &quot;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">          <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>inputState<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s([a-z|A-Z]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;. Expected argument to be an object with the following </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">keys: &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>reducerKeys<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;, &quot;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">var</span> unexpectedKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>inputState<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token parameter">key</span> <span class="token operator">=&gt;</span> reducerKeys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>unexpectedKeys<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Unexpected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>unexpectedKeys<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&#39;keys&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;key&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>unexpectedKeys<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;, &quot;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; found in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>argumentName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Expected to find one of the known reducer keys instead: </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>reducerKeys<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;, &quot;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;. Unexpected keys will be ignored.</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 对reducer做合法性检测</span></span>
<span class="line">    <span class="token comment">// store = Redux.createStore(reducer, initialState) --&gt;</span></span>
<span class="line">    <span class="token comment">// currentState = initialState</span></span>
<span class="line">    <span class="token comment">// currentState = currentReducer(currentState, action);</span></span>
<span class="line">    <span class="token comment">//</span></span>
<span class="line">    <span class="token comment">// 从调用关系,调用时机来看, store.getState() 的初始值(currentState)</span></span>
<span class="line">    <span class="token comment">// 为 currentReducer(initialState, { type: ActionTypes.INIT })</span></span>
<span class="line">    <span class="token comment">//</span></span>
<span class="line">    <span class="token comment">// 1. 在初始化阶段,reducer 传入的 state 值是 undefined,此时,需要返回初始state,且初始state不能为undefined</span></span>
<span class="line">    <span class="token comment">// 2. 当传入不认识的 actionType 时, reducer(state, {type}) 返回的不能是undefined</span></span>
<span class="line">    <span class="token comment">// 3. redux/ 这个 namespace 下的action 不应该做处理,直接返回 currentState 就行 (谁运气这么差会去用这种actionType...)</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">assertReducerSanity</span><span class="token punctuation">(</span><span class="token parameter">reducers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>reducers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> reducer <span class="token operator">=</span> reducers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> initialState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> ActionTypes<span class="token punctuation">.</span><span class="token constant">INIT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> initialState <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Reducer &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; returned undefined during initialization. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">If the state passed to the reducer is undefined, you must </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">explicitly return the initial state. The initial state may </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">not be undefined.</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">var</span> type <span class="token operator">=</span> <span class="token string">&#39;@@redux/PROBE_UNKNOWN_ACTION_&#39;</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Reducer &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; returned undefined when probed with a random type. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Don&#39;t try to handle </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ActionTypes<span class="token punctuation">.</span><span class="token constant">INIT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> or other actions in &quot;redux/*&quot; </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">namespace. They are considered private. Instead, you must return the </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">current state for any unknown actions, unless it is undefined, </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">in which case you must return the initial state, regardless of the </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">action type. The initial state may not be undefined.</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">          <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Turns an object whose values are different reducer functions, into a single</span>
<span class="line">     * reducer function. It will call every child reducer, and gather their results</span>
<span class="line">     * into a single state object, whose keys correspond to the keys of the passed</span>
<span class="line">     * reducer functions.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">reducers</span> An object whose values correspond to different</span>
<span class="line">     * reducer functions that need to be combined into one. One handy way to obtain</span>
<span class="line">     * it is to use ES6 \`import * as reducers\` syntax. The reducers may never return</span>
<span class="line">     * undefined for any action. Instead, they should return their initial state</span>
<span class="line">     * if the state passed to them was undefined, and the current state for any</span>
<span class="line">     * unrecognized action.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> A reducer function that invokes every reducer inside the</span>
<span class="line">     * passed object, and builds a state object with the same shape.</span>
<span class="line">     */</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token parameter">reducers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 返回一个对象, key =&gt; value 且value是function(其实就是过滤掉非function)</span></span>
<span class="line">      <span class="token keyword">var</span> finalReducers <span class="token operator">=</span> <span class="token function">pick</span><span class="token punctuation">(</span>reducers<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">var</span> sanityError<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 对所有的子reducer 做一些合法性断言,如果没有出错再继续下面的处理</span></span>
<span class="line">        <span class="token comment">// 合法性断言的内容,见API注释</span></span>
<span class="line">        <span class="token function">assertReducerSanity</span><span class="token punctuation">(</span>finalReducers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        sanityError <span class="token operator">=</span> e<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 所有的 key: value,将value置成了undefined,费解...</span></span>
<span class="line">      <span class="token comment">// 总而言之, 初始state 就是 类似 {hello: undefined, world: undefined} 的东东</span></span>
<span class="line">      <span class="token comment">// TODO 确认这里的逻辑</span></span>
<span class="line">      <span class="token keyword">var</span> defaultState <span class="token operator">=</span> <span class="token function">mapValues</span><span class="token punctuation">(</span>finalReducers<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">combination</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>sanityError<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> sanityError<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">var</span> hasChanged <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 这段代码,简单的说,就是循环一遍 finalState[key] = fn(reducer, key)</span></span>
<span class="line">        <span class="token keyword">var</span> finalState <span class="token operator">=</span> <span class="token function">mapValues</span><span class="token punctuation">(</span>finalReducers<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">var</span> previousStateForKey <span class="token operator">=</span> state<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">var</span> nextStateForKey <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>previousStateForKey<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> nextStateForKey <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 其他一个reducer返回的是undefined,于是挂啦...抛出错误</span></span>
<span class="line">            <span class="token keyword">var</span> errorMessage <span class="token operator">=</span> <span class="token function">getUndefinedStateErrorMessage</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token comment">// 这段代码有些费解,从redux的设计理念上来讲,除了不认识的action type,其他情况都应该返回全新的state</span></span>
<span class="line">          <span class="token comment">// 也就是说</span></span>
<span class="line">          <span class="token comment">// 1. action type 认识,返回新的state,于是这里 hasChanged 为 true</span></span>
<span class="line">          <span class="token comment">// 2. action type 不认识,返回原来的state,于是这里 hasChanged 为 false</span></span>
<span class="line">          <span class="token comment">// 3. 不管action type 是否认识, 在原来的state上修改,但是返回的是修改后的state(没有返回拷贝),那么,hasChanged还是为false</span></span>
<span class="line">          hasChanged <span class="token operator">=</span> hasChanged <span class="token operator">||</span> nextStateForKey <span class="token operator">!==</span> previousStateForKey<span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">return</span> nextStateForKey<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 开发环境中(于是记得在生产环境去掉)</span></span>
<span class="line">        <span class="token comment">// 后面再研究这段代码,毕竟不是主线路...</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">var</span> warningMessage <span class="token operator">=</span> <span class="token function">getUnexpectedStateKeyWarningMessage</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> finalState<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>warningMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>warningMessage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">return</span> hasChanged <span class="token operator">?</span> finalState <span class="token operator">:</span> state<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、bindactioncreator-js" tabindex="-1"><a class="header-anchor" href="#四、bindactioncreator-js"><span>四、bindActionCreator.js</span></a></h2><blockquote><p>https://github.com/reactjs/redux/blob/master/src/bindActionCreators.js</p></blockquote><ul><li>先看个简单例子可能方便理解一些</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">var</span> <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;add_todo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">text</span><span class="token operator">:</span> text</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> <span class="token function-variable function">addTodos</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;add_todos&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&#39;add_todo&#39;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&#39;add_todos&#39;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> state<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> store <span class="token operator">=</span> redux<span class="token punctuation">.</span><span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 注意,关键代码在这里</span></span>
<span class="line">    <span class="token keyword">var</span> actions <span class="token operator">=</span> redux<span class="token punctuation">.</span><span class="token function">bindActionCreators</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">addTodo</span><span class="token operator">:</span> addTodo<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">addTodos</span><span class="token operator">:</span> addTodos</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state is: &#39;</span> <span class="token operator">+</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;add_todo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;读书&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;add_todos&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;阅读&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;睡觉&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state is: &#39;</span> <span class="token operator">+</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// state is: 读书,阅读,睡觉</span></span>
<span class="line">    </span>
<span class="line">    actions<span class="token punctuation">.</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token string">&#39;看电影&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state is: &#39;</span> <span class="token operator">+</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// state is: 读书,阅读,睡觉,看电影</span></span>
<span class="line">    </span>
<span class="line">    actions<span class="token punctuation">.</span><span class="token function">addTodos</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;刷牙&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;洗澡&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;state is: &#39;</span> <span class="token operator">+</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// state is: 读书,阅读,睡觉,看电影,刷牙,洗澡</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>直接看代码</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> mapValues <span class="token keyword">from</span> <span class="token string">&#39;../utils/mapValues&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">bindActionCreator</span><span class="token punctuation">(</span><span class="token parameter">actionCreator<span class="token punctuation">,</span> dispatch</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">actionCreator</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Turns an object whose values are action creators, into an object with the</span>
<span class="line">     * same keys, but with every function wrapped into a \`dispatch\` call so they</span>
<span class="line">     * may be invoked directly. This is just a convenience method, as you can call</span>
<span class="line">     * \`store.dispatch(MyActionCreators.doSomething())\` yourself just fine.</span>
<span class="line">     *</span>
<span class="line">     * For convenience, you can also pass a single function as the first argument,</span>
<span class="line">     * and get a function in return.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token operator">|</span>Object<span class="token punctuation">}</span></span> <span class="token parameter">actionCreators</span> An object whose values are action</span>
<span class="line">     * creator functions. One handy way to obtain it is to use ES6 \`import * as\`</span>
<span class="line">     * syntax. You may also pass a single function.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">dispatch</span> The \`dispatch\` function available on your Redux</span>
<span class="line">     * store.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token operator">|</span>Object<span class="token punctuation">}</span></span> The object mimicking the original object, but with</span>
<span class="line">     * every action creator wrapped into the \`dispatch\` call. If you passed a</span>
<span class="line">     * function as \`actionCreators\`, the return value will also be a single</span>
<span class="line">     * function.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token comment">// 假设 actionCreators === {addTodo: addTodo, removeTodo: removeTodo}</span></span>
<span class="line">    <span class="token comment">// 简单的来说 bindActionCreators(actionCreators, dispatch)</span></span>
<span class="line">    <span class="token comment">// 最后返回的是:</span></span>
<span class="line">    <span class="token comment">// {</span></span>
<span class="line">    <span class="token comment">//   addTodo: function(text){</span></span>
<span class="line">    <span class="token comment">//      dispatch( actionCreators.addTodo(text) );</span></span>
<span class="line">    <span class="token comment">//   },</span></span>
<span class="line">    <span class="token comment">//   removeTodo: function(text){</span></span>
<span class="line">    <span class="token comment">//      dispatch( actionCreators.removeTodo(text) );</span></span>
<span class="line">    <span class="token comment">//   }</span></span>
<span class="line">    <span class="token comment">// }</span></span>
<span class="line">    <span class="token comment">//</span></span>
<span class="line">    <span class="token comment">//  或者说 actionCreators === addTodo (addTodo 为 actionCreator)</span></span>
<span class="line">    <span class="token comment">//  最后返回的是</span></span>
<span class="line">    <span class="token comment">//  function() {</span></span>
<span class="line">    <span class="token comment">//     dispatch(actionCreators());</span></span>
<span class="line">    <span class="token comment">//  }</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span><span class="token parameter">actionCreators<span class="token punctuation">,</span> dispatch</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> actionCreators <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">bindActionCreator</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> actionCreators <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> actionCreators <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> actionCreators <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// eslint-disable-line no-eq-null</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">bindActionCreators expected an object or a function, instead received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>actionCreators <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&#39;null&#39;</span> <span class="token operator">:</span> <span class="token keyword">typeof</span> actionCreators<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span></span>
<span class="line">          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Did you write &quot;import ActionCreators from&quot; instead of &quot;import * as ActionCreators from&quot;?</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">mapValues</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">,</span> <span class="token parameter">actionCreator</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token function">bindActionCreator</span><span class="token punctuation">(</span>actionCreator<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、applymiddleware-js" tabindex="-1"><a class="header-anchor" href="#五、applymiddleware-js"><span>五、applyMiddleware.js</span></a></h2><blockquote><p>https://github.com/reactjs/redux/blob/master/src/applyMiddleware.js</p></blockquote><ul><li>中间件应该是<code>redux</code>源码里面最绕的一部分</li></ul><p><strong>例子：redux-thunk</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">thunkMiddleware</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> getState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token parameter">next</span> <span class="token operator">=&gt;</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span></span>
<span class="line">          <span class="token function">action</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">)</span> <span class="token operator">:</span></span>
<span class="line">          <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//es5</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">thunkMiddleware</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">var</span> dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">var</span> getState <span class="token operator">=</span> store<span class="token punctuation">.</span>getState<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义中间件：logger</strong></p><ul><li>先看<code>logger</code>的实现</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">middleware</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>基本看出中间件声明的模版来了，就是下面这个样子。下面结合<code>applyMiddleware</code>的调用，来说明<code>store</code>、<code>next</code>、<code>action</code> 几个参数。</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;logger: dispatching &#39;</span> <span class="token operator">+</span> action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;logger: next state &#39;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>applyMiddleware调用例子</strong></p><ul><li><code>applyMiddleware</code> 的调用方式为 <code>applyMiddleware(...middlewares)(react.createStore)</code>。其实这里直接先创建 <code>store</code>，然后<code>applyMiddleware(...middlewares)(store)</code> 也很容易实现相同的效果，不过作者是故意这样设计的，为了避免在同一个store上多次应用同一个<code>middlerware</code></li><li>中间件顶层的<code>store</code>参数，并不是常规的<code>store</code>，虽然它也有 <code>getState</code>、<code>dispatch</code> 两个方法</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 上面的store参数，其实就是这个对象</span></span>
<span class="line">    <span class="token comment">// 其中，store 为内部的store，我们在外面 storeWithMiddleWare.dipatch的时候，内部实现是转成 store.dispatch</span></span>
<span class="line">    <span class="token comment">// 此外，可以看到 middlewareAPI.dispatch 方法，是最终封装后的dispatch（千万注意，如果在中间件内部 调用 store.dispatch，可能导致死循环 ）</span></span>
<span class="line">    <span class="token keyword">var</span> middlewareAPI <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">getState</span><span class="token operator">:</span> store<span class="token punctuation">.</span>getState<span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// 最后面, dispatch 被覆盖, 变成包装后的 dispatch 方法</span></span>
<span class="line">      <span class="token function-variable function">dispatch</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第二层的next函数，其实是一个“dispatch”方法</li><li>storeWithMiddleWare.dispatch(action) 的时候，会顺序进入各个中间件（按照定义时的顺序）。从当前的例子来看，大约如下，其实就是柯里化啦</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    storeWithMiddleWare<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token function">logger</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token function">timer</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>完整的示例代码</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> state<span class="token operator">===</span><span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&#39;add_todo&#39;</span><span class="token operator">:</span></span>
<span class="line">                <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span> </span>
<span class="line">                <span class="token keyword">return</span> state<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;add_todo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">text</span><span class="token operator">:</span> text</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 这里的 store，并不是 redux.createStore(reducer, initialState) 出来的 store</span></span>
<span class="line">    <span class="token comment">// 而是 {getState: store.getState, dispatch: function() { store.dispatch(action); }}</span></span>
<span class="line">    <span class="token comment">// </span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    </span>
<span class="line">        <span class="token comment">//     </span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;logger: dispatching &#39;</span> <span class="token operator">+</span> action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;logger: next state &#39;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;timer: dispatching &#39;</span> <span class="token operator">+</span> action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;timer: next state &#39;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> createStoreWidthMiddleware <span class="token operator">=</span> redux<span class="token punctuation">.</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span></span>
<span class="line">        logger<span class="token punctuation">,</span> </span>
<span class="line">        timer</span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">(</span>redux<span class="token punctuation">.</span>createStore<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> storeWithMiddleWare <span class="token operator">=</span> <span class="token function">createStoreWidthMiddleware</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    storeWithMiddleWare<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;subscribe: state is : &#39;</span> <span class="token operator">+</span> storeWithMiddleWare<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> storeWithMiddleWare<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token string">&#39;reading&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>源码解析</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> compose <span class="token keyword">from</span> <span class="token string">&#39;./compose&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Creates a store enhancer that applies middleware to the dispatch method</span>
<span class="line">     * of the Redux store. This is handy for a variety of tasks, such as expressing</span>
<span class="line">     * asynchronous actions in a concise manner, or logging every action payload.</span>
<span class="line">     *</span>
<span class="line">     * See \`redux-thunk\` package as an example of the Redux middleware.</span>
<span class="line">     *</span>
<span class="line">     * Because middleware is potentially asynchronous, this should be the first</span>
<span class="line">     * store enhancer in the composition chain.</span>
<span class="line">     *</span>
<span class="line">     * Note that each middleware will be given the \`dispatch\` and \`getState\` functions</span>
<span class="line">     * as named arguments.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">...</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">middlewares</span> The middleware chain to be applied.</span>
<span class="line">     * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> A store enhancer applying the middleware.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">      从调用方法 applyMiddleware(...middlewares)(Redux.createStore) 可以看出</span>
<span class="line">      next 参数实际上是 Redux.createStore. 而 Redux.createStore 的调用方式为 Redux.createStore(reducer, initialState)</span>
<span class="line">      所以 applyMiddleware(...middlewares)</span>
<span class="line">      1. 参数: Redux.createStore</span>
<span class="line">      2. 返回值:一个function, 跟 Redux.createStore 接受的参数一样</span>
<span class="line">    </span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>middlewares</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> initialState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 内部先创建一个store (相当于直接调用 Redux.createStore(reducer, initialState))</span></span>
<span class="line">        <span class="token keyword">var</span> store <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 保存最初始的store.dispatch</span></span>
<span class="line">        <span class="token keyword">var</span> dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">var</span> chain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">var</span> middlewareAPI <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">getState</span><span class="token operator">:</span> store<span class="token punctuation">.</span>getState<span class="token punctuation">,</span></span>
<span class="line">          <span class="token comment">// 最后面, dispatch 被覆盖, 变成包装后的 dispatch 方法</span></span>
<span class="line">          <span class="token function-variable function">dispatch</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 返回一个数组</span></span>
<span class="line">        <span class="token comment">// 贴个例子在这里做参考,redux-thunk</span></span>
<span class="line">        <span class="token comment">// function thunkMiddleware(store) {</span></span>
<span class="line">        <span class="token comment">//  var dispatch = store.dispatch;</span></span>
<span class="line">        <span class="token comment">//  var getState = store.getState;</span></span>
<span class="line">        <span class="token comment">//</span></span>
<span class="line">        <span class="token comment">//  这里的next其实就是dispatch</span></span>
<span class="line">        <span class="token comment">//  return function (next) {</span></span>
<span class="line">        <span class="token comment">//    return function (action) {</span></span>
<span class="line">        <span class="token comment">//      return typeof action === &#39;function&#39; ? action(dispatch, getState) : next(action);</span></span>
<span class="line">        <span class="token comment">//    };</span></span>
<span class="line">        <span class="token comment">//  };</span></span>
<span class="line">        <span class="token comment">//}</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">          chain 是个数组, 参考上面的 middlleware (redux-thunk),可以看到,chain的每个元素为如下形式的function</span>
<span class="line">          并且, 传入的 store.getState 为原始的 store.getState,而 dispatch则是包装后的 dispatch(不是原始的store.dispatch)</span>
<span class="line">          似乎是为了确保, 在每个middleware里调用 dispatch(action), 最终都是 用原始的 store.dispatch(action)</span>
<span class="line">          避免 store.dispatch 被覆盖, 导致middleware 顺序调用的过程中, store.dispatch的值变化 --&gt; store.dispatch 返回的值可能会有不同</span>
<span class="line">          违背 redux 的设计理念</span>
<span class="line">    </span>
<span class="line">          这里的 next 则为 原始的 store.dispatch (见下面 compose(...chain)(store.dispatch) )</span>
<span class="line">          function (next) {</span>
<span class="line">            return function (action) {</span>
<span class="line">    </span>
<span class="line">            }</span>
<span class="line">          }</span>
<span class="line">         */</span></span>
<span class="line">        chain <span class="token operator">=</span> middlewares<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">middleware</span> <span class="token operator">=&gt;</span> <span class="token function">middleware</span><span class="token punctuation">(</span>middlewareAPI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// compose(...chain)(store.dispatch) 返回了一个function</span></span>
<span class="line">        <span class="token comment">// 伪代码如下,</span></span>
<span class="line">        <span class="token comment">// function (action) {</span></span>
<span class="line">        <span class="token comment">//   middleware(store)(store.dispatch);</span></span>
<span class="line">        <span class="token comment">// }</span></span>
<span class="line">        dispatch <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>chain<span class="token punctuation">)</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从右到左, middleware1( middleware2( middleware3(dispatch) ) )</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 于是,最终调用 applyMiddleware(...middlewares)(Redux.createStore)</span></span>
<span class="line">        <span class="token comment">// 返回的 store, getState,subscribe 方法都是原始的那个 store.getState, store.subscribe</span></span>
<span class="line">        <span class="token comment">// 至于dispatch是封装过的</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token operator">...</span>store<span class="token punctuation">,</span></span>
<span class="line">          dispatch</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>阅读全文</p>`,41),c=[t];function l(i,o){return a(),s("div",null,c)}const r=n(p,[["render",l],["__file","React-Redux之源码分析.html.vue"]]),d=JSON.parse('{"path":"/React-Redux%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/react/06-Redux%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html 一、index.js https://github.com/reactjs/redux/blob/master/src/...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/React-Redux%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/react/06-Redux%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html 一、index.js https://github.com/reactjs/redux/blob/master/src/..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-05T17:33:19.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-05T17:33:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-05T17:33:19.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、index.js","slug":"一、index-js","link":"#一、index-js","children":[]},{"level":2,"title":"二、createStore.js","slug":"二、createstore-js","link":"#二、createstore-js","children":[]},{"level":2,"title":"三、combineReducers.js","slug":"三、combinereducers-js","link":"#三、combinereducers-js","children":[]},{"level":2,"title":"四、bindActionCreator.js","slug":"四、bindactioncreator-js","link":"#四、bindactioncreator-js","children":[]},{"level":2,"title":"五、applyMiddleware.js","slug":"五、applymiddleware-js","link":"#五、applymiddleware-js","children":[]}],"git":{"updatedTime":1717608799000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"React-Redux之源码分析.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/react/06-Redux%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/react/06-Redux%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html</a></p>\\n<h2>一、index.js</h2>"}');export{r as comp,d as data};
