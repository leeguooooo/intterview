import{_ as s,c as n,o as a,a as t}from"./app-DVMZDNEl.js";const e="/images/s_poetries_work_images_20210429165934.png",p="/images/s_poetries_work_images_20210429171107.png",o="/images/s_poetries_work_images_20210429171144.png",c="/images/s_poetries_work_images_20210429171344.png",l="/images/s_poetries_work_images_20210429171402.png",i="/images/s_poetries_work_images_20210429171554.png",u="/images/s_poetries_work_images_20210429171638.png",r="/images/s_poetries_work_images_20210429171744.png",d="/images/s_poetries_work_images_20210429171811.png",k="/images/s_poetries_work_images_20210429171835.png",g="/images/s_poetries_work_images_20210429171910.png",m="/images/s_poetries_work_images_20210429172119.png",v="/images/s_poetries_work_images_20210429172531.png",_="/images/s_poetries_work_images_20210429172652.png",h="/images/s_poetries_work_images_20210429174119.png",b="/images/s_poetries_work_images_20210429174151.png",E="/images/s_poetries_work_images_20210429174431.png",B={},w=t('<p>原文链接: <a href="https://interview.poetries.top/principle-docs/react/21-React%20%E4%BA%8B%E4%BB%B6%E4%B8%8E%20DOM%20%E4%BA%8B%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/react/21-React%20%E4%BA%8B%E4%BB%B6%E4%B8%8E%20DOM%20%E4%BA%8B%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C.html</a></p><blockquote><p>注：本文逻辑提取自 <code>React 16.13.x</code>。随着 React 版本的更迭，事件系统的实现细节难免有调整，但其设计思想总是一脉相承的，你只要把握住核心逻辑即可。</p></blockquote><h2 id="回顾原生-dom-下的事件流" tabindex="-1"><a class="header-anchor" href="#回顾原生-dom-下的事件流"><span>回顾原生 DOM 下的事件流</span></a></h2><p>在浏览器中，我们通过事件监听来实现 JS 和 HTML 之间的交互。一个页面往往会被绑定许许多多的事件，而页面接收事件的顺序，就是事件流。</p><blockquote><p>W3C 标准约定了一个事件的传播过程要经过以下 3 个阶段：</p></blockquote><ul><li>事件捕获阶段</li><li>目标阶段</li><li>事件冒泡阶段</li></ul><p><img src="'+e+`" alt=""></p><p>当事件被触发时，<code>首先经历的是一个捕获过程</code>：事件会从最外层的元素开始“穿梭”，逐层“穿梭”到最内层元素，这个过程会持续到事件抵达它目标的元素（也就是真正触发这个事件的元素）为止；此时事件流就切换到了“目标阶段”——事件被目标元素所接收；然后事件会被“回弹”，进入到冒泡阶段——它会沿着来时的路“逆流而上”，一层一层再走回去。</p><h3 id="dom-事件流下的性能优化思路-事件委托" tabindex="-1"><a class="header-anchor" href="#dom-事件流下的性能优化思路-事件委托"><span>DOM 事件流下的性能优化思路：事件委托</span></a></h3><p>在原生 DOM 中，事件委托（也叫事件代理）是一种重要的性能优化手段。这里我通过一道面试题，来快速地帮你回忆相关的知识。</p><p>请看下面这段代码：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">    <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ie=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>poem<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>床前明月光<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>疑是地上霜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>举头望明月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>低头思故乡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>锄禾日当午<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>汗滴禾下土<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>谁知盘中餐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>粒粒皆辛苦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>背不动了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>我背不动了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>问：在这段 HTML 渲染出的界面里，我希望做到点击每一个 li 元素，都能输出它内在的文本内容。你会怎么做？</p></blockquote><p>一个比较直观的思路是让每一个 li 元素都去监听一个点击动作，按照这个思路写出来的代码是这样的：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">      <span class="token comment">// 获取 li 列表</span></span>
<span class="line">      <span class="token keyword">var</span> liList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 逐个安装监听函数</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> liList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        liList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们当然可以像这样给 10 个 li 安装 10 次监听函数，但这样不仅累，开销也大。10 个监听函数做的还都是一模一样的事情，也不够优雅。怎么办呢？事件冒泡！</p></blockquote><p>对于这 10 个 li 来说，无论点击动作发生在哪个 li 上，点击事件最终都会被冒泡到它们共同的父亲——ul 元素上去，所以我们完全可以让 ul 来帮忙感知这个点击事件。</p><p>既然 ul 可以帮忙感知事件，那它能不能帮忙处理事件呢？答案是能，<code>因为我们有e.target</code>。ul 元素可以通过事件对象中的 <code>target</code> 属性，拿到实际触发事件的那个元素，针对这个元素分发事件处理的逻辑，做到真正的“委托”。</p><p>按照这个思路，我们就可以丢掉 for 循环来写代码了，以下是用事件代理来实现同样效果的代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;poem&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里再强调一下 e.target 这个属性，它指的是触发事件的具体目标，它记录着事件的源头。所以说，不管咱们的监听函数在哪一层执行，只要我拿到这个 e.target，就相当于拿到了真正触发事件的那个元素。拿到这个元素后，我们完全可以模拟出它的行为，实现无差别的监听效果。</p><p>像这样利用事件的冒泡特性，<code>把多个子元素的同一类型的监听逻辑，合并到父元素上通过一个监听函数来管理的行为，就是事件委托</code>。通过事件委托，我们可以减少内存开销、简化注册步骤，大大提高开发效率。</p><p>这绝妙的事件委托，正是 <code>React合成事件</code>的灵感源泉。</p><h2 id="react-事件系统是如何工作的" tabindex="-1"><a class="header-anchor" href="#react-事件系统是如何工作的"><span>React 事件系统是如何工作的</span></a></h2><blockquote><p>React 的事件系统沿袭了事件委托的思想。在 React 中，除了少数特殊的不可冒泡的事件（比如媒体类型的事件）无法被事件系统处理外，绝大部分的事件都不会被绑定在具体的元素上，而是统一被绑定在页面的 <code>document</code> 上。当事件在具体的 DOM 节点上被触发后，最终都会冒泡到 <code>document</code> 上，<code>document</code> 上所绑定的统一事件处理程序会将事件分发到具体的组件实例。</p></blockquote><p>注意：在<code>react17</code>以后，绝大部分的事件都不会被绑定在具体的元素上，而是统一被绑定在页面的 <code>root</code>节点上，而不是<code>document</code></p><p>在分发事件之前，React 首先会对事件进行包装，<code>把原生 DOM 事件包装成合成事件</code>。</p><h3 id="认识-react-合成事件" tabindex="-1"><a class="header-anchor" href="#认识-react-合成事件"><span>认识 React 合成事件</span></a></h3><blockquote><p>合成事件是 React 自定义的事件对象，它符合W3C规范，在底层<code>抹平了不同浏览器的差异，在上层面向开发者暴露统一的、稳定的、与 DOM 原生事件相同的事件接口</code>。开发者们由此便不必再关注烦琐的兼容性问题，可以专注于业务逻辑的开发。</p></blockquote><p>虽然合成事件并不是原生 DOM 事件，但它保存了原生 DOM 事件的引用。当你需要访问原生 DOM 事件对象时，可以通过合成事件对象的 <code>e.nativeEvent</code> 属性获取到它，如下图所示</p><p><img src="`+p+'" alt=""></p><p><code>e.nativeEvent</code> 将会输出 <code>MouseEvent</code> 这个原生事件，如下图所示：</p><p><img src="'+o+'" alt=""></p><p>到这里，大家就对 React 事件系统的基本原理，包括合成事件的基本概念有了一定的了解。接下来，我们将在此基础上结合 React 源码和调用栈，对事件系统的工作流进行深入的拆解。</p><h2 id="react-事件系统工作流拆解" tabindex="-1"><a class="header-anchor" href="#react-事件系统工作流拆解"><span>React 事件系统工作流拆解</span></a></h2><p>既然是事件系统，那就逃不出“事件绑定”和“事件触发”这两个关键动作。首先让我们一起来看看事件的绑定是如何实现的</p><h3 id="事件的绑定" tabindex="-1"><a class="header-anchor" href="#事件的绑定"><span>事件的绑定</span></a></h3><p>事件的绑定是在<code>组件的挂载过程中完成的</code>，具体来说，是在 <code>completeWork</code> 中完成的。这里需要你回忆起来的是 completeWork 中的以下三个动作：</p><blockquote><p>completeWork 内部有三个关键动作：<code>创建 DOM 节点（createInstance）</code>、<code>将 DOM 节点插入到 DOM 树中（appendAllChildren）</code>、<code>为 DOM 节点设置属性（finalizeInitialChildren）</code>。</p></blockquote><p>其中“为 DOM 节点 <strong>设置属性”</strong> 这个环节，会遍历 <code>FiberNode</code> 的 <code>props key</code>。当遍历到事件相关的 <code>props</code> 时，就会触发事件的注册链路。整个过程涉及的函数调用栈如下图所示：</p><p><img src="'+c+'" alt=""></p><p>这些函数之间是如何各司其职、打好“配合”的呢？请看下面这张工作流大图：</p><p><img src="'+l+'" alt=""></p><blockquote><p>从图中可以看出，事件的注册过程是由 <code>ensureListeningTo</code> 函数开启的。在 <code>ensureListeningTo</code> 中，会尝试获取当前 DOM 结构中的根节点（这里指的是 <code>document 对象</code>），然后通过调用 <code>legacyListenToEvent</code>，将统一的事件监听函数注册到 <code>document</code> 上面</p></blockquote><p>在 <code>legacyListenToEvent</code> 中，实际上是通过调用 <code>legacyListenToTopLevelEvent</code> 来处理事件和 <code>document</code> 之间的关系的。 <code>legacyListenToTopLevelEvent</code> 直译过来是“监听顶层的事件”，这里的“顶层”就可以理解为事件委托的最上层，也就是 <code>document</code> 节点。在 <code>legacyListenToTopLevelEvent</code> 中，有这样一段逻辑值得我们注意，请看下图：</p><p><img src="'+i+'" alt=""></p><p><code>listenerMap</code> 是在 <code>legacyListenToEvent</code> 里创建/获取的一个数据结构，它将记录当前 <code>document</code> 已经监听了哪些事件。在 <code>legacyListenToTopLevelEvent</code> 逻辑的起点，会首先判断 <code>listenerMap.has(topLevelType)</code> 这个条件是否为 <code>true</code>。</p><p>这里插播一个小的前置知识：<code>topLevelType</code> 在 <code>legacyListenToTopLevelEvent</code> 的函数上下文中代表事件的类型，比如说我尝试监听的是一个点击事件，那么 <code>topLevelType</code> 的值就会是 <code>click</code>，如下图所示：</p><p><img src="'+u+'" alt=""></p><p>若事件系统识别到 <code>listenerMap.has(topLevelType) 为 true</code>，也就是当前这个事件 <code>document</code> 已经监听过了，那么就会直接跳过对这个事件的处理，否则才会进入具体的事件监听逻辑。如此一来，<code>即便我们在 React 项目中多次调用了对同一个事件的监听，也只会在 document 上触发一次注册</code>。</p><p>为什么针对同一个事件，即便可能会存在多个回调，document 也只需要注册一次监听？因为 <code>React最终注册到 document 上的并不是某一个 DOM 节点上对应的具体回调逻辑，而是一个统一的事件分发函数</code>。这里我将断点打在事件监听函数的绑定动作上，请看下图：</p><p><img src="'+r+'" alt=""></p><p>在这段逻辑中，<code>element</code> 就是 <code>document</code> 这个 <code>DOM</code> 元素，如下图所示，它在 <code>legacyListenToEvent</code> 阶段被获取后，又被层层的逻辑传递到了这个位置。</p><p><img src="'+d+'" alt=""></p><p><code>addEventListener</code> 就更不用多说了，它是原生 DOM 里专门用来注册事件监听器的接口。我们真正需要关注的是图中这个函数的前两个入参，首先看 <code>eventType</code>，它表示事件的类型，这里我监听的是一个点击事件，因此 <code>eventType</code> 就是 <code>click</code>（见下图的运行时输出结果）。</p><p><img src="'+k+'" alt=""></p><p>重点在 <code>listener</code> 上，前面刚说过，最终注册到 <code>document</code> 上的是一个统一的事件分发函数，这个函数到底长啥样？我们来看看，以下是运行时的 listener 输出结果：</p><p><img src="'+g+'" alt=""></p><p>可以看到，<code>listener 本体是一个名为 dispatchDiscreteEvent 的函数</code>。事实上，根据情况的不同，<code>listener</code> 可能是以下 3 个函数中的任意一个：</p><ul><li><code>dispatchDiscreteEvent</code></li><li><code>dispatchUserBlockingUpdate</code></li><li><code>dispatchEvent</code></li></ul><blockquote><p><code>dispatchDiscreteEvent</code> 和 <code>dispatchUserBlockingUpdate</code> 的不同，主要体现在对优先级的处理上，对事件分发动作倒没什么影响。无论是 <code>dispatchDiscreteEvent</code> 还是 <code>dispatchUserBlockingUpdate</code>，它们最后都是通过调用 <code>dispatchEvent</code> 来执行事件分发的。因此可以认为，最后绑定到 <code>document</code> 上的这个统一的事件分发函数，其实就是 <code>dispatchEvent</code>。</p></blockquote><p>那么 <code>dispatchEvent</code> 是如何实现事件分发的呢？</p><h3 id="事件的触发" tabindex="-1"><a class="header-anchor" href="#事件的触发"><span>事件的触发</span></a></h3><blockquote><p>事件触发的本质是对 <code>dispatchEvent</code> 函数的调用。由于 <code>dispatchEvent</code>触发的调用链路较长，中间涉及的要素也过多，因此我们这里不再逐个跟踪函数的调用栈，直接来看核心工作流，请看下图：</p></blockquote><p><img src="'+m+`" alt=""></p><p>工作流中前三步我们在前面都有所提及，对你来说相对难以理解的应该是 4、5、6 这三步，这三步也是我们接下来讲解的重点。</p><h3 id="事件回调的收集与执行" tabindex="-1"><a class="header-anchor" href="#事件回调的收集与执行"><span>事件回调的收集与执行</span></a></h3><p>我们借助一个 Demo 来理解这个过程，Demo 组件代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;container&quot;</span> onClickCapture<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;捕获经过 div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;冒泡经过 div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">&quot;container&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">&#39;center&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">              <span class="token punctuation">{</span>state<span class="token punctuation">}</span></span>
<span class="line">            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token operator">&lt;</span>button style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">128</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>点击<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">      <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个组件对应的界面如下图所示：</p><p><img src="`+v+'" alt=""></p><p>界面中渲染出来的是一行数字文本和一个按钮，每点击一下按钮，数字文本会 +1。在 JSX 结构中，监听点击事件的除了 button 按钮外，还有 id 为 container 的 div 元素，这个 div 元素同时监听了点击事件的冒泡和捕获。</p><p>App 组件对应的 Fiber 树结构如下图所示：</p><p><img src="'+_+`" alt=""></p><p>接下来我们借助这张 Fiber 树结构图来理解事件回调的收集过程。</p><p>首先我们来看收集过程对应的源码逻辑，这部分逻辑在 <code>traverseTwoPhase</code> 函数中，源码如下（解析在注释里）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">traverseTwoPhase</span><span class="token punctuation">(</span><span class="token parameter">inst<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 定义一个 path 数组</span></span>
<span class="line">      <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>inst<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 将当前节点收集进 path 数组</span></span>
<span class="line">        path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 向上收集 tag===HostComponent 的父节点</span></span>
<span class="line">        inst <span class="token operator">=</span> <span class="token function">getParent</span><span class="token punctuation">(</span>inst<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">var</span> i<span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 从后往前，收集 path 数组中会参与捕获过程的节点与对应回调</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> path<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fn</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;captured&#39;</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">      <span class="token comment">// 从前往后，收集 path 数组中会参与冒泡过程的节点与对应回调</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fn</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;bubbled&#39;</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>traverseTwoPhase</code> 函数做了以下三件事情。</p><p><strong>1. 循环收集符合条件的父节点，存进 path 数组中</strong></p><blockquote><p><code>traverseTwoPhase</code>会以当前节点（触发事件的目标节点）为起点，不断向上寻找 tag===HostComponent 的父节点，并将这些节点按顺序收集进 path 数组中。其中 tag===HostComponent 这个条件是在 getParent() 函数中管控的。</p></blockquote><p>为什么一定要求 <code>tag===HostComponent</code> 呢？前面介绍渲染链路时，我们曾经讲过，HostComponent 是 DOM 元素对应的 Fiber 节点类型。此处限制 <code>tag===HostComponent</code>，也就是说只收集 DOM 元素对应的 Fiber 节点。之所以这样做，是因为浏览器只认识 DOM 节点，浏览器事件也只会在 DOM 节点之间传播，收集其他节点是没有意义的。</p><p>将这个过程对应到 Demo 示例的 Fiber 树中来看，button 节点是事件触发的起点，在它的父节点中，符合 <code>tag===HostComponent</code> 这个条件的只有 <code>div#container</code> 和 <code>div.App</code>（即下图高亮处）。</p><p><img src="`+h+'" alt=""></p><p>因此最后收集上来的 path 数组内容就是 <code>div#container</code>、<code>div.App</code> 及 <code>button</code> 节点自身（button 节点别忘了，它是 while 循环的起点，一开始就会被推进 path 数组），如下图所示：</p><p><img src="'+b+'" alt=""></p><p><strong>2. 模拟事件在捕获阶段的传播顺序，收集捕获阶段相关的节点实例与回调函数</strong></p><p>接下来，<code>traverseTwoPhase 会从后往前遍历 path 数组</code>，模拟事件的捕获顺序，收集事件在捕获阶段对应的回调与实例。</p><p>前面咱们说 <code>path</code> 数组是从子节点出发，向上收集得来的。所以说path 数组中子节点在前，祖先节点在后。</p><p>从后往前遍历 path 数组，其实就是从父节点往下遍历子节点，直至遍历到目标节点的过程，这个遍历顺序和事件在捕获阶段的传播顺序是一致的。在遍历的过程中，fn 函数会对每个节点的回调情况进行检查，若该节点上对应当前事件的捕获回调不为空，那么节点实例会被收集到合成事件的 <code>_dispatchInstances</code> 属性（也就是 <code>SyntheticEvent._dispatchInstances</code>）中去，事件回调则会被收集到合成事件的 <code>_dispatchListeners</code> 属性（也就是 <code>SyntheticEvent._dispatchListeners</code>） 中去，等待后续的执行。</p><p><strong>3. 模拟事件在冒泡阶段的传播顺序，收集冒泡阶段相关的节点实例与回调函数</strong></p><p>捕获阶段的工作完成后，<code>traverseTwoPhase</code> 会从后往前遍历 path 数组，模拟事件的冒泡顺序，收集事件在捕获阶段对应的回调与实例。</p><p>这个过程和步骤 2 基本是一样的，唯一的区别是对 path 数组的倒序遍历变成了正序遍历。既然倒序遍历模拟的是捕获阶段的事件传播顺序，那么正序遍历自然模拟的就是冒泡阶段的事件传播顺序。在正序遍历的过程中，同样会对每个节点的回调情况进行检查，若该节点上对应当前事件的冒泡回调不为空，那么节点实例和事件回调同样会分别被收集到 SyntheticEvent._dispatchInstances 和 SyntheticEvent._dispatchListeners 中去。</p><p>需要注意的是，当前事件对应的 SyntheticEvent 实例有且仅有一个，因此在模拟捕获和模拟冒泡这两个过程中，收集到的实例会被推入同一个 SyntheticEvent._dispatchInstances，收集到的事件回调也会被推入同一个 SyntheticEvent._dispatchListeners。</p><p>这样一来，我们在事件回调的执行阶段，只需要按照顺序执行 SyntheticEvent._dispatchListeners 数组中的回调函数，就能够一口气模拟出整个完整的 DOM 事件流，也就是 “捕获-目标-冒泡”这三个阶段。</p><p>接下来仍然是以 Demo 为例，我们来看看 button 上触发的点击事件对应的 SyntheticEvent 对象上的 _dispatchInstances 和 _dispatchListeners 各是什么内容，请看下图：</p><p><img src="'+E+'" alt=""></p><blockquote><p>可以看出，_dispatchInstances 和 _dispatchListeners 两个数组中的元素是严格的一一对应关系，这确保了在回调的执行阶段，我们可以简单地通过索引来将实例与监听函数关联起来，实现事件委托的效果。同时，<code>两个数组中元素的排序，完美地契合了 DOM 标准中“捕获-目标-冒泡”这三个阶段的事件传播顺序</code>，真是妙啊！</p></blockquote><p>阅读全文</p>',98),y=[w];function D(f,q){return a(),n("div",null,y)}const O=s(B,[["render",D],["__file","React-21-React-事件与-DOM-事件有何不同.html.vue"]]),T=JSON.parse('{"path":"/React-21-React-%E4%BA%8B%E4%BB%B6%E4%B8%8E-DOM-%E4%BA%8B%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/react/21-React%20%E4%BA%8B%E4%BB%B6%E4%B8%8E%20DOM%20%E4%BA%8B%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C.html 注：本文逻辑提取自 Re...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/React-21-React-%E4%BA%8B%E4%BB%B6%E4%B8%8E-DOM-%E4%BA%8B%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/react/21-React%20%E4%BA%8B%E4%BB%B6%E4%B8%8E%20DOM%20%E4%BA%8B%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C.html 注：本文逻辑提取自 Re..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_images_20210429165934.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429165934.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429171107.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429171144.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429171344.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429171402.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429171554.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429171638.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429171744.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429171811.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429171835.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429171910.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429172119.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429172531.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429172652.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429174119.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429174151.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429174431.png\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"回顾原生 DOM 下的事件流","slug":"回顾原生-dom-下的事件流","link":"#回顾原生-dom-下的事件流","children":[{"level":3,"title":"DOM 事件流下的性能优化思路：事件委托","slug":"dom-事件流下的性能优化思路-事件委托","link":"#dom-事件流下的性能优化思路-事件委托","children":[]}]},{"level":2,"title":"React 事件系统是如何工作的","slug":"react-事件系统是如何工作的","link":"#react-事件系统是如何工作的","children":[{"level":3,"title":"认识 React 合成事件","slug":"认识-react-合成事件","link":"#认识-react-合成事件","children":[]}]},{"level":2,"title":"React 事件系统工作流拆解","slug":"react-事件系统工作流拆解","link":"#react-事件系统工作流拆解","children":[{"level":3,"title":"事件的绑定","slug":"事件的绑定","link":"#事件的绑定","children":[]},{"level":3,"title":"事件的触发","slug":"事件的触发","link":"#事件的触发","children":[]},{"level":3,"title":"事件回调的收集与执行","slug":"事件回调的收集与执行","link":"#事件回调的收集与执行","children":[]}]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"React-21-React-事件与-DOM-事件有何不同.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/react/21-React%20%E4%BA%8B%E4%BB%B6%E4%B8%8E%20DOM%20%E4%BA%8B%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/react/21-React%20%E4%BA%8B%E4%BB%B6%E4%B8%8E%20DOM%20%E4%BA%8B%E4%BB%B6%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C.html</a></p>"}');export{O as comp,T as data};
