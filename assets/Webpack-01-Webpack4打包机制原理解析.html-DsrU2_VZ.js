import{_ as n,c as s,o as a,a as e}from"./app-DVMZDNEl.js";const p={},t=e(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/webpack/01-Webpack4%E6%89%93%E5%8C%85%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/webpack/01-Webpack4%E6%89%93%E5%8C%85%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html</a></p><blockquote><p><code>webpack</code>是一个打包模块化 <code>JavaScript</code> 的工具，在 <code>webpack</code>里一切文件皆模块，通过 <code>Loader</code> 转换文件，通过 <code>Plugin</code> 注入钩子，最后输出由多个模块组合成的文件。<code>webpack</code>专注于构建模块化项目。</p></blockquote><h3 id="简单版打包模型步骤" tabindex="-1"><a class="header-anchor" href="#简单版打包模型步骤"><span>简单版打包模型步骤</span></a></h3><blockquote><p>我们先从简单的入手看，当 webpack 的配置只有一个出口时，不考虑分包的情况，其实我们只得到了一个bundle.js的文件，这个文件里包含了我们所有用到的js模块，可以直接被加载执行。那么，我可以分析一下它的打包思路，大概有以下4步：</p></blockquote><ul><li>利用<code>babel</code>完成代码转换及解析,并生成单个文件的依赖模块<code>Map</code></li><li>从入口开始递归分析，并生成整个项目的依赖图谱</li><li>将各个引用模块打包为一个立即执行函数</li><li>将最终的<code>bundle</code>文件写入<code>bundle.js</code>中</li></ul><h3 id="单个文件的依赖模块map" tabindex="-1"><a class="header-anchor" href="#单个文件的依赖模块map"><span>单个文件的依赖模块Map</span></a></h3><ul><li>我们会可以使用这几个包： <ul><li><code>@babel/parser</code>：负责将代码解析为抽象语法树</li><li><code>@babel/traverse</code>：遍历抽象语法树的工具，我们可以在语法树中解析特定的节点，然后做一些操作，如<code>ImportDeclaratio</code>n获取通过<code>import</code>引入的模块,<code>FunctionDeclaration</code>获取函数</li><li><code>@babel/core</code>：代码转换，如ES6的代码转为ES5的模式</li></ul></li></ul><blockquote><p>由这几个模块的作用，其实已经可以推断出应该怎样获取单个文件的依赖模块了，转为<code>Ast</code>-&gt;遍历<code>Ast</code>-&gt;调用<code>ImportDeclaration</code>。代码如下</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">// exportDependencies.js</span></span>
<span class="line">    <span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/parser&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/traverse&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default</span>
<span class="line">    <span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/core&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">     <span class="token keyword">const</span> <span class="token function-variable function">exportDependencies</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 转为Ast</span></span>
<span class="line">        <span class="token keyword">const</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">sourceType</span> <span class="token operator">:</span> <span class="token string">&#39;module&#39;</span><span class="token comment">//babel官方规定必须加这个参数，不然无法识别ES Module</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">const</span> dependencies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//遍历AST抽象语法树</span></span>
<span class="line">        <span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//调用ImportDeclaration获取通过import引入的模块</span></span>
<span class="line">            <span class="token function">ImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>node<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">const</span> newFile <span class="token operator">=</span> <span class="token string">&#39;./&#39;</span> <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span> node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value<span class="token punctuation">)</span></span>
<span class="line">                <span class="token comment">//保存所依赖的模块</span></span>
<span class="line">                dependencies<span class="token punctuation">[</span>node<span class="token punctuation">.</span>source<span class="token punctuation">.</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> newFile</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//通过@babel/core和@babel/preset-env进行代码的转换</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span>code<span class="token punctuation">}</span> <span class="token operator">=</span> babel<span class="token punctuation">.</span><span class="token function">transformFromAst</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@babel/preset-env&quot;</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">{</span></span>
<span class="line">            filename<span class="token punctuation">,</span><span class="token comment">//该文件名</span></span>
<span class="line">            dependencies<span class="token punctuation">,</span><span class="token comment">//该文件所依赖的模块集合(键值对存储)</span></span>
<span class="line">            code<span class="token comment">//转换后的代码</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> exportDependencies</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以跑一个例子:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">//info.js</span></span>
<span class="line">    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">export</span> a</span>
<span class="line">    <span class="token comment">// index.js</span></span>
<span class="line">    <span class="token keyword">import</span> info <span class="token keyword">from</span><span class="token string">&#39;./info.js&#39;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//testExport.js</span></span>
<span class="line">    <span class="token keyword">const</span> exportDependencies <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./exportDependencies&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">exportDependencies</span><span class="token punctuation">(</span><span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单个文件的依赖模块Map</strong></p><blockquote><p>有了获取单个文件依赖的基础，我们就可以在这基础上，进一步得出整个项目的模块依赖图谱了。首先，从入口开始计算，得到<code>entryMap</code>，然后遍历<code>entryMap.dependencies</code>,取出其<code>value</code>(即依赖的模块的路径)，然后再获取这个依赖模块的依赖图谱，以此类推递归下去即可，代码如下：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> exportDependencies <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./exportDependencies&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//entry为入口文件路径</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">exportGraph</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> entryModule <span class="token operator">=</span> <span class="token function">exportDependencies</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> graphArray <span class="token operator">=</span> <span class="token punctuation">[</span>entryModule<span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graphArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> item <span class="token operator">=</span> graphArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//拿到文件所依赖的模块集合,dependencies的值参考exportDependencies</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> dependencies <span class="token punctuation">}</span> <span class="token operator">=</span> item<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token keyword">in</span> dependencies<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                graphArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token function">exportDependencies</span><span class="token punctuation">(</span>dependencies<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token comment">//关键代码，目的是将入口模块及其所有相关的模块放入数组</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//接下来生成图谱</span></span>
<span class="line">        <span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">        graphArray<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            graph<span class="token punctuation">[</span>item<span class="token punctuation">.</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token literal-property property">dependencies</span><span class="token operator">:</span> item<span class="token punctuation">.</span>dependencies<span class="token punctuation">,</span></span>
<span class="line">                <span class="token literal-property property">code</span><span class="token operator">:</span> item<span class="token punctuation">.</span>code</span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//可以看出，graph其实是 文件路径名：文件内容 的集合</span></span>
<span class="line">        <span class="token keyword">return</span> graph</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> exportGraph</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="输出立即执行函数" tabindex="-1"><a class="header-anchor" href="#输出立即执行函数"><span>输出立即执行函数</span></a></h3><blockquote><p>首先，我们的代码被加载到页面中的时候，是需要立即执行的。所以输出的<code>bundle.js</code>实质上要是一个立即执行函数。我们主要注意以下几点：</p></blockquote><ul><li>我们写模块的时候，用的是 <code>import/export</code>.经转换后,变成了<code>require/exports</code></li><li>我们要让<code>require/exports</code>能正常运行，那么我们得定义这两个东西，并加到<code>bundle.js</code>里</li><li>在依赖图谱里，代码都成了字符串。要执行，可以使用<code>eval</code></li></ul><blockquote><p>因此，我们要做这些工作：</p></blockquote><ul><li>定义一个<code>require</code>函数，<code>require</code>函数的本质是执行一个模块的代码，然后将相应变量挂载到<code>exports</code>对象上</li><li>获取整个项目的依赖图谱，从入口开始，调用<code>require</code>方法。完整代码如下：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> exportGraph <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./exportGraph&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 写入文件，可以用fs.writeFileSync等方法，写入到output.path中</span></span>
<span class="line">    <span class="token keyword">const</span> exportBundle <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./exportBundle&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">exportCode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//要先把对象转换为字符串，不然在下面的模板字符串中会默认调取对象的toString方法，参数变成[Object object]</span></span>
<span class="line">        <span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token function">exportGraph</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">exportBundle</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">            (function(graph) {</span>
<span class="line">                //require函数的本质是执行一个模块的代码，然后将相应变量挂载到exports对象上</span>
<span class="line">                function require(module) {</span>
<span class="line">                    //localRequire的本质是拿到依赖包的exports变量</span>
<span class="line">                    function localRequire(relativePath) {</span>
<span class="line">                        return require(graph[module].dependencies[relativePath]);</span>
<span class="line">                    }</span>
<span class="line">                    var exports = {};</span>
<span class="line">                    (function(require, exports, code) {</span>
<span class="line">                        eval(code);</span>
<span class="line">                    })(localRequire, exports, graph[module].code);</span>
<span class="line">                    return exports;</span>
<span class="line">                    //函数返回指向局部变量，形成闭包，exports变量在函数执行后不会被摧毁</span>
<span class="line">                }</span>
<span class="line">                require(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entry<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;)</span>
<span class="line">            })(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>graph<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> exportCode</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>至此，简单打包完成。贴一下我跑的demo的结果。<code>bundle.js</code>的文件内容为：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">     <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">graph</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//require函数的本质是执行一个模块的代码，然后将相应变量挂载到exports对象上</span></span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">//localRequire的本质是拿到依赖包的exports变量</span></span>
<span class="line">          <span class="token keyword">function</span> <span class="token function">localRequire</span><span class="token punctuation">(</span><span class="token parameter">relativePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">returnrequire</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">.</span>dependencies<span class="token punctuation">[</span>relativePath<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>localRequire<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> graph<span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token comment">//函数返回指向局部变量，形成闭包，exports变量在函数执行后不会被摧毁</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;./src/index.js&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;dependencies&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;./info.js&quot;</span><span class="token operator">:</span><span class="token string">&quot;./src/info.js&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string-property property">&quot;code&quot;</span><span class="token operator">:</span><span class="token string">&quot;\\&quot;use strict\\&quot;;\\n\\nvar _info = _interopRequireDefault(require(\\&quot;./info.js\\&quot;));\\n\\nfunction _interopRequireDefault(obj) { return obj &amp;&amp; obj.__esModule ? obj : { \\&quot;default\\&quot;: obj }; }\\n\\nconsole.log(_info[\\&quot;default\\&quot;]);&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string-property property">&quot;./src/info.js&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;dependencies&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;./name.js&quot;</span><span class="token operator">:</span><span class="token string">&quot;./src/name.js&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string-property property">&quot;code&quot;</span><span class="token operator">:</span><span class="token string">&quot;\\&quot;use strict\\&quot;;\\n\\nObject.defineProperty(exports, \\&quot;__esModule\\&quot;, {\\n  value: true\\n});\\nexports[\\&quot;default\\&quot;] = void 0;\\n\\nvar _name = require(\\&quot;./name.js\\&quot;);\\n\\nvar info = \\&quot;\\&quot;.concat(_name.name, \\&quot; is beautiful\\&quot;);\\nvar _default = info;\\nexports[\\&quot;default\\&quot;] = _default;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string-property property">&quot;./src/name.js&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;dependencies&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string-property property">&quot;code&quot;</span><span class="token operator">:</span><span class="token string">&quot;\\&quot;use strict\\&quot;;\\n\\nObject.defineProperty(exports, \\&quot;__esModule\\&quot;, {\\n  value: true\\n});\\nexports.name = void 0;\\nvar name = &#39;winty&#39;;\\nexports.name = name;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webpack打包流程概括" tabindex="-1"><a class="header-anchor" href="#webpack打包流程概括"><span>webpack打包流程概括</span></a></h3><blockquote><p><code>webpack</code>的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p></blockquote><ul><li><strong>初始化参</strong></li><li><strong>开始编译</strong> 用上一步得到的参数初始Compiler对象，加载所有配置的插件，通 过执行对象的run方法开始执行编译</li><li><strong>确定入口</strong> 根据配置中的 Entry 找出所有入口文件</li><li><strong>编译模块</strong> 从入口文件出发，调用所有配置的 Loader 对模块进行编译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li><strong>完成模块编译</strong> 在经过第4步使用 Loader 翻译完所有模块后， 得到了每个模块被编译后的最终内容及它们之间的依赖关系</li><li><strong>输出资源</strong> 根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk,再将每个 Chunk 转换成一个单独的文件加入输出列表中，这是可以修改输出内容的最后机会</li><li><strong>输出完成</strong> 在确定好输出内容后，根据配置确定输出的路径和文件名，将文件的内容写入文件系统中。</li></ul><blockquote><p>在以上过程中， <code>Webpack</code> 会在特定的时间点广播特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，井且插件可以调用 <code>Webpack</code> 提供的 <code>API</code> 改变 <code>Webpack</code> 的运行结果。其实以上7个步骤，可以简单归纳为初始化、编译、输出，三个过程，而这个过程其实就是前面说的基本模型的扩展。</p></blockquote><p>阅读全文</p>`,27),o=[t];function c(l,i){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","Webpack-01-Webpack4打包机制原理解析.html.vue"]]),d=JSON.parse('{"path":"/Webpack-01-Webpack4%E6%89%93%E5%8C%85%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/webpack/01-Webpack4%E6%89%93%E5%8C%85%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html webpack是一个打包模块化 JavaScript 的...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/Webpack-01-Webpack4%E6%89%93%E5%8C%85%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/webpack/01-Webpack4%E6%89%93%E5%8C%85%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html webpack是一个打包模块化 JavaScript 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"简单版打包模型步骤","slug":"简单版打包模型步骤","link":"#简单版打包模型步骤","children":[]},{"level":3,"title":"单个文件的依赖模块Map","slug":"单个文件的依赖模块map","link":"#单个文件的依赖模块map","children":[]},{"level":3,"title":"输出立即执行函数","slug":"输出立即执行函数","link":"#输出立即执行函数","children":[]},{"level":3,"title":"webpack打包流程概括","slug":"webpack打包流程概括","link":"#webpack打包流程概括","children":[]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"Webpack-01-Webpack4打包机制原理解析.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/webpack/01-Webpack4%E6%89%93%E5%8C%85%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/webpack/01-Webpack4%E6%89%93%E5%8C%85%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html</a></p>"}');export{r as comp,d as data};
