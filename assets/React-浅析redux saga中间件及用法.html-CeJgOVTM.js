import{_ as s,c as n,o as a,a as e}from"./app-f2Cpj3V4.js";const p="/images/s_poetries_work_gitee_2019_10_484.png",t="/images/s_poetries_work_gitee_2019_10_485.png",o="/images/s_poetries_work_gitee_2019_10_486.png",c="/images/s_poetries_work_gitee_2019_10_487.png",l="/images/s_poetries_work_gitee_2019_10_488.png",i="/images/s_poetries_work_gitee_2019_10_489.png",r="/images/s_poetries_work_gitee_2019_10_490.png",u="/images/s_poetries_work_gitee_2019_10_491.png",d={},k=e(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/react/04-%E6%B5%85%E6%9E%90redux%20saga%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E7%94%A8%E6%B3%95.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/react/04-%E6%B5%85%E6%9E%90redux%20saga%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E7%94%A8%E6%B3%95.html</a></p><h2 id="一、redux-thunk" tabindex="-1"><a class="header-anchor" href="#一、redux-thunk"><span>一、redux-thunk</span></a></h2><h3 id="_1-1-redux的副作用处理" tabindex="-1"><a class="header-anchor" href="#_1-1-redux的副作用处理"><span>1.1 redux的副作用处理</span></a></h3><blockquote><p>redux中的数据流大致是</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token constant">UI</span>—————<span class="token operator">&gt;</span>action（plain）—————<span class="token operator">&gt;</span>reducer——————<span class="token operator">&gt;</span>state——————<span class="token operator">&gt;</span><span class="token constant">UI</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+p+`" alt="img"></p><ul><li><code>redux</code>是遵循函数式编程的规则，上述的数据流中，<code>action</code>是一个原始js对象（<code>plain object</code>）且<code>reducer</code>是一个纯函数，对于同步且没有副作用的操作，上述的数据流起到可以管理数据，从而控制视图层更新的目的</li><li>如果存在副作用函数，那么我们需要首先处理副作用函数，然后生成原始的js对象。如何处理副作用操作，在<code>redux</code>中选择在发出<code>action</code>，到<code>reducer</code>处理函数之间使用中间件处理副作用</li></ul><blockquote><p>redux增加中间件处理副作用后的数据流大致如下：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token constant">UI</span>——<span class="token operator">&gt;</span><span class="token function">action</span><span class="token punctuation">(</span>side <span class="token keyword">function</span><span class="token punctuation">)</span>—<span class="token operator">&gt;</span>middleware—<span class="token operator">&gt;</span><span class="token function">action</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span>—<span class="token operator">&gt;</span>reducer—<span class="token operator">&gt;</span>state—<span class="token operator">&gt;</span><span class="token constant">UI</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+t+`" alt="img"></p><blockquote><p>在有副作用的<code>action</code>和原始的<code>action</code>之间增加中间件处理，从图中我们也可以看出，中间件的作用就是：</p></blockquote><ul><li>转换异步操作，<strong>生成原始的action</strong> ，这样，<code>reducer</code>函数就能处理相应的<code>action</code>，从而改变<code>state</code>，更新<code>UI</code></li></ul><h3 id="_1-2-redux-thunk源码" tabindex="-1"><a class="header-anchor" href="#_1-2-redux-thunk源码"><span>1.2 redux-thunk源码</span></a></h3><blockquote><p>在redux中，thunk是redux作者给出的中间件，实现极为简单，10多行代码</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span><span class="token parameter">extraArgument</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> getState <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">next</span> <span class="token operator">=&gt;</span> <span class="token parameter">action</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token function">action</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> extraArgument<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> thunk <span class="token operator">=</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    thunk<span class="token punctuation">.</span>withExtraArgument <span class="token operator">=</span> createThunkMiddleware<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> thunk<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这几行代码做的事情也很简单，判别action的类型，如果action是函数，就调用这个函数，调用的步骤为</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token function">action</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> extraArgument<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>发现实参为<code>dispatch</code>和<code>getState</code>，因此我们在定义<code>action</code>为<code>thunk</code>函数是，一般形参为<code>dispatch</code>和<code>getState</code></p></blockquote><h3 id="_1-3-redux-thunk的缺点" tabindex="-1"><a class="header-anchor" href="#_1-3-redux-thunk的缺点"><span>1.3 redux-thunk的缺点</span></a></h3><blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"> </span>
<span class="line"> </span>
<span class="line"></span>
<span class="line">thunk<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">的缺点也是很明显的，</span><span class="token template-punctuation string">\`</span></span>thunk<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">仅仅做了执行这个函数，并不在乎函数主体内是什么，也就是说</span><span class="token template-punctuation string">\`</span></span>thunk<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">使得</span><span class="token template-punctuation string">\`</span></span>redux<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">可以接受函数作为</span><span class="token template-punctuation string">\`</span></span>action<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">，但是函数的内部可以多种多样。比如下面是一个获取商品列表的异步操作所对应的</span><span class="token template-punctuation string">\`</span></span>action</span>
<span class="line"> </span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/goodList&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token comment">//fecth返回的是一个promise</span></span>
<span class="line">          <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">var</span> json<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">if</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>msg<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;init&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span>json<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>从这个具有副作用的<code>action</code>中，我们可以看出，函数内部极为复杂。如果需要为每一个异步操作都如此定义一个<code>action</code>，显然<code>action</code>不易维护</p></blockquote><p><strong>action不易维护的原因</strong></p><ul><li><code>action</code>的形式不统一</li><li>就是异步操作太为分散，分散在了各个<code>action</code>中</li></ul><h2 id="二、redux-saga-简介" tabindex="-1"><a class="header-anchor" href="#二、redux-saga-简介"><span>二、redux-saga 简介</span></a></h2><blockquote><p><code>redux-saga</code>是一个 <code>redux</code>中间件，它具有如下特性</p></blockquote><ul><li>集中处理 <code>redux</code> 副作用问题。</li><li>被实现为 <code>generator</code> 。</li><li>类 <code>redux-thunk</code> 中间件。</li><li><code>watch</code>/<code>worker</code>（监听-&gt;执行） 的工作形式</li></ul><p><strong>redux-saga的优点</strong></p><ul><li>集中处理了所有的异步操作，异步接口部分一目了然</li><li><code>action</code>是普通对象，这跟<code>redux</code>同步的<code>action</code>一模一样</li><li>通过<code>Effect</code>，方便异步接口的测试</li><li>通过<code>worker</code> 和<code>watcher</code>可以实现非阻塞异步调用，并且同时可以实现非阻塞调用下的事件监听</li><li>异步操作的流程是可以控制的，可以随时取消相应的异步操作</li></ul><blockquote><p>基本用法</p></blockquote><ul><li>使用<code>createSagaMiddleware</code>方法创建<code>saga</code> 的<code>Middleware</code>，然后在创建的<code>redux</code>的<code>store</code>时，使用<code>applyMiddleware</code>函数将创建的<code>saga Middleware</code>实例绑定到<code>store</code>上，最后可以调用<code>saga Middleware</code>的<code>run</code>函数来执行某个或者某些<code>Middleware</code>。</li><li>在<code>saga</code>的<code>Middleware</code>中，可以使用<code>takeEvery</code>或者<code>takeLatest</code>等<code>API</code>来监听某个<code>action</code>，当某个<code>action</code>触发后，<code>saga</code>可以使用<code>call</code>发起异步操作，操作完成后使用<code>put</code>函数触发<code>action</code>，同步更新<code>state</code>，从而完成整个<code>State</code>的更新。</li></ul><h2 id="三、redux-saga使用案例" tabindex="-1"><a class="header-anchor" href="#三、redux-saga使用案例"><span>三、redux-saga使用案例</span></a></h2><ul><li><code>redux-saga</code>是控制执行的<code>generator</code>，在<code>redux-saga</code>中<code>action</code>是原始的<code>js</code>对象，把所有的异步副作用操作放在了<code>saga</code>函数里面。这样既统一了<code>action</code>的形式，又使得异步操作集中可以被集中处理</li><li><code>redux-saga</code>是通过<code>genetator</code>实现的，如果不支持<code>generator</code>需要通过插件<code>babel-polyfill</code>转义。我们接着来实现一个输出<code>hellosaga</code>的例子</li></ul><p><strong>创建一个helloSaga.js文件</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">helloSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Sagas!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在redux中使用redux-saga中间件</strong></p><blockquote><p>在<code>main.js</code>中</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> createSagaMiddleware <span class="token keyword">from</span> <span class="token string">&#39;redux-saga&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> helloSaga <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./sagas&#39;</span></span>
<span class="line">    <span class="token keyword">const</span> sagaMiddleware<span class="token operator">=</span><span class="token function">createSagaMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span></span>
<span class="line">     reducer<span class="token punctuation">,</span></span>
<span class="line">     <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>sagaMiddleware<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    sagaMiddleware<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>helloSaga<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//会输出Hello, Sagas!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>和调用<code>redux</code>的其他中间件一样，如果想使用<code>redux- saga</code>中间件，那么只要在<code>applyMiddleware</code>中调用一个<code>createSagaMiddleware</code>的实例。唯一不同的是需要调用<code>run</code>方法使得<code>generator</code>可以开始执行</p></blockquote><h2 id="四、redux-saga使用细节" tabindex="-1"><a class="header-anchor" href="#四、redux-saga使用细节"><span>四、redux-saga使用细节</span></a></h2><h3 id="_4-1-声明式的effect" tabindex="-1"><a class="header-anchor" href="#_4-1-声明式的effect"><span>4.1 声明式的Effect</span></a></h3><blockquote><p>在<code>redux-saga</code>中提供了一系列的<code>api</code>，比如<code>take</code>、<code>put</code>、<code>all</code>、<code>select</code>等<code>API</code>，在<code>redux- saga</code>中将这一系列的<code>api</code>都定义为Effect。这些<code>Effect</code>执行后，当函数<code>resolve</code>时返回一个描述对象，然后<code>redux- saga</code>中间件根据这个描述对象恢复执行<code>generator</code>中的函数</p></blockquote><p><strong>redux-thunk的大体过程</strong></p><blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="token function">action1</span><span class="token punctuation">(</span>side <span class="token keyword">function</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">—&gt;</span><span class="token template-punctuation string">\`</span></span>redux<span class="token operator">-</span>thunk<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">监听—&gt;执行相应的有副作用的方法—&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token function">action2</span><span class="token punctuation">(</span>plain</span>
<span class="line">object<span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><img src="`+o+'" alt="img"></p><blockquote><p>转化到<code>action2</code>是一个原始<code>js</code>对象形式的<code>action</code>，然后执行<code>reducer</code>函数就会更新<code>store</code>中的<code>state</code></p></blockquote><p><strong>redux-saga的大体过程</strong></p><blockquote><p>action1(plain object)——&gt;redux- saga监听—&gt;执行相应的Effect方法——&gt;返回描述对象—&gt;恢复执行异步和副作用函数—&gt;action2(plain object)</p></blockquote><p><img src="'+c+`" alt="img"></p><blockquote><p>对比<code>redux-thunk</code>我们发现，<code>redux- saga</code>中监听到了原始<code>js</code>对象<code>action</code>，并不会马上执行副作用操作，会先通过<code>Effect</code>方法将其转化成一个描述对象，然后再将描述对象，作为标识，再恢复执行副作用函数</p></blockquote><h3 id="_4-2-effect提供的具体方法" tabindex="-1"><a class="header-anchor" href="#_4-2-effect提供的具体方法"><span>4.2 Effect提供的具体方法</span></a></h3><blockquote><p>下面来介绍几个<code>Effect</code>中常用的几个方法，从低阶的API，比如<code>take</code>，<code>call(apply)</code>，<code>fork</code>，<code>put</code>，<code>select</code>等，以及高阶<code>API</code>，比如<code>takeEvery</code>和<code>takeLatest</code>等</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>take<span class="token punctuation">,</span>call<span class="token punctuation">,</span>put<span class="token punctuation">,</span>select<span class="token punctuation">,</span>fork<span class="token punctuation">,</span>takeEvery<span class="token punctuation">,</span>takeLatest<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-saga/effects&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_4-2-1-take" tabindex="-1"><a class="header-anchor" href="#_4-2-1-take"><span>4.2.1 take</span></a></h4><blockquote><p><code>take</code>这个方法，是用来监听<code>action</code>，返回的是监听到的<code>action</code>对象。比如</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> loginAction <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;login&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在<code>UI Component</code>中<code>dispatch</code>一个<code>action</code></p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token function">dispatch</span><span class="token punctuation">(</span>loginAction<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在saga中使用：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>可以监听到UI传递到中间件的<code>Action</code>,上述<code>take</code>方法的返回，就是<code>dipath</code>的原始对象。一旦监听到<code>login</code>动作，返回的<code>action</code>为：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;login&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-call-apply" tabindex="-1"><a class="header-anchor" href="#_4-2-2-call-apply"><span>4.2.2 call(apply)</span></a></h4><blockquote><p><code>call</code>和<code>apply</code>方法与<code>js</code>中的<code>call</code>和<code>apply</code>相似，我们以<code>call</code>方法为例</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token function">call</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><code>call</code>方法调用<code>fn</code>，参数为<code>args</code>，返回一个描述对象。不过这里<code>call</code>方法传入的函数<code>fn</code>可以是普通函数，也可以是<code>generator</code>。<code>call</code>方法应用很广泛，在<code>redux- saga</code>中使用异步请求等常用<code>call</code>方法来实现</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>fetch<span class="token punctuation">,</span><span class="token string">&#39;/userInfo&#39;</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_4-2-3-put" tabindex="-1"><a class="header-anchor" href="#_4-2-3-put"><span>4.2.3 put</span></a></h4><blockquote><p>redux-saga做为中间件，工作流是这样的</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token constant">UI</span>——<span class="token operator">&gt;</span>action1————<span class="token operator">&gt;</span>redux<span class="token operator">-</span>saga中间件————<span class="token operator">&gt;</span>action2————<span class="token operator">&gt;</span>reducer<span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>从工作流中，我们发现<code>redux- saga</code>执行完副作用函数后，必须发出<code>action</code>，然后这个<code>action</code>被<code>reducer</code>监听，从而达到更新<code>state</code>的目的。相应的这里的<code>put</code>对应与<code>redux</code>中的<code>dispatch</code>，工作流程图如下</p></blockquote><p><img src="`+l+`" alt="img"></p><blockquote><p>可以看出<code>redux- saga</code>执行副作用方法转化<code>action</code>时，<code>put</code>这个<code>Effect</code>方法跟<code>redux</code>原始的<code>dispatch</code>相似，都是可以发出<code>action</code>，且发出的<code>action</code>都会被<code>reducer</code>监听到。<code>put</code>的使用方法</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_4-2-4-select" tabindex="-1"><a class="header-anchor" href="#_4-2-4-select"><span>4.2.4 select</span></a></h4><blockquote><p><code>put</code>方法与<code>redux</code>中的<code>dispatch</code>相对应，同样的如果我们想在中间件中获取<code>state</code>，那么需要使用<code>select</code>。<code>select</code>方法对应的是<code>redux</code>中的<code>getState</code>，用户获取<code>store</code>中的<code>state</code>，使用方法：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_4-2-5-fork" tabindex="-1"><a class="header-anchor" href="#_4-2-5-fork"><span>4.2.5 fork</span></a></h4><blockquote><p><code>fork</code>方法相当于<code>web work</code>，<code>fork</code>方法不会阻塞主线程，在非阻塞调用中十分有用</p></blockquote><h4 id="_4-2-6-takeevery和takelatest" tabindex="-1"><a class="header-anchor" href="#_4-2-6-takeevery和takelatest"><span>4.2.6 takeEvery和takeLatest</span></a></h4><blockquote><p><code>takeEvery</code>和<code>takeLatest</code>用于监听相应的动作并执行相应的方法，是构建在<code>take</code>和<code>fork</code>上面的高阶<code>api</code>，比如要监听<code>login</code>动作，好用<code>takeEvery</code>方法可以</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token function">takeEvery</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span>loginFunc<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>takeEvery</code>监听到<code>login</code>的动作，就会执行<code>loginFunc</code>方法，除此之外，<code>takeEvery</code>可以同时监听到多个相同的<code>action</code>。</li><li><code>takeLatest</code>方法跟<code>takeEvery</code>是相同方式调用</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token function">takeLatest</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">,</span>loginFunc<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>与<code>takeLatest</code>不同的是，<code>takeLatest</code>是会监听执行最近的那个被触发的<code>action</code></p></blockquote><h2 id="五、案例分析一" tabindex="-1"><a class="header-anchor" href="#五、案例分析一"><span>五、案例分析一</span></a></h2><blockquote><p>接着我们来实现一个<code>redux- saga</code>样例，存在一个登陆页，登陆成功后，显示列表页，并且，在列表页，可以点击登出，返回到登陆页。例子的最终展示效果如下</p></blockquote><p><img src="`+i+'" alt="img"></p><blockquote><p>样例的功能流程图为</p></blockquote><p><img src="'+r+`" alt="img"></p><h3 id="_5-1-loginpanel-登陆页" tabindex="-1"><a class="header-anchor" href="#_5-1-loginpanel-登陆页"><span>5.1 LoginPanel(登陆页)</span></a></h3><p><strong>输入时时保存用户名和密码</strong></p><ul><li>用户名输入框和密码框onchange时触发的函数为</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token function-variable function">changeUsername</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;CHANGE_USERNAME&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">value</span><span class="token operator">:</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">changePassword</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;CHANGE_PASSWORD&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">value</span><span class="token operator">:</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在函数中最后会<code>dispatch</code>两个<code>action：CHANGE_USERNAME和CHANGE_PASSWORD</code></p></blockquote><ul><li>在<code>saga.js</code>文件中监听这两个方法并执行副作用函数，最后<code>put</code>发出转化后的<code>action</code>，给<code>reducer</code>函数调用</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">watchUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> action<span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">&#39;CHANGE_USERNAME&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;change_username&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">value</span><span class="token operator">:</span>action<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">watchPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> action<span class="token operator">=</span><span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">&#39;CHANGE_PASSWORD&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;change_password&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">value</span><span class="token operator">:</span>action<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>最后在<code>reducer</code>中接收到<code>redux- saga</code>的<code>put</code>方法传递过来的<code>action：change_username</code>和<code>change_password</code>，然后更新<code>state</code></p></blockquote><p><strong>监听登陆事件判断登陆是否成功</strong></p><blockquote><p>在UI中发出的登陆事件为</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token function-variable function">toLoginIn</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">username<span class="token punctuation">,</span>password</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;TO_LOGIN_IN&#39;</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>登陆事件的<code>action</code>为：<code>TO_LOGIN_IN</code>.对于登入事件的处理函数为：</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//监听登入事件</span></span>
<span class="line">        <span class="token keyword">const</span> action1<span class="token operator">=</span><span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">&#39;TO_LOGIN_IN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> res<span class="token operator">=</span><span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>fetchSmart<span class="token punctuation">,</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">body</span><span class="token operator">:</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">username</span><span class="token operator">:</span>action1<span class="token punctuation">.</span>username<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">password</span><span class="token operator">:</span>action1<span class="token punctuation">.</span>password</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;to_login_in&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在上述的处理函数中，首先监听原始动作提取出传递来的用户名和密码，然后请求是否登陆成功，如果登陆成功有返回值，则执行<code>put</code>的<code>action:to_login_in</code></p></blockquote><h3 id="_5-2-loginsuccess" tabindex="-1"><a class="header-anchor" href="#_5-2-loginsuccess"><span>5.2 LoginSuccess</span></a></h3><blockquote><p>(登陆成功列表展示页)</p></blockquote><ul><li>登陆成功后的页面功能包括： <ul><li>获取列表信息，展示列表信息</li><li>登出功能，点击可以返回登陆页面</li></ul></li></ul><p><strong>获取列表信息</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>delay<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-saga&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">yield</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>fetchSmart<span class="token punctuation">,</span><span class="token string">&#39;/list&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">         <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token literal-property property">body</span><span class="token operator">:</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;update_list&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">list</span><span class="token operator">:</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>activityList<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;update_list_error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>为了演示请求过程，我们在本地<code>mock</code>，通过<code>redux- saga</code>的工具函数<code>delay</code>，<code>delay</code>的功能相当于延迟xx秒，因为真实的请求存在延迟，因此可以用delay在本地模拟真实场景下的请求延迟</p></blockquote><p><strong>登出功能</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">const</span> action2<span class="token operator">=</span><span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">&#39;TO_LOGIN_OUT&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;to_login_out&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>与登入相似，登出的功能从UI处接受<code>action:TO_LOGIN_OUT</code>,然后转发<code>action:to_login_out</code></p></blockquote><p><strong>完整的实现登入登出和列表展示的代码</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">yield</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>fetchSmart<span class="token punctuation">,</span><span class="token string">&#39;/list&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">         <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">         <span class="token literal-property property">body</span><span class="token operator">:</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;update_list&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">list</span><span class="token operator">:</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>activityList<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;update_list_error&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">watchIsLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//监听登入事件</span></span>
<span class="line">        <span class="token keyword">const</span> action1<span class="token operator">=</span><span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">&#39;TO_LOGIN_IN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">const</span> res<span class="token operator">=</span><span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>fetchSmart<span class="token punctuation">,</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">body</span><span class="token operator">:</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">username</span><span class="token operator">:</span>action1<span class="token punctuation">.</span>username<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">password</span><span class="token operator">:</span>action1<span class="token punctuation">.</span>password</span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//根据返回的状态码判断登陆是否成功</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;to_login_in&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">//登陆成功后获取首页的活动列表</span></span>
<span class="line">          <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>getList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">//监听登出事件</span></span>
<span class="line">        <span class="token keyword">const</span> action2<span class="token operator">=</span><span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token string">&#39;TO_LOGIN_OUT&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;to_login_out&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过请求状态码判断登入是否成功，在登陆成功后，可以通过</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>getList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>注意call方法调用是会阻塞主线程的，具体来说</p></blockquote><ul><li>在call方法调用结束之前，call方法之后的语句是无法执行的</li><li>如果<code>call(getList)</code>存在延迟，<code>call(getList)</code>之后的语句 <code>const action2=yieldtake(&#39;TO_LOGIN_OUT&#39;)</code>在<code>call</code>方法返回结果之前无法执行</li><li>在延迟期间的登出操作会被忽略</li></ul><p><img src="`+u+`" alt="img"></p><p><strong>无阻塞调用</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>getList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改为</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">yield</span> <span class="token function">fork</span><span class="token punctuation">(</span>getList<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>通过fork方法不会阻塞主线程，在白屏时点击登出，可以立刻响应登出功能，从而返回登陆页面</p></blockquote><h2 id="六、案例分析二" tabindex="-1"><a class="header-anchor" href="#六、案例分析二"><span>六、案例分析二</span></a></h2><h3 id="_6-1-配置saga信息" tabindex="-1"><a class="header-anchor" href="#_6-1-配置saga信息"><span>6.1 配置saga信息</span></a></h3><blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"> </span>
<span class="line"> </span>
<span class="line">    src<span class="token operator">/</span>store<span class="token operator">/</span>configureStore<span class="token punctuation">.</span>js</span>
<span class="line"> </span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware<span class="token punctuation">,</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span></span>
<span class="line">    <span class="token comment">// import {createLogger } from &#39;redux-logger&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> createHistory <span class="token keyword">from</span> <span class="token string">&#39;history/createBrowserHistory&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> createSagaMiddleware <span class="token keyword">from</span> <span class="token string">&#39;redux-saga&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> routerMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-redux&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> rootSaga <span class="token keyword">from</span> <span class="token string">&#39;../sagas&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">&#39;../reducers/&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">createHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token function">routerMiddleware</span><span class="token punctuation">(</span>history<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//创建saga middleware</span></span>
<span class="line">    <span class="token keyword">const</span> sagaMiddleware <span class="token operator">=</span> <span class="token function">createSagaMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">configureStore</span> <span class="token operator">=</span> <span class="token parameter">preloadedState</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    	<span class="token comment">// 安装 Redux-DevTools Chrome 插件后可用 composeEnhancers()</span></span>
<span class="line">    	<span class="token keyword">const</span> composeEnhancers <span class="token operator">=</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ <span class="token operator">||</span> compose</span>
<span class="line">    </span>
<span class="line">    	<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span></span>
<span class="line">    		rootReducer<span class="token punctuation">,</span></span>
<span class="line">    		preloadedState<span class="token punctuation">,</span></span>
<span class="line">    		<span class="token function">composeEnhancers</span><span class="token punctuation">(</span></span>
<span class="line">    			<span class="token function">applyMiddleware</span><span class="token punctuation">(</span>sagaMiddleware<span class="token punctuation">,</span>middleware<span class="token punctuation">)</span></span>
<span class="line">    		<span class="token punctuation">)</span></span>
<span class="line">    	<span class="token punctuation">)</span></span>
<span class="line">    	sagaMiddleware<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>rootSaga<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    	<span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    		<span class="token comment">// Enable Webpack hot module replacement for reducers</span></span>
<span class="line">    		module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">&#39;../reducers&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    			<span class="token keyword">const</span> nextRootReducer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../reducers&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default</span>
<span class="line">    			store<span class="token punctuation">.</span><span class="token function">replaceReducer</span><span class="token punctuation">(</span>nextRootReducer<span class="token punctuation">)</span></span>
<span class="line">    		<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    	<span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    	<span class="token keyword">return</span> store</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> configureStore</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-配置reduce" tabindex="-1"><a class="header-anchor" href="#_6-2-配置reduce"><span>6.2 配置reduce</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// src/reducers/index.js</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>combineReducers<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>routerReducer <span class="token keyword">as</span> routing<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-redux&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          routing<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">poetry</span> 				<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./poetry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> rootReducer</span>
<span class="line">    <span class="token comment">// src/reducers/poetry.js</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ActionTypes <span class="token keyword">from</span> <span class="token string">&#39;../actions&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    	<span class="token literal-property property">fetching</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    	<span class="token literal-property property">error</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    	<span class="token literal-property property">errMsg</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    	<span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    	<span class="token keyword">if</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> ActionTypes<span class="token punctuation">.</span><span class="token constant">FETCH_POETRY_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    		<span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>state<span class="token punctuation">,</span><span class="token literal-property property">fetching</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">errMsg</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> ActionTypes<span class="token punctuation">.</span><span class="token constant">FETCH_POETRY_SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    		<span class="token keyword">const</span> data <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>data</span>
<span class="line">    		<span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>state<span class="token punctuation">,</span><span class="token literal-property property">fetching</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token literal-property property">errMsg</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> ActionTypes<span class="token punctuation">.</span><span class="token constant">FETCH_POETRY_FAILURE</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    		<span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>state<span class="token punctuation">,</span><span class="token literal-property property">fetching</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token literal-property property">error</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">errMsg</span><span class="token operator">:</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>errMsg<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    	<span class="token punctuation">}</span></span>
<span class="line">    	<span class="token keyword">return</span> state</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-处理action" tabindex="-1"><a class="header-anchor" href="#_6-3-处理action"><span>6.3 处理action</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// src/action/index.js</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> createAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-actions&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COMMON_FETCHING</span> <span class="token operator">=</span> <span class="token string">&#39;COMMON_FETCHING&#39;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COMMON_OVER</span> <span class="token operator">=</span> <span class="token string">&#39;COMMON_OVER&#39;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MSG_SHOW</span> <span class="token operator">=</span> <span class="token string">&#39;MSG_SHOW&#39;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MSG_INIT</span> <span class="token operator">=</span> <span class="token string">&#39;MSG_INIT&#39;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">POP_LOGIN</span> <span class="token operator">=</span> <span class="token string">&#39;POP_LOGIN&#39;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initMsg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span> <span class="token operator">:</span> <span class="token constant">MSG_INIT</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 相比用thunk多了一步 多了个action 来触发saga woker</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">FETCH_POETRY_REQUEST</span> <span class="token operator">=</span> <span class="token string">&#39;FETCH_POETRY_REQUEST&#39;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">FETCH_POETRY_SUCCESS</span> <span class="token operator">=</span> <span class="token string">&#39;FETCH_POETRY_SUCCESS&#39;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">FETCH_POETRY_FAILURE</span> <span class="token operator">=</span> <span class="token string">&#39;FETCH_POETRY_FAILURE&#39;</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> fetchPoetryRequest <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token constant">FETCH_POETRY_REQUEST</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> fetchPoetrySuccess <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token constant">FETCH_POETRY_SUCCESS</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> fetchPoetryFauilure<span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token constant">FETCH_POETRY_FAILURE</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-处理sagas" tabindex="-1"><a class="header-anchor" href="#_6-4-处理sagas"><span>6.4 处理sagas</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// src/sagas/index.js</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> all <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-saga/effects&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">yield</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token operator">...</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./fetchPoetry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default</span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// src/fetchPoetry.js</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>put<span class="token punctuation">,</span>take<span class="token punctuation">,</span>call<span class="token punctuation">,</span>fork<span class="token punctuation">,</span>takeEvery<span class="token punctuation">,</span>select<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-saga/effects&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>delay<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux-saga&#39;</span></span>
<span class="line">    <span class="token keyword">import</span>  <span class="token operator">*</span> <span class="token keyword">as</span> api  <span class="token keyword">from</span> <span class="token string">&#39;../api&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionTypes <span class="token keyword">from</span> <span class="token string">&#39;../actions/&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// saga worker 监听FETCH_POETRY_REQUEST动作触发执行相应操作</span></span>
<span class="line">    <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fetchPoetrySaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// yield delay(100)</span></span>
<span class="line">        <span class="token comment">// ======== 写法一 ========= </span></span>
<span class="line">        <span class="token comment">// yield takeEvery(actionTypes.FETCH_POETRY_REQUEST,function*(action){</span></span>
<span class="line">        <span class="token comment">//     // 调用this.props.fetchPoetryRequest({user:&#39;poetries&#39;,age:23}) 传参进来这里</span></span>
<span class="line">        <span class="token comment">//     // 也可以通过这样获取state中的参数 const state = yield select()</span></span>
<span class="line">        <span class="token comment">//     const {user,age} = action</span></span>
<span class="line">        <span class="token comment">//     try{</span></span>
<span class="line">        <span class="token comment">//         const data =  yield call(api.get({</span></span>
<span class="line">        <span class="token comment">//             url:&#39;/mock/5b7fd63f719c7b7241f4e2fa/tangshi/tang-shi&#39;</span></span>
<span class="line">        <span class="token comment">//         }))</span></span>
<span class="line">        <span class="token comment">//         yield put(actionTypes.fetchPoetrySuccess({data:data.data.data}))</span></span>
<span class="line">        <span class="token comment">//     }catch(error){</span></span>
<span class="line">        <span class="token comment">//         yield put(actionTypes.fetchPoetryFauilure({errMsg:error.message}))</span></span>
<span class="line">        <span class="token comment">//     }</span></span>
<span class="line">         </span>
<span class="line">        <span class="token comment">// })</span></span>
<span class="line">        <span class="token comment">// === 写法二====</span></span>
<span class="line">      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 当dispatch({type:FETCH_POETRY_REQUEST})的时候被这里监听 执行对应的请求</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span>user<span class="token punctuation">,</span>age<span class="token punctuation">}</span> <span class="token operator">=</span>  <span class="token keyword">yield</span> <span class="token function">take</span><span class="token punctuation">(</span>actionTypes<span class="token punctuation">.</span><span class="token constant">FETCH_POETRY_REQUEST</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">{</span></span>
<span class="line">             <span class="token keyword">const</span> data <span class="token operator">=</span>  <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                 <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&#39;/mock/5b7fd63f719c7b7241f4e2fa/tangshi/tang-shi&#39;</span></span>
<span class="line">             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">              <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span>actionTypes<span class="token punctuation">.</span><span class="token function">fetchPoetrySuccess</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">             <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span>actionTypes<span class="token punctuation">.</span><span class="token function">fetchPoetryFauilure</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">errMsg</span><span class="token operator">:</span>error<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">         <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 导出所有的saga</span></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span>  <span class="token punctuation">[</span></span>
<span class="line">        <span class="token function">fork</span><span class="token punctuation">(</span>fetchPoetrySaga<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>完整代码例子 https://github.com/poetries/redux-saga-template</p></blockquote><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结"><span>七、总结</span></a></h2><blockquote><p><code>redux-saga</code>做为<code>redux</code>中间件的全部优点</p></blockquote><ul><li>统一<code>action</code>的形式，在<code>redux-saga</code>中，从<code>UI</code>中<code>dispatch</code>的<code>action</code>为原始对象</li><li>集中处理异步等存在副作用的逻辑</li><li>通过转化<code>effects</code>函数，可以方便进行单元测试</li><li>完善和严谨的流程控制，可以较为清晰的控制复杂的逻辑</li></ul><p>阅读全文</p>`,140),v=[k];function m(g,b){return a(),n("div",null,v)}const h=s(d,[["render",m],["__file","React-浅析redux saga中间件及用法.html.vue"]]),f=JSON.parse('{"path":"/React-%E6%B5%85%E6%9E%90redux%20saga%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E7%94%A8%E6%B3%95.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/react/04-%E6%B5%85%E6%9E%90redux%20saga%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E7%94%A8%E6%B3%95.html 一、redux-thunk 1.1 redux的副作...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/React-%E6%B5%85%E6%9E%90redux%20saga%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E7%94%A8%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/react/04-%E6%B5%85%E6%9E%90redux%20saga%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E7%94%A8%E6%B3%95.html 一、redux-thunk 1.1 redux的副作..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_484.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-05T17:33:19.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-05T17:33:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_484.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_485.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_486.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_487.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_488.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_489.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_490.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_2019_10_491.png\\"],\\"dateModified\\":\\"2024-06-05T17:33:19.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、redux-thunk","slug":"一、redux-thunk","link":"#一、redux-thunk","children":[{"level":3,"title":"1.1 redux的副作用处理","slug":"_1-1-redux的副作用处理","link":"#_1-1-redux的副作用处理","children":[]},{"level":3,"title":"1.2 redux-thunk源码","slug":"_1-2-redux-thunk源码","link":"#_1-2-redux-thunk源码","children":[]},{"level":3,"title":"1.3 redux-thunk的缺点","slug":"_1-3-redux-thunk的缺点","link":"#_1-3-redux-thunk的缺点","children":[]}]},{"level":2,"title":"二、redux-saga 简介","slug":"二、redux-saga-简介","link":"#二、redux-saga-简介","children":[]},{"level":2,"title":"三、redux-saga使用案例","slug":"三、redux-saga使用案例","link":"#三、redux-saga使用案例","children":[]},{"level":2,"title":"四、redux-saga使用细节","slug":"四、redux-saga使用细节","link":"#四、redux-saga使用细节","children":[{"level":3,"title":"4.1 声明式的Effect","slug":"_4-1-声明式的effect","link":"#_4-1-声明式的effect","children":[]},{"level":3,"title":"4.2 Effect提供的具体方法","slug":"_4-2-effect提供的具体方法","link":"#_4-2-effect提供的具体方法","children":[]}]},{"level":2,"title":"五、案例分析一","slug":"五、案例分析一","link":"#五、案例分析一","children":[{"level":3,"title":"5.1 LoginPanel(登陆页)","slug":"_5-1-loginpanel-登陆页","link":"#_5-1-loginpanel-登陆页","children":[]},{"level":3,"title":"5.2 LoginSuccess","slug":"_5-2-loginsuccess","link":"#_5-2-loginsuccess","children":[]}]},{"level":2,"title":"六、案例分析二","slug":"六、案例分析二","link":"#六、案例分析二","children":[{"level":3,"title":"6.1 配置saga信息","slug":"_6-1-配置saga信息","link":"#_6-1-配置saga信息","children":[]},{"level":3,"title":"6.2 配置reduce","slug":"_6-2-配置reduce","link":"#_6-2-配置reduce","children":[]},{"level":3,"title":"6.3 处理action","slug":"_6-3-处理action","link":"#_6-3-处理action","children":[]},{"level":3,"title":"6.4 处理sagas","slug":"_6-4-处理sagas","link":"#_6-4-处理sagas","children":[]}]},{"level":2,"title":"七、总结","slug":"七、总结","link":"#七、总结","children":[]}],"git":{"updatedTime":1717608799000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"React-浅析redux saga中间件及用法.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/react/04-%E6%B5%85%E6%9E%90redux%20saga%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E7%94%A8%E6%B3%95.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/react/04-%E6%B5%85%E6%9E%90redux%20saga%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%8F%8A%E7%94%A8%E6%B3%95.html</a></p>"}');export{h as comp,f as data};
