import{_ as s,c as n,o as a,a as e}from"./app-DPCMlS-8.js";const p="/images/s_poetries_work_images_20210429151813.png",t="/images/s_poetries_work_images_20210429152003.png",i="/images/s_poetries_work_images_20210429152037.png",c="/images/s_poetries_work_images_20210429152225.png",l="/images/s_poetries_work_images_20210429152248.png",o="/images/s_poetries_work_images_20210429152338.png",r="/images/s_poetries_work_images_20210429152722.png",u="/images/s_poetries_work_images_20210429152824.png",d="/images/s_poetries_work_images_20210429153418.png",k="/images/s_poetries_work_images_20210429153844.png",v="/images/s_poetries_work_images_20210429154009.png",m="/images/s_poetries_work_images_20210429154613.png",b={},g=e('<p>原文链接: <a href="https://interview.poetries.top/principle-docs/react/22-%E6%8F%AD%E7%A7%98%20Redux%20%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/react/22-%E6%8F%AD%E7%A7%98%20Redux%20%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html</a></p><h2 id="redux-背后的架构思想——认识-flux-架构" tabindex="-1"><a class="header-anchor" href="#redux-背后的架构思想——认识-flux-架构"><span>Redux 背后的架构思想——认识 Flux 架构</span></a></h2><blockquote><p>Redux 的设计在很大程度上受益于 Flux 架构，我们可以认为 Redux 是 Flux 的一种实现形式（虽然它并不严格遵循 Flux 的设定），理解 Flux 将帮助你更好地从抽象层面把握 Redux。</p></blockquote><p>Flux 并不是一个具体的框架，它是一套由 Facebook 技术团队提出的应用架构，这套架构约束的是应用处理数据的模式。在 Flux 架构中，一个应用将被拆分为以下 4 个部分。</p><ul><li>View（视图层）：用户界面。该用户界面可以是以任何形式实现出来的，React 组件是一种形式，Vue、Angular 也完全 OK。Flux 架构与 React 之间并不存在耦合关系。</li><li>Action（动作）：也可以理解为视图层发出的“消息”，它会触发应用状态的改变。</li><li>Dispatcher（派发器）：它负责对 action 进行分发。</li><li>Store（数据层）：它是存储应用状态的“仓库”，此外还会定义修改状态的逻辑。store 的变化最终会映射到 view 层上去。</li></ul><p>这 4 个部分之间的协作将通过下图所示的工作流规则来完成配合：</p><p><img src="'+p+'" alt=""></p><blockquote><p>一个典型的 Flux 工作流是这样的：<code>用户与 View 之间产生交互，通过 View 发起一个 Action；Dispatcher 会把这个 Action 派发给 Store，通知 Store 进行相应的状态更新</code>。Store 状态更新完成后，会进一步通知 View 去更新界面。</p></blockquote><p>值得注意的是，图中所有的箭头都是单向的，这也正是 Flux 架构最核心的一个特点——单向数据流。</p><h2 id="flux-架构到底解决了什么问题" tabindex="-1"><a class="header-anchor" href="#flux-架构到底解决了什么问题"><span>Flux 架构到底解决了什么问题</span></a></h2><blockquote><p>Flux 的核心特征是单向数据流，要想完全了解单向数据流的好处，我们需要先了解双向数据流带来了什么问题</p></blockquote><h3 id="mvc-模式在前端场景下的局限性" tabindex="-1"><a class="header-anchor" href="#mvc-模式在前端场景下的局限性"><span>MVC 模式在前端场景下的局限性</span></a></h3><p>双向数据流最为典型的代表就是前端场景下的 MVC 架构，该架构的示意图如下图所示</p><p><img src="'+t+'" alt=""></p><p>除了允许用户通过 View 层交互来触发流程以外，MVC 架构还有另外一种形式，即允许用户通过直接触发 Controller 逻辑来触发流程，这种模式下的架构关系如下图所示：</p><p><img src="'+i+'" alt=""></p><p><strong>在 MVC 应用中，会涉及这 3 个部分：</strong></p><ul><li><code>Model（模型）</code>，程序需要操作的数据或信息；</li><li><code>View（视图）</code>，用户界面；</li><li><code>Controller（控制器）</code>，用于连接 <code>View</code> 和 <code>Model</code>，管理 <code>Model</code> 与 <code>View</code> 之间的逻辑</li></ul><p>原则上来说，三者的关系应该像上图一样，用户操作 <code>View</code> 后，由 <code>Controller</code> 来处理逻辑（或者直接触发 <code>Controller</code> 的逻辑），经过 <code>Controller</code> 将改变应用到 <code>Model</code> 中，最终再反馈到 <code>View</code> 上。在这个过程中，数据流应该是单向的。</p><blockquote><p>事实上，在许多服务端的 MVC 应用中，数据流确实能够保持单向。但是在前端场景下，实际的 MVC 应用要复杂不少，前端应用/框架往往出于交互的需要，<code>允许 View 和 Model 直接通信</code>。此时的架构关系就会变成下图这样：</p></blockquote><p><img src="'+c+'" alt=""></p><p>这就允许了双向数据流的存在。当业务复杂度较高时，数据流会变得非常混乱，出现类似下图这种情况：</p><p><img src="'+l+'" alt=""></p><p>图中我们的示例只有一个 Controller，但考虑到一个应用中还可能存在多个 Controller，实际的情况应该比上图还要复杂得多</p><p>在如此复杂的依赖关系下，再小的项目变更也将伴随着不容小觑的风险——或许一个小小的改动，就会对整个项目造成“蝴蝶效应”般的巨大影响。如此混乱的修改来源，将会使得我们连 Bug 排查都无从下手，因为你很难区分出一个数据的变化到底是由哪个 Controller 或者哪个 View 引发的。</p><p>此时再回头看下 Flux 的架构模式，你应该多少能感受到其中的妙处。这里我们再来回顾一下 Flux 中的数据流模式，请看下图：</p><p><img src="'+o+'" alt=""></p><p><code>Flux 最核心的地方在于严格的单向数据流</code>，在单向数据流下，状态的变化是可预测的。<code>如果 store 中的数据发生了变化，那么有且仅有一个原因，那就是由 Dispatcher 派发 Action 来触发的</code>。这样一来，就从根本上避免了混乱的数据关系，使整个流程变得清晰简单</p><p>不过这并不意味着 Flux 是完美的。事实上，Flux 对数据流的约束背后是不可忽视的成本：除了开发者的学习成本会提升外，Flux 架构还意味着项目中代码量的增加。</p><p>Flux 架构往往在复杂的项目中才会体现出它的优势和必要性。如果项目中的数据关系并不复杂，其实完全轮不到 Flux 登场，这一点对于 Redux 来说也是一样的。</p><p>现在你不妨结合 Flux 架构的特性，再去品味一遍 Redux 官方给出的这个定义：</p><blockquote><p>Redux 是 JavaScript 状态容器，它提供可预测的状态管理。</p></blockquote><p>此时的你，想必更加能够体会“可预测”这三个字背后的深意。</p><h2 id="redux-关键要素与工作流回顾" tabindex="-1"><a class="header-anchor" href="#redux-关键要素与工作流回顾"><span>Redux 关键要素与工作流回顾</span></a></h2><blockquote><p>Redux 主要由 3 部分组成：<code>Store、Reducer 和 Action</code>。</p></blockquote><ul><li>Store：它是一个单一的数据源，而且是只读的。</li><li>Action 人如其名，是“动作”的意思，它是对变化的描述。</li><li>Reducer 是一个函数，它负责对变化进行分发和处理，最终将新的数据返回给 Store。</li></ul><p>Store、Action 和 Reducer 三者紧密配合，便形成了 Redux 独树一帜的工作流，如下图所示：</p><p><img src="'+r+'" alt=""></p><p>在 Redux 的整个工作过程中，数据流是严格单向的。如果你想对数据进行修改，只有一种途径：<code>派发 Action</code>。<code>Action 会被 Reducer 读取，Reducer 将根据 Action 内容的不同执行不同的计算逻辑，最终生成新的 state（状态）</code>，这个新的 state 会更新到 Store 对象里，进而驱动视图层面作出对应的改变。</p><p>对于组件来说，任何组件都可以以约定的方式从 Store 读取到全局的状态，任何组件也都可以通过合理地派发 Action 来修改全局的状态。<code>Redux 通过提供一个统一的状态容器</code>，使得数据能够自由而有序地在任意组件之间穿梭。</p><h2 id="redux-是如何工作的" tabindex="-1"><a class="header-anchor" href="#redux-是如何工作的"><span>Redux 是如何工作的</span></a></h2><p>我们先来看一下 Redux 的源码文件夹结构，如下图所示：</p><p><img src="'+u+`" alt=""></p><p>其中，utils 是工具方法库；index.js 作为入口文件，用于对功能模块进行收敛和导出。真正“干活”的是功能模块本身，也就是下面这几个文件：</p><ul><li><code>applyMiddleware.js</code> 是中间件模块，它的独立性较强</li><li><code>bindActionCreators.js</code> 用于将传入的 <code>actionCreator</code> 与 <code>dispatch</code> 方法相结合，揉成一个新的方法</li><li><code>combineReducers.js</code> 用于将多个 <code>reducer</code> 合并起来</li><li><code>compose.js</code> 用于把接收到的函数从右向左进行组合</li><li><code>createStore.js</code> <code>createStore</code> 方法是我们在使用 <code>Redux</code> 时最先调用的方法，它是整个流程的入口，也是 Redux 中最核心的 API。理解 <code>Redux</code> 实现原理，真正需要我们关注的模块其实只有一个——<code>createStore</code></li></ul><h2 id="故事的开始-createstore" tabindex="-1"><a class="header-anchor" href="#故事的开始-createstore"><span>故事的开始：createStore</span></a></h2><p>使用 Redux 的第一步，我们就需要调用 <code>createStore</code> 方法。单纯从使用感上来说，这个方法做的事情似乎就是创建一个 store 对象出来，像这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 引入 redux</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;redux&#39;</span></span>
<span class="line">    <span class="token comment">// 创建 store</span></span>
<span class="line">    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span></span>
<span class="line">        reducer<span class="token punctuation">,</span></span>
<span class="line">        initial_state<span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>middleware1<span class="token punctuation">,</span> middleware2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>createStore</code> 方法可以接收以下 3 个入参：</p></blockquote><ul><li><code>reducer</code></li><li>初始状态内容</li><li>指定中间件</li></ul><p>从拿到入参到返回出 store 的过程中，到底都发生了什么呢？这里我为你提取了 <code>createStore</code>中主体逻辑的源码（解析在注释里）</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> preloadedState<span class="token punctuation">,</span> enhancer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 这里处理的是没有设定初始状态的情况，也就是第一个参数和第二个参数都传 function 的情况</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> preloadedState <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> enhancer <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 此时第二个参数会被认为是 enhancer（中间件）</span></span>
<span class="line">            enhancer <span class="token operator">=</span> preloadedState<span class="token punctuation">;</span></span>
<span class="line">            preloadedState <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 当 enhancer 不为空时，便会将原来的 createStore 作为参数传入到 enhancer 中</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> enhancer <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">enhancer</span><span class="token punctuation">(</span>createStore<span class="token punctuation">)</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> preloadedState<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 记录当前的 reducer，因为 replaceReducer 会修改 reducer 的内容</span></span>
<span class="line">        <span class="token keyword">let</span> currentReducer <span class="token operator">=</span> reducer<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 记录当前的 state</span></span>
<span class="line">        <span class="token keyword">let</span> currentState <span class="token operator">=</span> preloadedState<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 声明 listeners 数组，这个数组用于记录在 subscribe 中订阅的事件</span></span>
<span class="line">        <span class="token keyword">let</span> currentListeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// nextListeners 是 currentListeners 的快照</span></span>
<span class="line">        <span class="token keyword">let</span> nextListeners <span class="token operator">=</span> currentListeners<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 该变量用于记录当前是否正在进行 dispatch</span></span>
<span class="line">        <span class="token keyword">let</span> isDispatching <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 该方法用于确认快照是 currentListeners 的副本，而不是 currentListeners 本身</span></span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextListeners <span class="token operator">===</span> currentListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                nextListeners <span class="token operator">=</span> currentListeners<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 我们通过调用 getState 来获取当前的状态</span></span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> currentState<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// subscribe 订阅方法，它将会定义 dispatch 最后执行的 listeners 数组的内容</span></span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 校验 listener 的类型</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> listener <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Expected the listener to be a function.&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 禁止在 reducer 中调用 subscribe</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>isDispatching<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&#39;You may not call store.subscribe() while the reducer is executing. &#39;</span> <span class="token operator">+</span></span>
<span class="line">                  <span class="token string">&#39;If you would like to be notified after the store has been updated, subscribe from a &#39;</span> <span class="token operator">+</span></span>
<span class="line">                  <span class="token string">&#39;component and invoke store.getState() in the callback to access the latest state. &#39;</span> <span class="token operator">+</span></span>
<span class="line">                  <span class="token string">&#39;See https://redux.js.org/api-reference/store#subscribe(listener) for more details.&#39;</span></span>
<span class="line">              <span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 该变量用于防止调用多次 unsubscribe 函数</span></span>
<span class="line">            <span class="token keyword">let</span> isSubscribed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 确保 nextListeners 与 currentListeners 不指向同一个引用</span></span>
<span class="line">            <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">            <span class="token comment">// 注册监听函数</span></span>
<span class="line">            nextListeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    </span>
<span class="line">            <span class="token comment">// 返回取消订阅当前 listener 的方法</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSubscribed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                isSubscribed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">const</span> index <span class="token operator">=</span> nextListeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 将当前的 listener 从 nextListeners 数组中删除 </span></span>
<span class="line">                nextListeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 定义 dispatch 方法，用于派发 action </span></span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 校验 action 的数据格式是否合法</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&#39;Actions must be plain objects. &#39;</span> <span class="token operator">+</span></span>
<span class="line">                  <span class="token string">&#39;Use custom middleware for async actions.&#39;</span></span>
<span class="line">              <span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">            <span class="token comment">// 约束 action 中必须有 type 属性作为 action 的唯一标识 </span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token string">&#39;Actions may not have an undefined &quot;type&quot; property. &#39;</span> <span class="token operator">+</span></span>
<span class="line">                  <span class="token string">&#39;Have you misspelled a constant?&#39;</span></span>
<span class="line">              <span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">            <span class="token comment">// 若当前已经位于 dispatch 的流程中，则不允许再度发起 dispatch（禁止套娃）</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>isDispatching<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Reducers may not dispatch actions.&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token comment">// 执行 reducer 前，先&quot;上锁&quot;，标记当前已经存在 dispatch 执行流程</span></span>
<span class="line">              isDispatching <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">              <span class="token comment">// 调用 reducer，计算新的 state </span></span>
<span class="line">              currentState <span class="token operator">=</span> <span class="token function">currentReducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token comment">// 执行结束后，把&quot;锁&quot;打开，允许再次进行 dispatch </span></span>
<span class="line">              isDispatching <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">            <span class="token comment">// 触发订阅</span></span>
<span class="line">            <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token punctuation">(</span>currentListeners <span class="token operator">=</span> nextListeners<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> listener <span class="token operator">=</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> action<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// replaceReducer 可以更改当前的 reducer</span></span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">replaceReducer</span><span class="token punctuation">(</span><span class="token parameter">nextReducer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            currentReducer <span class="token operator">=</span> nextReducer<span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> ActionTypes<span class="token punctuation">.</span><span class="token constant">REPLACE</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> store<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 初始化 state，当派发一个 type 为 ActionTypes.INIT 的 action，每个 reducer 都会返回</span></span>
<span class="line">        <span class="token comment">// 它的初始值</span></span>
<span class="line">        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> ActionTypes<span class="token punctuation">.</span><span class="token constant">INIT</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// observable 方法可以忽略，它在 redux 内部使用，开发者一般不会直接接触</span></span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">observable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// observable 方法的实现</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">        <span class="token comment">// 将定义的方法包裹在 store 对象里返回</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">          dispatch<span class="token punctuation">,</span></span>
<span class="line">          subscribe<span class="token punctuation">,</span></span>
<span class="line">          getState<span class="token punctuation">,</span></span>
<span class="line">          replaceReducer<span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">[</span>$$observable<span class="token punctuation">]</span><span class="token operator">:</span> observable</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过阅读源码会发现，<code>createStore</code> 从外面看只是一个简单的创建动作，但在内部却别有洞天，涵盖了所有 Redux 主流程中核心方法的定义</p><p>接下来我将 createStore 内部逻辑总结进一张大图中，这张图涵盖了每个核心方法的工作内容，它将帮助你快速把握 createStore 的逻辑框架。</p><p><img src="`+d+`" alt=""></p><p>在 <code>createStore</code> 导出的方法中，与 <code>Redux</code> 主流程强相关的，同时也是我们平时使用中最常打交道的几个方法，分别是</p><ul><li><code>getState</code></li><li><code>subscribe</code></li><li><code>dispatch</code></li></ul><h2 id="redux-工作流的核心-dispatch-动作" tabindex="-1"><a class="header-anchor" href="#redux-工作流的核心-dispatch-动作"><span>Redux 工作流的核心：dispatch 动作</span></a></h2><p>dispatch 应该是大家在使用 Redux 的过程中最为熟悉的 API 了。结合前面对设计思想的解读，我们已经知道，在 Redux 中有这样 3 个关键要素：</p><ul><li><code>action</code></li><li><code>reducer</code></li><li><code>store</code></li></ul><p>之所以说 <code>dispatch</code> 是 <code>Redux</code> 工作流的核心，是因为<code>dispatch</code> 这个动作刚好能把 <code>action、reducer</code>和 <code>store</code> 这三位“主角”给串联起来。dispatch 的内部逻辑，足以反映了这三者之间“打配合”的过程。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 校验 action 的数据格式是否合法</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token string">&#39;Actions must be plain objects. &#39;</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token string">&#39;Use custom middleware for async actions.&#39;</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 约束 action 中必须有 type 属性作为 action 的唯一标识 </span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token string">&#39;Actions may not have an undefined &quot;type&quot; property. &#39;</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token string">&#39;Have you misspelled a constant?&#39;</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 若当前已经位于 dispatch 的流程中，则不允许再度发起 dispatch（禁止套娃）</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>isDispatching<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Reducers may not dispatch actions.&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 执行 reducer 前，先&quot;上锁&quot;，标记当前已经存在 dispatch 执行流程</span></span>
<span class="line">        isDispatching <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token comment">// 调用 reducer，计算新的 state</span></span>
<span class="line">        currentState <span class="token operator">=</span> <span class="token function">currentReducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 执行结束后，把&quot;锁&quot;打开，允许再次进行 dispatch</span></span>
<span class="line">        isDispatching <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 触发订阅</span></span>
<span class="line">      <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token punctuation">(</span>currentListeners <span class="token operator">=</span> nextListeners<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> listener <span class="token operator">=</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">return</span> action<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我结合源码，帮大家将 dispatch 的工作流程提取如下：</p><p><img src="`+k+`" alt=""></p><p><strong>1. 通过“上锁”避免“套娃式”的 dispatch</strong></p><p><code>dispatch</code> 工作流中最关键的就是执行 <code>reducer</code> 这一步，它对应的是下面这段代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 执行 reducer 前，先“上锁”，标记当前已经存在 dispatch 执行流程</span></span>
<span class="line">      isDispatching <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token comment">// 调用 reducer，计算新的 state </span></span>
<span class="line">      currentState <span class="token operator">=</span> <span class="token function">currentReducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 执行结束后，把&quot;锁&quot;打开，允许再次进行 dispatch </span></span>
<span class="line">      isDispatching <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt=""></p><blockquote><p>在调用 reducer 之前，Redux 首先会将 isDispatching 变量置为 true，待 reducer 执行完毕后，再将 isDispatching 变量置为 false</p></blockquote><p>这里之所以要用 <code>isDispatching 将 dispatch 的过程锁起来</code>，目的是规避“套娃式”的 dispatch。更准确地说，是<code>为了避免开发者在 reducer 中手动调用 dispatch</code>。</p><p>若真的在 reducer 中调用 dispatch，那么 dispatch 又会反过来调用 reducer，reducer 又会再次调用 dispatch......这样反复相互调用下去，就会进入死循环，属于非常严重的误操作。</p><p>因此，在 dispatch 的前置校验逻辑中，一旦识别出 isDispatching 为 true，就会直接 throw Error（见下面代码），把死循环扼杀在摇篮里：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>isDispatching<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Reducers may not dispatch actions.&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 触发订阅的过程</strong></p><p>在 reducer 执行完毕后，会进入触发订阅的过程，它对应的是下面这段代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 触发订阅</span></span>
<span class="line">    <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token punctuation">(</span>currentListeners <span class="token operator">=</span> nextListeners<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> listener <span class="token operator">=</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redux-中的-发布-订阅-模式-认识-subscribe" tabindex="-1"><a class="header-anchor" href="#redux-中的-发布-订阅-模式-认识-subscribe"><span>Redux 中的“发布-订阅”模式：认识 subscribe</span></a></h2><blockquote><p>dispatch 中执行的 listeners 数组从订阅中来，而执行订阅需要调用 <code>subscribe</code>。在实际的开发中，<code>subscribe</code> 并不是一个严格必要的方法，只有在需要监听状态的变化时，我们才会调用 <code>subscribe</code></p></blockquote><p>subscribe 接收一个 Function 类型的 listener 作为入参，它的返回内容恰恰就是这个 listener 对应的解绑函数。你可以通过下面这段示例代码简单把握一下 subscribe 的使用姿势：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 函数逻辑</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>handleChange<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>subscribe 在订阅时只需要传入监听函数，而不需要传入事件类型。这是因为 Redux 中已经默认了订阅的对象就是“状态的变化（准确地说是 dispatch 函数的调用）”这个事件。</p><blockquote><p>subscribe 是如何与 Redux 主流程结合的呢？首先，我们可以在 store 对象创建成功后，<code>通过调用 store.subscribe 来注册监听函数，也可以通过调用 subscribe 的返回函数来解绑监听函数</code>，监听函数是用 listeners 数组来维护的；<code>当dispatch action 发生时，Redux 会在 reducer 执行完毕后，将 listeners 数组中的监听函数逐个执行</code>。这就是 subscribe 与 Redux 主流程之间的关系。</p></blockquote><p>接下来我们结合源码来分析一下 subscribe 的内部逻辑，subscribe 源码提取如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 校验 listener 的类型</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> listener <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Expected the listener to be a function.&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 禁止在 reducer 中调用 subscribe</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>isDispatching<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">          <span class="token string">&#39;You may not call store.subscribe() while the reducer is executing. &#39;</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token string">&#39;If you would like to be notified after the store has been updated, subscribe from a &#39;</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token string">&#39;component and invoke store.getState() in the callback to access the latest state. &#39;</span> <span class="token operator">+</span></span>
<span class="line">          <span class="token string">&#39;See https://redux.js.org/api-reference/store#subscribe(listener) for more details.&#39;</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 该变量用于防止调用多次 unsubscribe 函数</span></span>
<span class="line">      <span class="token keyword">let</span> isSubscribed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 确保 nextListeners 与 currentListeners 不指向同一个引用</span></span>
<span class="line">      <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">      <span class="token comment">// 注册监听函数</span></span>
<span class="line">      nextListeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">      <span class="token comment">// 返回取消订阅当前 listener 的方法</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSubscribed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        isSubscribed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> index <span class="token operator">=</span> nextListeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 将当前的 listener 从 nextListeners 数组中删除 </span></span>
<span class="line">        nextListeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合这段源码，我们可以将 subscribe 的工作流程提取如下：</p><p><img src="`+m+`" alt=""></p><h3 id="_1-订阅过程中的-listeners-数组" tabindex="-1"><a class="header-anchor" href="#_1-订阅过程中的-listeners-数组"><span>1. 订阅过程中的 listeners 数组</span></a></h3><p>两个 <code>listeners</code> 之间的第一次“交锋”发生在 <code>createStore</code> 的变量初始化阶段，<code>nextListeners</code> 会被赋值为 <code>currentListeners</code>（见下面代码），这之后两者确实指向同一个引用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">     <span class="token keyword">let</span> nextListeners <span class="token operator">=</span> currentListeners</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但在 subscribe 第一次被调用时，<code>ensureCanMutateNextListeners</code> 就会发现这一点，然后将 <code>nextListeners</code> 纠正为一个内容与 currentListeners 一致、但引用不同的新对象。对应的逻辑如下面代码所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">function</span> <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 若两个数组指向同一个引用</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>nextListeners <span class="token operator">===</span> currentListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 则将 nextListeners 纠正为一个内容与 currentListeners 一致、但引用不同的新对象</span></span>
<span class="line">        nextListeners <span class="token operator">=</span> currentListeners<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 subscribe 的逻辑中，ensureCanMutateNextListeners 每次都会在 listener 注册前被无条件调用，用以确保两个数组引用不同。紧跟在 ensureCanMutateNextListeners 之后执行的是 listener 的注册逻辑，我们可以对应源码中看到 listener 最终会被注册到 nextListeners 数组中去：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    nextListeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-发布过程中的-listeners-数组" tabindex="-1"><a class="header-anchor" href="#_2-发布过程中的-listeners-数组"><span>2. 发布过程中的 listeners 数组</span></a></h3><p>触发订阅这个动作是由 dispatch 来做的，相关的源码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 触发订阅</span></span>
<span class="line">    <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token punctuation">(</span>currentListeners <span class="token operator">=</span> nextListeners<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> listener <span class="token operator">=</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段源码告诉我们，在触发订阅的过程中，currentListeners 会被赋值为 nextListeners，而实际被执行的 listeners 数组又会被赋值为 currentListeners。因此，最终被执行的 listeners 数组，实际上和当前的 nextListeners 指向同一个引用。</p><p>这就有点奇妙了：注册监听也是操作 nextListeners，触发订阅也是读取 nextListeners（实际上，细心的同学会注意到，取消监听操作的也是 nextListeners 数组）。既然如此，要 currentListeners 有何用？</p><h3 id="_3-currentlisteners-数组用于确保监听函数执行过程的稳定性" tabindex="-1"><a class="header-anchor" href="#_3-currentlisteners-数组用于确保监听函数执行过程的稳定性"><span>3. currentListeners 数组用于确保监听函数执行过程的稳定性</span></a></h3><p>正因为任何变更都是在 nextListeners 上发生的，我们才需要一个不会被变更的、内容稳定的 currentListeners ，来确保监听函数在执行过程中不会出幺蛾子。</p><p>举个例子，下面这种操作在 Redux 中完全是合法的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 定义监听函数 A</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">listenerA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 订阅 A，并获取 A 的解绑函数</span></span>
<span class="line">    <span class="token keyword">const</span> unSubscribeA <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>listenerA<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 定义监听函数 B</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">listenerB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 在 B 中解绑 A</span></span>
<span class="line">      <span class="token function">unSubscribeA</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 定义监听函数 C</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">listenerC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 订阅 B</span></span>
<span class="line">    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>listenerB<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 订阅 C</span></span>
<span class="line">    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>listenerC<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个 Demo 执行完毕后，nextListeners 数组的内容是 A、B、C 3 个 listener：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token punctuation">[</span>listenerA<span class="token punctuation">,</span>  listenerB<span class="token punctuation">,</span> listenerC<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接下来若调用 dispatch，则会执行下面这段触发订阅的逻辑：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 触发订阅</span></span>
<span class="line">    <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token punctuation">(</span>currentListeners <span class="token operator">=</span> nextListeners<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listeners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> listener <span class="token operator">=</span> listeners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 for 循环执行到索引 i = 1 处，也就是对应的 listener 为 listenerB 时，问题就会出现：listenerB 中执行了 unSubscribeA 这个动作。而结合我们前面的分析，监听函数注册、解绑、触发这些动作实际影响的都是 nextListeners。为了强化对这一点的认知，我们来复习一下 unsubscribe 的源码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 避免多次解绑</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSubscribed<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      isSubscribed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 熟悉的操作，调用 ensureCanMutateNextListeners 方法</span></span>
<span class="line">      <span class="token function">ensureCanMutateNextListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 获取 listener 在 nextListeners 中的索引</span></span>
<span class="line">      <span class="token keyword">const</span> index <span class="token operator">=</span> nextListeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 将当前的 listener 从 nextListeners 数组中删除 </span></span>
<span class="line">      nextListeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如说不存在 currentListeners，那么也就意味着不需要 ensureCanMutateNextListeners 这个动作。若没有 ensureCanMutateNextListeners，unsubscribeA() 执行完之后，listenerA 会同时从 listeners 数组和 nextListeners 数组中消失（因为两者指向的是同一个引用），那么 listeners 数组此时只剩下两个元素 listenerB 和 listenerC，变成这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token punctuation">[</span>listenerB<span class="token punctuation">,</span> listenerC<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>listeners 数组的长度改变了，但 for 循环却不会感知这一点，它将无情地继续循环下去。之前执行到 i = 1 处，listener = listeners[1] ，也就是说 listener === listenerB；下一步理应执行到 i = 2 处，但此时 listeners[2] 已经是 undefined 了，原本应该出现在这个索引位上的 listenerC，此时因为数组长度的变化，被前置到了 i = 1 处！这样一来，undefined 就会代替 listenerC 被执行，进而引发函数异常。</p><p>这可怎么办呢？答案当然是将 nextListeners 与当前正在执行中的 listeners 剥离开来，将两者指向不同的引用。这也正是 ensureCanMutateNextListeners 所做的事情。</p><p>在示例的这种场景下，ensureCanMutateNextListeners 执行前，listeners、currentListeners 和 nextListeners 之间的关系是这样的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    listeners <span class="token operator">===</span> currentListeners <span class="token operator">===</span> nextListeners</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而 ensureCanMutateNextListeners 执行后，nextListeners 就会被剥离出去：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    nextListeners <span class="token operator">=</span> currentListeners<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    listeners <span class="token operator">===</span> currentListeners <span class="token operator">!==</span> nextListeners</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，nextListeners 上的任何改变，都无法再影响正在执行中的 listeners 了。currentListeners 在此处的作用，就是为了记录下当前正在工作中的 listeners 数组的引用，将它与可能发生改变的 nextListeners 区分开来，以确保监听函数在执行过程中的稳定性。</p><p>阅读全文</p>`,118),h=[g];function x(w,y){return a(),n("div",null,h)}const _=s(b,[["render",x],["__file","React-22-揭秘-Redux-设计思想与工作原理.html.vue"]]),E=JSON.parse('{"path":"/React-22-%E6%8F%AD%E7%A7%98-Redux-%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/react/22-%E6%8F%AD%E7%A7%98%20Redux%20%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html ...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/React-22-%E6%8F%AD%E7%A7%98-Redux-%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/react/22-%E6%8F%AD%E7%A7%98%20Redux%20%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_images_20210429151813.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429151813.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429152003.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429152037.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429152225.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429152248.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429152338.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429152722.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429152824.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429153418.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429153844.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429154009.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210429154613.png\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Redux 背后的架构思想——认识 Flux 架构","slug":"redux-背后的架构思想——认识-flux-架构","link":"#redux-背后的架构思想——认识-flux-架构","children":[]},{"level":2,"title":"Flux 架构到底解决了什么问题","slug":"flux-架构到底解决了什么问题","link":"#flux-架构到底解决了什么问题","children":[{"level":3,"title":"MVC 模式在前端场景下的局限性","slug":"mvc-模式在前端场景下的局限性","link":"#mvc-模式在前端场景下的局限性","children":[]}]},{"level":2,"title":"Redux 关键要素与工作流回顾","slug":"redux-关键要素与工作流回顾","link":"#redux-关键要素与工作流回顾","children":[]},{"level":2,"title":"Redux 是如何工作的","slug":"redux-是如何工作的","link":"#redux-是如何工作的","children":[]},{"level":2,"title":"故事的开始：createStore","slug":"故事的开始-createstore","link":"#故事的开始-createstore","children":[]},{"level":2,"title":"Redux 工作流的核心：dispatch 动作","slug":"redux-工作流的核心-dispatch-动作","link":"#redux-工作流的核心-dispatch-动作","children":[]},{"level":2,"title":"Redux 中的“发布-订阅”模式：认识 subscribe","slug":"redux-中的-发布-订阅-模式-认识-subscribe","link":"#redux-中的-发布-订阅-模式-认识-subscribe","children":[{"level":3,"title":"1. 订阅过程中的 listeners 数组","slug":"_1-订阅过程中的-listeners-数组","link":"#_1-订阅过程中的-listeners-数组","children":[]},{"level":3,"title":"2. 发布过程中的 listeners 数组","slug":"_2-发布过程中的-listeners-数组","link":"#_2-发布过程中的-listeners-数组","children":[]},{"level":3,"title":"3. currentListeners 数组用于确保监听函数执行过程的稳定性","slug":"_3-currentlisteners-数组用于确保监听函数执行过程的稳定性","link":"#_3-currentlisteners-数组用于确保监听函数执行过程的稳定性","children":[]}]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"React-22-揭秘-Redux-设计思想与工作原理.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/react/22-%E6%8F%AD%E7%A7%98%20Redux%20%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/react/22-%E6%8F%AD%E7%A7%98%20Redux%20%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.html</a></p>"}');export{_ as comp,E as data};
