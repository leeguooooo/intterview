import{_ as n,c as s,o as a,a as e}from"./app-DVMZDNEl.js";const p="/images/s_poetries_work_uploads_2024_02_117dd7e71ca1d898.png",t="/images/s_poetries_work_uploads_2024_02_8e83afb3ac1f0a1b.png",o={},c=e(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/vue/02-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/vue/02-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8.html</a></p><blockquote><p>当我们使用 <code>Vue</code> 或 <code>React</code> 时，往往会将页面拆分为各种组件，通过拼装组件来形成页面和应用，就像搭积木一样。</p></blockquote><p>那么，大家有没有思考过：<strong>&quot;组件的产出是什么？&quot;</strong></p><h2 id="组件的产出是什么" tabindex="-1"><a class="header-anchor" href="#组件的产出是什么"><span>组件的产出是什么</span></a></h2><p>在 <code>JQuery</code> 盛行的年代，比起组件，“模板引擎”的概念要更加流行。</p><p>我们可以使用 <code>lodash.template</code> 函数来回忆一下当年是如何用模板开发一个页面的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> template <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">compiler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;My Component&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板引擎的概念是：<code>字符串 + 数据 =&gt; html</code>。</p><p><code>lodash.template</code> 函数虽然称不上是“引擎”，但足以说明问题。</p><p>我们将模板字符串传递给 <code>template</code> 函数，该函数返回一个编译器 <code>compiler</code>，只要把数据传入 <code>compiler</code> 函数，便能得到最终想要渲染的内容。</p><p>当数据发生变化时，我们需要使用新的数据重新编译模板：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> newHtml <span class="token operator">=</span> <span class="token function">compiler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;New Component&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果把上面的逻辑封装成一个函数，那么一个组件就诞生了：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> compiler <span class="token operator">=</span> MyComponent<span class="token punctuation">.</span>cache <span class="token operator">||</span> <span class="token punctuation">(</span>MyComponent<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">compiler</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    MyComponent<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以这样使用它：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;MyComponent&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>TIP</p><p>完整代码&amp;在线体验地址：<a href="https://codesandbox.io/s/m7nqlj8m9j" target="_blank" rel="noopener noreferrer">https://codesandbox.io/s/m7nqlj8m9j</a><a href="https://codesandbox.io/s/m7nqlj8m9j" target="_blank" rel="noopener noreferrer"> (opens new window)</a></p><p><code>MyComponent</code> 组件也许会带给你这样的感觉：<strong>一个组件就是一个函数，给我什么样的数据，我就渲染对应的 html 内容</strong> 。</p><p>这个概念，与我们如今谈论的 <code>Vue</code> 或 <code>React</code> 并没有什么不同。所以，这 就是 <strong>组件的本质</strong> 。</p><p>组件的本质虽然没变，但组件的产出却改变了。在模板引擎的年代，组件的产出是 <code>html</code> 字符串：</p><p><img src="`+p+'" alt=""></p><p>而如今的 <code>Vue</code> 或 <code>React</code>，它们的组件所产出的内容并不是 <code>html</code> 字符串，而是大家所熟知的 <code>Virtual DOM</code>。</p><p><img src="'+t+`" alt=""></p><p>拿 <code>Vue</code> 来说，一个组件最核心的东西是 <code>render</code> 函数，剩余的其他内容，如 <code>data</code>、<code>compouted</code>、<code>props</code> 等都是为 <code>render</code> 函数提供数据来源服务的。<code>render</code> 函数本可以直接产出 <code>html</code> 字符串，但却产出了 <code>Virtual DOM</code>，借助 <code>snabbdom</code> 的 API 我们可以很容易地用代码描述这个公式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;snabbdom&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// h 函数用来创建 VNode，组件的产出是 VNode</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Virtual DOM</code> 终究要渲染真实 DOM，这个过程就可以理解为模板引擎年代的完全替换 <code>html</code>，只不过它采用的不是完全替换，我们通常把这个过程叫做 <code>patch</code>，同样可以借助 <code>snabbdom</code> 的 API 轻松地实现：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> h<span class="token punctuation">,</span> init <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;snabbdom&#39;</span></span>
<span class="line">    <span class="token comment">// init 方法用来创建 patch 函数</span></span>
<span class="line">    <span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">MyComponent</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 组件的产出是 VNode</span></span>
<span class="line">    <span class="token keyword">const</span> prevVnode <span class="token operator">=</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;prev&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 将 VNode 渲染成真实 DOM</span></span>
<span class="line">    <span class="token function">patch</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prevVnode<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当数据变更时，组件会产出新的 <code>VNode</code>，我们只需再次调用 <code>patch</code> 函数即可：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">// 数据变更，产出新的 VNode</span></span>
<span class="line">    <span class="token keyword">const</span> nextVnode <span class="token operator">=</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;next&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 通过对比新旧 VNode，高效地渲染真实 DOM</span></span>
<span class="line">    <span class="token function">patch</span><span class="token punctuation">(</span>prevVnode<span class="token punctuation">,</span> nextVnode<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TIP</p><p>完整代码&amp;在线体验地址：<a href="https://codesandbox.io/s/mq0q8r50w8" target="_blank" rel="noopener noreferrer">https://codesandbox.io/s/mq0q8r50w8</a><a href="https://codesandbox.io/s/mq0q8r50w8" target="_blank" rel="noopener noreferrer"> (opens new window)</a></p><p>以上就是我们要达成的共识：<strong>组件的产出就是 Virtual DOM</strong> 。</p><p>为何组件要从直接产出 <code>html</code> 变成产出 <code>Virtual DOM</code> 呢？其原因是 <code>Virtual DOM</code> 带来了 <strong>分层设计</strong> ，它对渲染过程的抽象，使得框架可以渲染到 <code>web</code>(浏览器) 以外的平台，以及能够实现 <code>SSR</code> 等。</p><p>至于 <code>Virtual DOM</code> 相比原生 DOM 操作的性能，这并非 <code>Virtual DOM</code> 的目标，确切地说，如果要比较二者的性能是要“控制变量”的，例如：页面的大小、数据变化量等。</p><h2 id="组件的-vnode-如何表示" tabindex="-1"><a class="header-anchor" href="#组件的-vnode-如何表示"><span>组件的 VNode 如何表示</span></a></h2><p>TIP</p><p>在后续行文时，将统一使用 <code>VNode</code> 来简称 <code>Virtual DOM</code> 。</p><p><code>VNode</code> 是真实 DOM 的描述，比如我们可以用如下对象描述一个 <code>div</code> 标签：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> elementVnode <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要把 <code>elementVnode</code> 渲染成真实 DOM，我们还需要一个渲染器(<code>Renderer</code>)：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>渲染器接收两个参数，分别是将要渲染的 <code>vnode</code> 和 元素挂载点(真实 DOM 被渲染的位置)。</p><p>为了渲染如上的 <code>div</code> 标签，我们可以这样调用 <code>render</code> 函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token comment">// 把 elementVnode 渲染到 id 为 app 的元素下</span></span>
<span class="line">    <span class="token function">render</span><span class="token punctuation">(</span>elementVnode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>render</code> 函数的实现也很简单：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">mountElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">mountElement</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 创建元素</span></span>
<span class="line">      <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 将元素添加到容器</span></span>
<span class="line">      container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，在 <code>render</code> 函数内调用了 <code>mountElement</code>，它的作用是根据 <code>VNode</code> 创建真实 DOM 并将其添加到容器中。</p><p>这段代码对于标准 <code>html</code> 标签是可以正常工作的(不考虑 SVG)，但并不适用于组件。为了能够渲染组件，我们需要思考：<strong>组件的<code>VNode</code> 应该如何表示？</strong></p><p>对于 <code>html</code> 标签的 <code>VNode</code> 来说，其 <code>tag</code> 属性的值就是标签的名字，但如果是组件的话，其 <code>VNode</code> 中 <code>tag</code> 属性的值应该是什么呢？</p><p>很简单，我们可以将其指向组件自身。假设我们有如下组件：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// render 函数产出 VNode</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，我们使用 <code>class</code> 定义了一个类，它是一个组件(有状态组件)，我们可以使用如下 <code>VNode</code> 来描述它：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">const</span> componentVnode <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">tag</span><span class="token operator">:</span> MyComponent</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，直接将 <code>tag</code> 属性的值指向组件自身。但想要正确地渲染该组件，我们还需要修改 <code>render</code>：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> vnode<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// html 标签</span></span>
<span class="line">        <span class="token function">mountElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 组件</span></span>
<span class="line">        <span class="token function">mountComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，通过 <strong>判断<code>vnode.tag</code> 是否是字符串</strong> 来区分：一个 <code>VNode</code> 到底是 <code>html</code> 标签还是组件。如果是组件的话，调用 <code>mountComponent</code> 函数挂载组件，而非 <code>mountElement</code>，如下是 <code>mountComponent</code> 函数的实现：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 创建组件实例</span></span>
<span class="line">      <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vnode<span class="token punctuation">.</span>tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 渲染</span></span>
<span class="line">      instance<span class="token punctuation">.</span>$vnode <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 挂载</span></span>
<span class="line">      <span class="token function">mountElement</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>$vnode<span class="token punctuation">,</span> container<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>道理很简单，由于 <code>vnode.tag</code> 指向组件类，所以我们创建一个组件实例，接着调用其 <code>render</code> 函数产出 <code>VNode</code> 并将其添加到实例属性 <code>instance.$vnode</code>，最后借用 <code>mountElement</code> 函数完成标签的挂载即可。</p><p>实际上为了便于理解，本节代码的简化程度很大，更加详细严谨的代码会在后续的具体章节中体现。不过这足以说明问题：<strong>可以让<code>VNode</code> 的 <code>tag</code> 属性指向组件本身，从而使用 <code>VNode</code> 来描述组件</strong>。</p><p>TIP</p><p>完整代码&amp;在线体验地址：<a href="https://codesandbox.io/s/8817m3zz5j" target="_blank" rel="noopener noreferrer">https://codesandbox.io/s/8817m3zz5j</a><a href="https://codesandbox.io/s/8817m3zz5j" target="_blank" rel="noopener noreferrer"> (opens new window)</a></p><h2 id="组件的种类" tabindex="-1"><a class="header-anchor" href="#组件的种类"><span>组件的种类</span></a></h2><p>大家可能会注意到，在上文中，采用了两种不同的方式来描述组件。</p><p>第一种方式是使用一个普通的函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第二种方式是使用一个类：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>实际上它们分别代表两类组件：<strong>函数式组件(Functional component)</strong> 和 <strong>有状态组件(Stateful component)</strong> 。</p><p>它们的区别如下：</p><ul><li><p>函数式组件：</p><ul><li>是一个纯函数</li><li>没有自身状态，只接收外部数据</li><li>产出 <code>VNode</code> 的方式：单纯的函数调用</li></ul></li><li><p>有状态组件：</p><ul><li>是一个类，可实例化</li><li>可以有自身状态</li><li>产出 <code>VNode</code> 的方式：需要实例化，然后调用其 <code>render</code> 函数</li></ul></li></ul><p>在后续渲染器的相关章节中，会再次讲述 <strong>有状态组件</strong> 与 <strong>函数式组件</strong> 的原理和异同，那时你的理解会更加深刻。</p><p>阅读全文</p>`,73),l=[c];function i(d,r){return a(),s("div",null,l)}const k=n(o,[["render",i],["__file","Vue-组件的本质.html.vue"]]),m=JSON.parse('{"path":"/Vue-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/vue/02-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8.html 当我们使用 Vue 或 React 时，往往会将页面拆分为各种组件，通过拼装组件来形成页面和应用，就像搭积木一样。 那么，大家有没有思...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/Vue-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/vue/02-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8.html 当我们使用 Vue 或 React 时，往往会将页面拆分为各种组件，通过拼装组件来形成页面和应用，就像搭积木一样。 那么，大家有没有思..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_uploads_2024_02_117dd7e71ca1d898.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-05T18:28:42.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-05T18:28:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_uploads_2024_02_117dd7e71ca1d898.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_uploads_2024_02_8e83afb3ac1f0a1b.png\\"],\\"dateModified\\":\\"2024-06-05T18:28:42.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"组件的产出是什么","slug":"组件的产出是什么","link":"#组件的产出是什么","children":[]},{"level":2,"title":"组件的 VNode 如何表示","slug":"组件的-vnode-如何表示","link":"#组件的-vnode-如何表示","children":[]},{"level":2,"title":"组件的种类","slug":"组件的种类","link":"#组件的种类","children":[]}],"git":{"updatedTime":1717612122000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":2}]},"autoDesc":true,"filePathRelative":"Vue-组件的本质.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/vue/02-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/vue/02-%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9C%AC%E8%B4%A8.html</a></p>\\n<blockquote>\\n<p>当我们使用 <code>Vue</code> 或 <code>React</code> 时，往往会将页面拆分为各种组件，通过拼装组件来形成页面和应用，就像搭积木一样。</p>\\n</blockquote>"}');export{k as comp,m as data};
