import{_ as n,c as s,o as a,a as e}from"./app-DjymQ69Z.js";const t="/images/s_poetries_work_gitee_20191001_8.png",o="/images/s_poetries_work_gitee_20191001_9.png",p="/images/s_poetries_work_gitee_20191001_10.png",c={},l=e('<p>原文链接: <a href="https://interview.poetries.top/principle-docs/react/03-MobX%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/react/03-MobX%E6%80%BB%E7%BB%93.html</a></p><h2 id="一、认识mobx" tabindex="-1"><a class="header-anchor" href="#一、认识mobx"><span>一、认识MobX</span></a></h2><blockquote><p>打印<code>mobx</code>，看看<code>mobx</code>中有什么</p></blockquote><p><img src="'+t+'" alt="mobx"></p><blockquote><p><code>MobX</code>的整个流程</p></blockquote><p><img src="'+o+'" alt="mobx"></p><p><strong>MobX 和 Redux 的比较</strong></p><ul><li><code>Redux</code> 是单一数据源，而 <code>MobX</code> 往往是多个 <code>store</code>。<code>MobX</code> 可以根据应用的 <code>UI</code>、数据或业务逻辑来组织 <code>store</code>，具体如何进行需要你自己进行权衡</li><li><code>Redux store</code> 使用普通的 <code>JavaScript</code> 对象结构，<code>MobX</code> 将常规 <code>JavaScript</code> 对象包裹，赋予 <code>observable</code> 的能力，通过隐式订阅，自动跟踪 <code>observable</code> 的变化。<code>MobX</code> 是观察引用的，在跟踪函数中（例如：<code>computed value</code>、<code>reactions</code>等等），任何被引用的 <code>observable</code> 的属性都会被记录，一旦引用改变，<code>MobX</code> 将作出反应。注意，不在跟踪函数中的属性将不会被跟踪，在异步中访问的属性也不会被跟踪</li><li><code>Redux</code> 的 <code>state</code> 是只读的，只能通过将之前的 <code>state</code> 与触发的 <code>action</code> 结合，产生新的 <code>state</code>，因此是纯净的（<code>pure</code>）。而 <code>MobX</code> 的 <code>state</code> 即可读又可写，<code>action</code> 是非必须的，可以直接赋值改变，因此是不纯净的（Impure）</li><li><code>Redux</code> 需要你去规范化你的 <code>state</code>，<code>Immutable</code> 数据使 <code>Reducer</code> 在更新时需要将状态树的祖先数据进行复制和更新，新的对象会导致与之 <code>connect</code>的所有 <code>UI</code> 组件都重复渲染。因此<code>Redux state</code> 不建议进行深层嵌套，或者需要我们在组件中用 <code>shouldComponentUpdate</code> 优化。而 <code>MobX</code> 只自动更新你所关心的，不必担心嵌套带来的重渲染问题</li></ul><blockquote><p><code>redux</code> 管理的是 (<code>STORE</code> -&gt; <code>VIEW</code> -&gt; <code>ACTION</code>) 的整个闭环，而 <code>mobx</code> 只关心 <code>STORE</code> -&gt; <code>VIEW</code> 的部分</p></blockquote><p><strong>优点</strong></p><ul><li><strong>基于运行时的数据订阅</strong> <code>mobx</code> 的数据依赖始终保持了最小，而且还是基于运行时。而如果用 <code>redux</code>，可能一不小心就多订阅或者少订阅了数据。所以为了达到高性能，我们需要借助 <code>PureRenderMixin</code> 以及 <code>reselect</code> 对 <code>selector</code> 做缓存</li><li><strong>通过 OOP 的方式组织领域模型 (domain model)</strong> <code>OOP</code> 的方式在某些场景下会比较方便，尤其是容易抽取 <code>domain model</code> 的时候。进而由于 <code>mobx</code> 支持引用的方式引用数据，所以可以非常容易得形成模型图 (model graph )，这样可以更好地理解我们的应用。</li><li><strong>修改数据方便自然</strong> <code>mobx</code> 是基于原生的 <code>JavaScript</code> 对象、数组和 <code>Class</code>实现的。所以修改数据不需要额外语法成本，也不需要始终返回一个新的数据，而是直接操作数据</li></ul><p><strong>缺点</strong></p><ul><li><p><strong>缺最佳实践和社区</strong> mobx 比较新，遇到的问题可能社区都没有遇到过。并且，mobx 并没有很好的扩展/插件机制</p></li><li><p>随意修改 store</p></li></ul><p>我们都知道 redux 里唯一可以改数据的地方是 reducer，这样可以保证应用的安全稳定；而 mobx 可以随意修改数据，触发更新，给人一种不安全的感觉</p><pre><code>* 最新的`mobx 2.2` 加入了 `action` 的支持。并且在开启 `strict mode` 之后，就只有 `action` 可以对数据进行修改，限制数据的修改入口。可以解决这个问题\n</code></pre><ul><li><p>逻辑层的限制</p><ul><li>如果更新逻辑不能很好地封装在 <code>domain class</code> 里，用 <code>redux</code> 会更合适。另外，<code>mobx</code>缺类 <code>redux-saga</code> 的库，业务逻辑的整合不知道放哪合适</li></ul></li></ul><h2 id="二、核心api" tabindex="-1"><a class="header-anchor" href="#二、核心api"><span>二、核心API</span></a></h2><p><img src="'+p+`" alt="mobx"></p><h3 id="_2-1-observable" tabindex="-1"><a class="header-anchor" href="#_2-1-observable"><span>2.1 @observable</span></a></h3><blockquote><p><code>Observable</code> 值可以是JS基本数据类型、引用类型、普通对象、类实例、数组和映射。其修饰的state会暴露出来供观察者使用</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// Observable 值可以是JS基本数据类型、引用类型、普通对象、类实例、数组和映射</span></span>
<span class="line">    @observable title <span class="token operator">=</span> <span class="token string">&#39;this is about page&#39;</span></span>
<span class="line">    @observable num <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 计算值(computed values)是可以根据现有的状态或其它计算值衍生出的值</span></span>
<span class="line">    @computed <span class="token keyword">get</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是computed经过计算的getter,currenct num:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 注意：当你使用装饰器模式时，@action 中的 this 没有绑定在当前这个实例上，要用过 @action.bound 来绑定 使得 this 绑定在实例对象上</span></span>
<span class="line">    @action<span class="token punctuation">.</span>bound <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">++</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    @action<span class="token punctuation">.</span>bound <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">--</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-observer" tabindex="-1"><a class="header-anchor" href="#_2-2-observer"><span>2.2 observer</span></a></h3><blockquote><p>可以用作包裹 <code>React</code> 组件的高阶组件。 在组件的 <code>render</code> 函数中的任何已使用的 <code>observable</code> 发生变化时，组件都会自动重新渲染。 注意 <code>observer</code> 是由 <code>&quot;mobx-react&quot;</code> 包提供的，而不是 <code>mobx</code> 本身</p></blockquote><ul><li><code>@Observer</code> 是一个注解，本质上是用 <code>mobx.autorun</code> 包装了组件的 <code>render</code> 函数以确保任何组件渲染中使用的数据变化时都可以强制刷新组件</li></ul><h3 id="_2-3-computed" tabindex="-1"><a class="header-anchor" href="#_2-3-computed"><span>2.3 @computed</span></a></h3><ul><li>计算值(<code>computed values</code>)是可以根据现有的状态或其它计算值衍生出的值</li><li>用于获取由基础 <code>state</code>衍生出来的值。如果基础值没有变，获取衍生值时就会走缓存，这样就不会引起虚拟 DOM 的重新渲染</li></ul><blockquote><ul><li><code>getter</code>：获得计算得到的新<code>state</code>并返回。</li><li><code>setter</code>： 不能用来直接改变计算属性的值，但是它们可以用来作“逆向”衍生。</li></ul></blockquote><blockquote><p>通过 <code>@computed + getter</code>函数来定义衍生值</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span></span>
<span class="line">        @observable length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        @computed <span class="token keyword">get</span> <span class="token function">squared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">set</span> <span class="token function">squared</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 这是一个自动的动作，不需要注解</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-actions" tabindex="-1"><a class="header-anchor" href="#_2-4-actions"><span>2.4 @actions</span></a></h3><blockquote><ul><li>只有在 <code>actions</code> 中，才可以修改 <code>Mobx</code> 中 <code>state</code> 的值</li><li>注意：当你使用装饰器模式时，<code>@action</code> 中的 <code>this</code> 没有绑定在当前这个实例上，要用过 [\`@action.bound](mailto:\`@action.bound)\`来绑定 使得\`this\` 绑定在实例对象上</li></ul></blockquote><ul><li>通过引入 <code>mobx</code> 定义的严格模式，强制使用 <code>action</code> 来修改状态</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span>configure<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mobx&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">enforceActions</span><span class="token operator">:</span> <span class="token string">&#39;always&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 开启严格模式</span></span>
<span class="line">    @action<span class="token punctuation">.</span>bound <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">++</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    @action<span class="token punctuation">.</span>bound <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">--</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-autorun" tabindex="-1"><a class="header-anchor" href="#_2-5-autorun"><span>2.5 autorun</span></a></h3><ul><li>当可观察对象中保存的值发生变化时，可以在<code>mobx.autorun</code>中被观察到。<code>observable</code> 的值初始化或改变时，自动运行</li><li>如果你想响应式的产生一个可以被其它 <code>observer</code> 使用的值，请使用 <code>@computed</code>，如果你不想产生一个新值，而想要达到一个效果，请使用 <code>autorun</code>。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用</li></ul><h3 id="_2-6-reactions" tabindex="-1"><a class="header-anchor" href="#_2-6-reactions"><span>2.6 reactions</span></a></h3><blockquote><p><code>Reactions</code>和计算值很像，但它不是产生一个新的值，而是会产生一些副作用，比如打印到控制台、网络请求、递增地更新 <code>React</code>组件树以修补<code>DOM</code>、等等。 简而言之，<code>reactions</code> 在 响应式编程和命令式编程之间建立沟通的桥梁</p></blockquote><h3 id="_2-7-flow" tabindex="-1"><a class="header-anchor" href="#_2-7-flow"><span>2.7 Flow</span></a></h3><blockquote><p>用法: <code>flow(function* (args) { })</code></p></blockquote><ul><li><code>flow()</code> 接收 <code>generator</code> 函数作为它唯一的输入</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> configure <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mobx&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 不允许在动作外部修改状态</span></span>
<span class="line">    <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">enforceActions</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span></span>
<span class="line">        @observable githubProjects <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        @observable state <span class="token operator">=</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;pending&quot; / &quot;done&quot; / &quot;error&quot;</span></span>
<span class="line">    </span>
<span class="line">    </span>
<span class="line">        fetchProjects <span class="token operator">=</span> <span class="token function">flow</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fetchProjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;- 注意*号，这是生成器函数！</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>githubProjects <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> projects <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">fetchGithubProjectsSomehow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用 yield 代替 await</span></span>
<span class="line">                <span class="token keyword">const</span> filteredProjects <span class="token operator">=</span> <span class="token function">somePreprocessing</span><span class="token punctuation">(</span>projects<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">                <span class="token comment">// 异步代码自动会被 \`action\` 包装</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;done&quot;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>githubProjects <span class="token operator">=</span> filteredProjects<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、计数器例子" tabindex="-1"><a class="header-anchor" href="#三、计数器例子"><span>三、计数器例子</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> observer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mobx-react&#39;</span><span class="token punctuation">;</span><span class="token comment">//结合react</span></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> observable<span class="token punctuation">,</span> autorun<span class="token punctuation">,</span>computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mobx&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 定义数据store</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span></span>
<span class="line">      @observable number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      @computed <span class="token keyword">get</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;number:&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>number</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 用action改变数据，避免混乱</span></span>
<span class="line">      @action <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">++</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      @action <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">--</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 把属性注入react组件</span></span>
<span class="line">    @observer</span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            <span class="token punctuation">{</span> store<span class="token punctuation">.</span>msg <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInc<span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">+</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleDec<span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token operator">-</span> <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">handleInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        store<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token function">handleDec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        store<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、应用案例" tabindex="-1"><a class="header-anchor" href="#四、应用案例"><span>四、应用案例</span></a></h2><blockquote><p>https://github.com/poetries/react-mobx-template</p></blockquote><h2 id="五、参考" tabindex="-1"><a class="header-anchor" href="#五、参考"><span>五、参考</span></a></h2><blockquote><p>文档学习 https://cn.mobx.js.org/</p></blockquote><p>阅读全文</p>`,48),i=[l];function u(r,d){return a(),s("div",null,i)}const m=n(c,[["render",u],["__file","React-Mobx 总结.html.vue"]]),b=JSON.parse('{"path":"/React-Mobx%20%E6%80%BB%E7%BB%93.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/react/03-MobX%E6%80%BB%E7%BB%93.html 一、认识MobX 打印mobx，看看mobx中有什么 mobx MobX的整个流程 mobx MobX 和 Redux 的比较 Redux 是单一数据源，而 MobX 往往是多...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/React-Mobx%20%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/react/03-MobX%E6%80%BB%E7%BB%93.html 一、认识MobX 打印mobx，看看mobx中有什么 mobx MobX的整个流程 mobx MobX 和 Redux 的比较 Redux 是单一数据源，而 MobX 往往是多..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_gitee_20191001_8.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-05T17:33:19.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-05T17:33:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_20191001_8.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_20191001_9.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_gitee_20191001_10.png\\"],\\"dateModified\\":\\"2024-06-05T17:33:19.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、认识MobX","slug":"一、认识mobx","link":"#一、认识mobx","children":[]},{"level":2,"title":"二、核心API","slug":"二、核心api","link":"#二、核心api","children":[{"level":3,"title":"2.1 @observable","slug":"_2-1-observable","link":"#_2-1-observable","children":[]},{"level":3,"title":"2.2 observer","slug":"_2-2-observer","link":"#_2-2-observer","children":[]},{"level":3,"title":"2.3 @computed","slug":"_2-3-computed","link":"#_2-3-computed","children":[]},{"level":3,"title":"2.4 @actions","slug":"_2-4-actions","link":"#_2-4-actions","children":[]},{"level":3,"title":"2.5 autorun","slug":"_2-5-autorun","link":"#_2-5-autorun","children":[]},{"level":3,"title":"2.6 reactions","slug":"_2-6-reactions","link":"#_2-6-reactions","children":[]},{"level":3,"title":"2.7 Flow","slug":"_2-7-flow","link":"#_2-7-flow","children":[]}]},{"level":2,"title":"三、计数器例子","slug":"三、计数器例子","link":"#三、计数器例子","children":[]},{"level":2,"title":"四、应用案例","slug":"四、应用案例","link":"#四、应用案例","children":[]},{"level":2,"title":"五、参考","slug":"五、参考","link":"#五、参考","children":[]}],"git":{"updatedTime":1717608799000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"React-Mobx 总结.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/react/03-MobX%E6%80%BB%E7%BB%93.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/react/03-MobX%E6%80%BB%E7%BB%93.html</a></p>\\n<h2>一、认识MobX</h2>\\n<blockquote>\\n<p>打印<code>mobx</code>，看看<code>mobx</code>中有什么</p>\\n</blockquote>"}');export{m as comp,b as data};
