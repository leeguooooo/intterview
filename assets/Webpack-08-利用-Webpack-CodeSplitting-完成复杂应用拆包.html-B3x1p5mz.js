import{_ as n}from"./error-BYO_3BXn.js";import{_ as s,c as a,o as p,a as e}from"./app-TapK6V6W.js";const t="/images/s_poetries_work_images_20210503215543.png",l="/images/s_poetries_work_images_20210503215550.png",i="/images/s_poetries_work_images_20210503215602.png",c="/images/s_poetries_work_images_20210503215612.png",o="/images/s_poetries_work_images_20210503215627.png",r="/images/s_poetries_work_images_20210503215647.png",u="/images/s_poetries_work_images_20210503215654.png",d={},k=e(`<p>原文链接: <a href="https://interview.poetries.top/principle-docs/webpack/08-%E5%88%A9%E7%94%A8%20Webpack%20CodeSplitting%20%E5%AE%8C%E6%88%90%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E6%8B%86%E5%8C%85.html" target="_blank" rel="noopener noreferrer">https://interview.poetries.top/principle-docs/webpack/08-%E5%88%A9%E7%94%A8%20Webpack%20CodeSplitting%20%E5%AE%8C%E6%88%90%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E6%8B%86%E5%8C%85.html</a></p><h2 id="all-in-one-的弊端" tabindex="-1"><a class="header-anchor" href="#all-in-one-的弊端"><span>All in One 的弊端</span></a></h2><p>通过 Webpack 实现前端项目整体模块化的优势固然明显，但是它也会存在一些弊端：它最终会将我们所有的代码打包到一起。试想一下，如果我们的应用非常复杂，模块非常多，那么这种 All in One 的方式就会导致打包的结果过大，甚至超过 4 ～ 5M。</p><p>在绝大多数的情况下，应用刚开始工作时，并不是所有的模块都是必需的。如果这些模块全部被打包到一起，即便应用只需要一两个模块工作，也必须先把 bundle.js 整体加载进来，而且前端应用一般都是运行在浏览器端，这也就意味着应用的响应速度会受到影响，也会浪费大量的流量和带宽。</p><p>所以这种 All in One 的方式并不合理，更为合理的方案是<strong>把打包的结果按照一定的规则分离到多个 bundle 中，然后根据应用的运行需要按需加载</strong> 。这样就可以降低启动成本，提高响应速度。</p><p>其实这并不矛盾，只是物极必反罢了。Web 应用中的资源受环境所限，太大不行，太碎更不行。因为我们开发过程中划分模块的颗粒度一般都会非常的细，很多时候一个模块只是提供了一个小工具函数，并不能形成一个完整的功能单元。</p><p>如果我们不将这些资源模块打包，直接按照开发过程中划分的模块颗粒度进行加载，那么运行一个小小的功能，就需要加载非常多的资源模块。</p><p>再者，目前仍是主流（🐶）的 HTTP 1.1 本身就存在一些缺陷，例如：</p><ul><li>同一个域名下的并行请求是有限制的；</li><li>每次请求本身都会有一定的延迟；</li><li>每次请求除了传输内容，还有额外的请求头，大量请求的情况下，这些请求头加在一起也会浪费流量和带宽。</li></ul><p>综上所述，模块打包肯定是必要的，但当应用体积越来越大时，我们也要学会变通。</p><h2 id="code-splitting" tabindex="-1"><a class="header-anchor" href="#code-splitting"><span>Code Splitting</span></a></h2><p>为了解决打包结果过大导致的问题，Webpack 设计了一种分包功能：Code Splitting（代码分割）。</p><p>Code Splitting 通过把项目中的资源模块按照我们设计的规则打包到不同的 bundle 中，从而降低应用的启动成本，提高响应速度。</p><p>Webpack 实现分包的方式主要有两种：</p><ul><li>根据业务不同配置多个打包入口，输出多个打包结果；</li><li>结合 ES Modules 的动态导入（Dynamic Imports）特性，按需加载模块。</li></ul><h3 id="多入口打包" tabindex="-1"><a class="header-anchor" href="#多入口打包"><span>多入口打包</span></a></h3><p>多入口打包一般适用于传统的多页应用程序，最常见的划分规则就是一个页面对应一个打包入口，对于不同页面间公用的部分，再提取到公共的结果中。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token punctuation">.</span></span>
<span class="line">    ├── dist</span>
<span class="line">    ├── src</span>
<span class="line">    │   ├── common</span>
<span class="line">    │   │   ├── fetch<span class="token punctuation">.</span>js</span>
<span class="line">    │   │   └── global<span class="token punctuation">.</span>css</span>
<span class="line">    │   ├── album<span class="token punctuation">.</span>css</span>
<span class="line">    │   ├── album<span class="token punctuation">.</span>html</span>
<span class="line">    │   ├── album<span class="token punctuation">.</span>js</span>
<span class="line">    │   ├── index<span class="token punctuation">.</span>css</span>
<span class="line">    │   ├── index<span class="token punctuation">.</span>html</span>
<span class="line">    │   └── index<span class="token punctuation">.</span>js</span>
<span class="line">    ├── <span class="token keyword">package</span><span class="token punctuation">.</span>json</span>
<span class="line">    └── webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个示例中有两个页面，分别是 index 和 album。代码组织的逻辑也很简单：</p><ul><li>index.js: 负责实现 index 页面功能逻辑；</li><li>album.js: 负责实现 album 页面功能逻辑；</li><li>global.css: 是公用的样式文件；</li><li>fetch.js: 是一个公用的模块，负责请求 API。</li></ul><p>我们回到配置文件中，这里我们尝试为这个案例配置多入口打包，具体配置如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// ./webpack.config.js</span></span>
<span class="line">    <span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">}</span></span> */</span></span>
<span class="line">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">album</span><span class="token operator">:</span> <span class="token string">&#39;./src/album.js&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].bundle.js&#39;</span> <span class="token comment">// [name] 是入口名称</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// ... 其他配置</span></span>
<span class="line">      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Multi Entry&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Multi Entry&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/album.html&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;album.html&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般 <code>entry</code> 属性中只会配置一个打包入口，如果我们需要配置多个入口，可以把 <code>entry</code> 定义成一个对象。</p><blockquote><p>注意：这里 <code>entry</code> 是定义为对象而不是数组，如果是数组的话就是把多个文件打包到一起，还是一个入口。</p></blockquote><p>在这个对象中一个属性就是一个入口，属性名称就是这个入口的名称，值就是这个入口对应的文件路径。那我们这里配置的就是 index 和 album 页面所对应的 JS 文件路径。</p><p>一旦我们的入口配置为多入口形式，那输出文件名也需要修改，因为两个入口就有两个打包结果，不能都叫 bundle.js。我们可以在这里使用 <code>[name]</code> 这种占位符来输出动态的文件名，<code>[name]</code> 最终会被替换为入口的名称。</p><p>除此之外，在配置中还通过 html-webpack-plugin 分别为 index 和 album 页面生成了对应的 HTML 文件。</p><p>完成配置之后，我们就可以打开命令行终端，运行 Webpack 打包，那此次打包会有两个入口。打包完成后，我们找到输出目录，这里就能看到两个入口文件各自的打包结果了，如下图所示：</p><p><img src="`+t+'" alt=""></p><p>但是这里还有一个小问题，我们打开任意一个输出的 HTML 文件，具体结果如下图：</p><p><img src="'+l+`" alt=""></p><p>你就会发现 index 和 album 两个打包结果都被页面载入了，而我们希望的是每个页面只使用它对应的那个输出结果。</p><p>所以这里还需要修改配置文件，我们回到配置文件中，找到输出 HTML 的插件，默认这个插件会自动注入所有的打包结果，如果需要指定所使用的 bundle，我们可以通过 <code>HtmlWebpackPlugin</code> 的 <code>chunks</code> 属性来设置。我们分别为两个页面配置使用不同的 chunk，具体配置如下：</p><blockquote><p>💡：每个打包入口都会形成一个独立的 chunk（块）。</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// ./webpack.config.js</span></span>
<span class="line">    <span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">}</span></span> */</span></span>
<span class="line">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">album</span><span class="token operator">:</span> <span class="token string">&#39;./src/album.js&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].bundle.js&#39;</span> <span class="token comment">// [name] 是入口名称</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token comment">// ... 其他配置</span></span>
<span class="line">      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Multi Entry&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 指定使用 index.bundle.js</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Multi Entry&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/album.html&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;album.html&#39;</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;album&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 指定使用 album.bundle.js</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成以后我们再次回到命令行终端，然后运行打包，打包结果如下图：</p><p><img src="`+i+`" alt=""></p><p>这一次打包的结果就完全正常了。</p><p>那这就是配置多入口打包的方法，以及如何指定在 HTML 中注入的 bundle。</p><h3 id="提取公共模块" tabindex="-1"><a class="header-anchor" href="#提取公共模块"><span>提取公共模块</span></a></h3><p>多入口打包本身非常容易理解和使用，但是它也存在一个小问题，就是不同的入口中一定会存在一些公共使用的模块，如果按照目前这种多入口打包的方式，就会出现多个打包结果中有相同的模块的情况。</p><p>例如我们上述案例中，index 入口和 album 入口中就共同使用了 global.css 和 fetch.js 这两个公共的模块。这里是因为我们的示例比较简单，所以重复的影响没有那么大，但是如果我们公共使用的是 jQuery 或者 Vue.js 这些体积较大的模块，那影响就会比较大，不利于公共模块的缓存。</p><p>所以我们还需要把这些公共的模块提取到一个单独的 bundle 中。Webpack 中实现公共模块提取非常简单，我们只需要在优化配置中开启 <code>splitChunks</code> 功能就可以了，具体配置如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// ./webpack.config.js</span></span>
<span class="line">    <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Configuration<span class="token punctuation">}</span></span> */</span></span>
<span class="line">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">album</span><span class="token operator">:</span> <span class="token string">&#39;./src/album.js&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].bundle.js&#39;</span> <span class="token comment">// [name] 是入口名称</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 自动提取所有公共模块到单独 bundle</span></span>
<span class="line">          <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// ... 其他配置</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们回到配置文件中，这里在 <code>optimization</code> 属性中添加 <code>splitChunks</code> 属性，那这个属性的值是一个对象，这个对象需要配置一个 <code>chunks</code> 属性，我们这里将它设置为 <code>&#39;all&#39;</code>，表示所有公共模块都可以被提取。</p><p>完成以后我们打开命令行终端，再次运行 Webpack 打包，打包结果如下图：</p><p><img src="`+c+'" alt=""></p><p>此时在我们的 dist 下就会额外生成一个 JS 文件，在这个文件中就是 index 和 album 中公共的模块部分了。</p><p>除此之外，splitChunks 还支持很多高级的用法，可以实现各种各样的分包策略，这些我们可以在<a href="https://webpack.js.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener noreferrer">文档 (opens new window)</a>中找到对应的介绍。</p><h3 id="动态导入" tabindex="-1"><a class="header-anchor" href="#动态导入"><span>动态导入</span></a></h3><p>除了多入口打包的方式，Code Splitting 更常见的实现方式还是结合 ES Modules 的动态导入特性，从而实现按需加载。</p><p>按需加载是开发浏览器应用中一个非常常见的需求。一般我们常说的按需加载指的是加载数据或者加载图片，但是我们这里所说的按需加载，指的是在应用运行过程中，需要某个资源模块时，才去加载这个模块。这种方式极大地降低了应用启动时需要加载的资源体积，提高了应用的响应速度，同时也节省了带宽和流量。</p><p>Webpack 中支持使用动态导入的方式实现模块的按需加载，而且所有动态导入的模块都会被自动提取到单独的 bundle 中，从而实现分包。</p><p>相比于多入口的方式，动态导入更为灵活，因为我们可以通过代码中的逻辑去控制需不需要加载某个模块，或者什么时候加载某个模块。而且我们分包的目的中，很重要的一点就是让模块实现按需加载，从而提高应用的响应速度。</p><p>接下来，我们具体来看如何使用动态导入特性，这里我已经设计了一个可以发挥按需加载作用的场景，具体效果如下图所示：</p><p><img src="'+o+`" alt=""></p><p>在这个应用的主体区域，如果我们访问的是首页，它显示的是一个文章列表，如果我们访问的是相册页，它显示的就是相册列表。</p><p>回到代码中，我们来看目前的实现方式，具体结构如下：</p><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   .</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   ├── src</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   ├── album</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   │   ├── album.css</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   │   └── album.js</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   ├── common</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   │   ├── fetch.js</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   │   └── global.css</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   ├── posts</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   │   ├── posts.css</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   │   └── posts.js</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   ├── index.html</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   │   └── index.js</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   ├── package.json</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   └── webpack.config.js</span>
<span class="line"></span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文章列表对应的是这里的 posts 组件，而相册列表对应的是 album 组件。我在打包入口（index.js）中同时导入了这两个模块，然后根据页面锚点的变化决定显示哪个组件，核心代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// ./src/index.js</span></span>
<span class="line">    <span class="token keyword">import</span> posts <span class="token keyword">from</span> <span class="token string">&#39;./posts/posts&#39;</span></span>
<span class="line">    <span class="token keyword">import</span> album <span class="token keyword">from</span> <span class="token string">&#39;./album/album&#39;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> hash <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">||</span> <span class="token string">&#39;#posts&#39;</span></span>
<span class="line">      <span class="token keyword">const</span> mainElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.main&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      mainElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> <span class="token string">&#39;#posts&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> <span class="token string">&#39;#album&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">album</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，就可能产生资源浪费。试想一下：如果用户只需要访问其中一个页面，那么加载另外一个页面对应的组件就是浪费。</p><p>如果我们采用动态导入的方式，就不会产生浪费的问题了，因为所有的组件都是惰性加载，只有用到的时候才会去加载。具体实现代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// ./src/index.js</span></span>
<span class="line">    <span class="token comment">// import posts from &#39;./posts/posts&#39;</span></span>
<span class="line">    <span class="token comment">// import album from &#39;./album/album&#39;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> hash <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">||</span> <span class="token string">&#39;#posts&#39;</span></span>
<span class="line">      <span class="token keyword">const</span> mainElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.main&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      mainElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> <span class="token string">&#39;#posts&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// mainElement.appendChild(posts())</span></span>
<span class="line">        <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./posts/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hash <span class="token operator">===</span> <span class="token string">&#39;#album&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// mainElement.appendChild(album())</span></span>
<span class="line">        <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./album/album&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> album <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">album</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">,</span> update<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>P.S. 为了动态导入模块，可以将 import 关键字作为函数调用。当以这种方式使用时，import 函数返回一个 Promise 对象。这就是 ES Modules 标准中的[Dynamic Imports (opens new window)](https://developer.mozilla.org/en- US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports)。</p></blockquote><p>这里我们先移除 <code>import</code> 这种静态导入，然后在需要使用组件的地方通过 <code>import</code> 函数导入指定路径，那这个方法返回的是一个 <code>Promise</code>。在这个 <code>Promise</code> 的 <code>then</code> 方法中我们能够拿到模块对象。由于我们这里的 posts 和 album 模块是以默认成员导出，所以我们需要解构模块对象中的 <code>default</code>，先拿到导出成员，然后再正常使用这个导出成员。</p><p>完成以后，Webpack Dev Server 自动重新打包，我们再次回到浏览器，此时应用仍然是可以正常工作的。</p><p>那我们再回到命令行终端，重新运行打包，然后看看此时的打包结果具体是怎样的。打包完成以后我们打开 dist 目录，具体结果如下图所示：</p><p><img src="`+n+`" alt="2cI8yhJZmU9uoHl8"><br><p>出错的图片链接: <a href="https://blog.zce.me/static/a66030202485b10c8b96e15f5b0c4f43/906b5/2cI8yhJZmU9uoHl8.png" target="_blank">https://blog.zce.me/static/a66030202485b10c8b96e15f5b0c4f43/906b5/2cI8yhJZmU9uoHl8.png</a></p></p><p>此时 dist 目录下就会额外多出三个 JS 文件，其中有两个文件是动态导入的模块，另外一个文件是动态导入模块中公共的模块，这三个文件就是由动态导入自动分包产生的。</p><p>以上就是动态导入在 Webpack 中的使用。整个过程我们无需额外配置任何地方，只需要按照 ES Modules 动态导入的方式去导入模块就可以了，Webpack 内部会自动处理分包和按需加载。</p><p>如果你使用的是 Vue.js 之类的 SPA 开发框架的话，那你项目中路由映射的组件就可以通过这种动态导入的方式实现按需加载，从而实现分包。</p><h3 id="魔法注释" tabindex="-1"><a class="header-anchor" href="#魔法注释"><span>魔法注释</span></a></h3><p>默认通过动态导入产生的 bundle 文件，它的 name 就是一个序号，这并没有什么不好，因为大多数时候，在生产环境中我们根本不用关心资源文件的名称。</p><p>但是如果你还是需要给这些 bundle 命名的话，就可以使用 Webpack 所特有的魔法注释去实现。具体方式如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">    <span class="token comment">// 魔法注释</span></span>
<span class="line">    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &#39;posts&#39; */</span> <span class="token string">&#39;./posts/posts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      mainElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所谓魔法注释，就是在 import 函数的形式参数位置，添加一个行内注释，这个注释有一个特定的格式：<code>webpackChunkName: &#39;&lt;chunk- name&gt;&#39;</code>，这样就可以给分包的 chunk 起名字了。</p><p>完成过后，我们再次打开命令行终端，运行 Webpack 打包，那此时我们生成 bundle 的 name 就会使用刚刚注释中提供的名称了，具体结果如下：</p><p><img src="`+r+'" alt=""></p><p>除此之外，魔法注释还有个特殊用途：如果你的 <code>&lt;chunk-name&gt;</code> 相同的话，那相同的 <code>&lt;chunk-name&gt;</code> 最终就会被打包到一起，例如我们这里可以把这两个 <code>&lt;chunk-name&gt;</code> 都设置为 components，然后再次运行打包，那此时这两个模块都会被打包到一个文件中，具体操作如下图所示：</p><p><img src="'+u+'" alt=""></p><p>借助这个特点，你就可以根据自己的实际情况，灵活组织动态加载的模块了。</p><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后"><span>写在最后</span></a></h2><p>最后我们来总结一下今天的核心内容，我们介绍了为什么要进行分包，以及 Webpack Code Splitting 的两种实现方式，分别是多入口打包和动态导入，其中动态导入会更常用到。</p><p>在这里，我想跟你再额外聊几句我的看法，其实从事开发工作就是不断“制造”问题，再不断解决问题。也正是在这样的一个制造问题解决问题的过程中，行业的技术、标准、工具不断迭代，不断完善，这是一个向好的过程。作为开发人员千万不要怕麻烦，应该多思考，多积累，才能更好地适应，甚至是引领行业的变化。</p><p>阅读全文</p>',86),m=[k];function v(b,g){return p(),a("div",null,m)}const _=s(d,[["render",v],["__file","Webpack-08-利用-Webpack-CodeSplitting-完成复杂应用拆包.html.vue"]]),E=JSON.parse('{"path":"/Webpack-08-%E5%88%A9%E7%94%A8-Webpack-CodeSplitting-%E5%AE%8C%E6%88%90%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E6%8B%86%E5%8C%85.html","title":"","lang":"zh-CN","frontmatter":{"description":"原文链接: https://interview.poetries.top/principle-docs/webpack/08-%E5%88%A9%E7%94%A8%20Webpack%20CodeSplitting%20%E5%AE%8C%E6%88%90%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E6%8B%86%E5%...","head":[["meta",{"property":"og:url","content":"https://interview.leeguoo.com/Webpack-08-%E5%88%A9%E7%94%A8-Webpack-CodeSplitting-%E5%AE%8C%E6%88%90%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E6%8B%86%E5%8C%85.html"}],["meta",{"property":"og:site_name","content":"前端面试题集锦"}],["meta",{"property":"og:description","content":"原文链接: https://interview.poetries.top/principle-docs/webpack/08-%E5%88%A9%E7%94%A8%20Webpack%20CodeSplitting%20%E5%AE%8C%E6%88%90%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E6%8B%86%E5%..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215543.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-06T05:59:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-06T05:59:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215543.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215550.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215602.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215612.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215627.png\\",\\"https://interview.leeguoo.com/images/error.webp\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215647.png\\",\\"https://interview.leeguoo.com/images/s_poetries_work_images_20210503215654.png\\"],\\"dateModified\\":\\"2024-06-06T05:59:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"All in One 的弊端","slug":"all-in-one-的弊端","link":"#all-in-one-的弊端","children":[]},{"level":2,"title":"Code Splitting","slug":"code-splitting","link":"#code-splitting","children":[{"level":3,"title":"多入口打包","slug":"多入口打包","link":"#多入口打包","children":[]},{"level":3,"title":"提取公共模块","slug":"提取公共模块","link":"#提取公共模块","children":[]},{"level":3,"title":"动态导入","slug":"动态导入","link":"#动态导入","children":[]},{"level":3,"title":"魔法注释","slug":"魔法注释","link":"#魔法注释","children":[]}]},{"level":2,"title":"写在最后","slug":"写在最后","link":"#写在最后","children":[]}],"git":{"updatedTime":1717653571000,"contributors":[{"name":"guoli","email":"guoli@zhihu.com","commits":1}]},"autoDesc":true,"filePathRelative":"Webpack-08-利用-Webpack-CodeSplitting-完成复杂应用拆包.md","excerpt":"<p>原文链接: <a href=\\"https://interview.poetries.top/principle-docs/webpack/08-%E5%88%A9%E7%94%A8%20Webpack%20CodeSplitting%20%E5%AE%8C%E6%88%90%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E6%8B%86%E5%8C%85.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://interview.poetries.top/principle-docs/webpack/08-%E5%88%A9%E7%94%A8%20Webpack%20CodeSplitting%20%E5%AE%8C%E6%88%90%E5%A4%8D%E6%9D%82%E5%BA%94%E7%94%A8%E6%8B%86%E5%8C%85.html</a></p>"}');export{_ as comp,E as data};
